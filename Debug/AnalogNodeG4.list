
AnalogNodeG4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080065cc  080065cc  000075cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065ec  080065ec  00008030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080065ec  080065ec  00008030  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080065ec  080065ec  00008030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ec  080065ec  000075ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065f0  080065f0  000075f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  080065f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000700  20000030  08006624  00008030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  08006624  00008730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f63  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ee  00000000  00000000  0001dfc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  000211b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fc  00000000  00000000  000227d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cfe  00000000  00000000  000238d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001731c  00000000  00000000  000445d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db284  00000000  00000000  0005b8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136b72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f18  00000000  00000000  00136bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0013cad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000030 	.word	0x20000030
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080065b4 	.word	0x080065b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000034 	.word	0x20000034
 8000214:	080065b4 	.word	0x080065b4

08000218 <init_sensors>:
	}
}*/



void init_sensors(void){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
	//initialize the sensors
		for (int i = 0; i < SENSOR_NUM; i++) {
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e04b      	b.n	80002bc <init_sensors+0xa4>
			sensors[i].transfer_function = TF_3V3;
 8000224:	492a      	ldr	r1, [pc, #168]	@ (80002d0 <init_sensors+0xb8>)
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	4613      	mov	r3, r2
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	4413      	add	r3, r2
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	440b      	add	r3, r1
 8000232:	4a28      	ldr	r2, [pc, #160]	@ (80002d4 <init_sensors+0xbc>)
 8000234:	601a      	str	r2, [r3, #0]
			sensors[i].CAN_ID = 0;
 8000236:	4926      	ldr	r1, [pc, #152]	@ (80002d0 <init_sensors+0xb8>)
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	4613      	mov	r3, r2
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	4413      	add	r3, r2
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	440b      	add	r3, r1
 8000244:	3304      	adds	r3, #4
 8000246:	2200      	movs	r2, #0
 8000248:	801a      	strh	r2, [r3, #0]
			sensors[i].CAN_interval = 20;
 800024a:	4921      	ldr	r1, [pc, #132]	@ (80002d0 <init_sensors+0xb8>)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4613      	mov	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4413      	add	r3, r2
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	440b      	add	r3, r1
 8000258:	3306      	adds	r3, #6
 800025a:	2214      	movs	r2, #20
 800025c:	801a      	strh	r2, [r3, #0]
			sensors[i].averages = 0;
 800025e:	491c      	ldr	r1, [pc, #112]	@ (80002d0 <init_sensors+0xb8>)
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4613      	mov	r3, r2
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	4413      	add	r3, r2
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	440b      	add	r3, r1
 800026c:	3308      	adds	r3, #8
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
			sensors[i].pin = i;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	b2d8      	uxtb	r0, r3
 8000276:	4916      	ldr	r1, [pc, #88]	@ (80002d0 <init_sensors+0xb8>)
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	4613      	mov	r3, r2
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	4413      	add	r3, r2
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	440b      	add	r3, r1
 8000284:	330c      	adds	r3, #12
 8000286:	4602      	mov	r2, r0
 8000288:	701a      	strb	r2, [r3, #0]
			sensors[i].high_adc = 0xFFFF;
 800028a:	4911      	ldr	r1, [pc, #68]	@ (80002d0 <init_sensors+0xb8>)
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	4613      	mov	r3, r2
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	4413      	add	r3, r2
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	440b      	add	r3, r1
 8000298:	3312      	adds	r3, #18
 800029a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800029e:	801a      	strh	r2, [r3, #0]
			sensors[i].low_adc = 0xFFFF;
 80002a0:	490b      	ldr	r1, [pc, #44]	@ (80002d0 <init_sensors+0xb8>)
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	4613      	mov	r3, r2
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	4413      	add	r3, r2
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	440b      	add	r3, r1
 80002ae:	3310      	adds	r3, #16
 80002b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002b4:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < SENSOR_NUM; i++) {
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	3301      	adds	r3, #1
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b0b      	cmp	r3, #11
 80002c0:	ddb0      	ble.n	8000224 <init_sensors+0xc>
		}
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	200002c0 	.word	0x200002c0
 80002d4:	080017ad 	.word	0x080017ad

080002d8 <Config_Setup>:

void Config_Setup(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	//initialize the sensors
	init_sensors();
 80002dc:	f7ff ff9c 	bl	8000218 <init_sensors>


#if ID == 1
    Config_1();
 80002e0:	f000 f8c8 	bl	8000474 <Config_1>
    Config_2();
#elif ID == 3
    Config_3();
#endif

	read_all_calib_values();
 80002e4:	f000 f860 	bl	80003a8 <read_all_calib_values>

}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <ADC_Calib_Update>:


void ADC_Calib_Update() { //writes all 12 * 2 calibration values into the FLASH memory
 80002ec:	b5b0      	push	{r4, r5, r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
    static FLASH_EraseInitTypeDef FlashErase;
    uint32_t PageError = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]

    // Unlock the Flash memory
    HAL_FLASH_Unlock();
 80002f6:	f004 f897 	bl	8004428 <HAL_FLASH_Unlock>

    //Erase memory before writing
    // Configure the flash erase parameters
    FlashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80002fa:	4b28      	ldr	r3, [pc, #160]	@ (800039c <ADC_Calib_Update+0xb0>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
    FlashErase.Page = (FLASH_ADDRESS / FLASH_PAGE_SIZE); // Convert address to page number
 8000300:	4b26      	ldr	r3, [pc, #152]	@ (800039c <ADC_Calib_Update+0xb0>)
 8000302:	4a27      	ldr	r2, [pc, #156]	@ (80003a0 <ADC_Calib_Update+0xb4>)
 8000304:	609a      	str	r2, [r3, #8]
    FlashErase.NbPages = 1;
 8000306:	4b25      	ldr	r3, [pc, #148]	@ (800039c <ADC_Calib_Update+0xb0>)
 8000308:	2201      	movs	r2, #1
 800030a:	60da      	str	r2, [r3, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800030c:	b672      	cpsid	i
}
 800030e:	bf00      	nop

    __disable_irq();

    // Perform the erase operation
    if (HAL_FLASHEx_Erase(&FlashErase, &PageError) != HAL_OK) {
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4619      	mov	r1, r3
 8000314:	4821      	ldr	r0, [pc, #132]	@ (800039c <ADC_Calib_Update+0xb0>)
 8000316:	f004 f971 	bl	80045fc <HAL_FLASHEx_Erase>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <ADC_Calib_Update+0x38>
        // Handle the error
        Error_Handler();
 8000320:	f000 ffc6 	bl	80012b0 <Error_Handler>
    }

    for (int i = 0; i < SENSOR_NUM; i++) {
 8000324:	2300      	movs	r3, #0
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	e02c      	b.n	8000384 <ADC_Calib_Update+0x98>
        // Prepare data to write
        uint64_t data_to_write = (sensors[i].high_adc << 16) | sensors[i].low_adc;
 800032a:	491e      	ldr	r1, [pc, #120]	@ (80003a4 <ADC_Calib_Update+0xb8>)
 800032c:	697a      	ldr	r2, [r7, #20]
 800032e:	4613      	mov	r3, r2
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	4413      	add	r3, r2
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	440b      	add	r3, r1
 8000338:	3312      	adds	r3, #18
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	0419      	lsls	r1, r3, #16
 800033e:	4819      	ldr	r0, [pc, #100]	@ (80003a4 <ADC_Calib_Update+0xb8>)
 8000340:	697a      	ldr	r2, [r7, #20]
 8000342:	4613      	mov	r3, r2
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	4413      	add	r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	4403      	add	r3, r0
 800034c:	3310      	adds	r3, #16
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	430b      	orrs	r3, r1
 8000352:	17da      	asrs	r2, r3, #31
 8000354:	461c      	mov	r4, r3
 8000356:	4615      	mov	r5, r2
 8000358:	e9c7 4502 	strd	r4, r5, [r7, #8]
        // Program the flash memory
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_ADDRESS + i * 8, data_to_write) != HAL_OK) { //TODO Figure out how to write just 32 bits without a need for filler 0s
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8000362:	f503 537c 	add.w	r3, r3, #16128	@ 0x3f00
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	4619      	mov	r1, r3
 800036a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800036e:	2000      	movs	r0, #0
 8000370:	f003 ffee 	bl	8004350 <HAL_FLASH_Program>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <ADC_Calib_Update+0x92>
            Error_Handler();
 800037a:	f000 ff99 	bl	80012b0 <Error_Handler>
    for (int i = 0; i < SENSOR_NUM; i++) {
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	3301      	adds	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	2b0b      	cmp	r3, #11
 8000388:	ddcf      	ble.n	800032a <ADC_Calib_Update+0x3e>
        }
    }
    // Lock the Flash memory after operation
    HAL_FLASH_Lock();
 800038a:	f004 f86f 	bl	800446c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800038e:	b662      	cpsie	i
}
 8000390:	bf00      	nop
    // Enable interrupts after the operation
    __enable_irq();
}
 8000392:	bf00      	nop
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bdb0      	pop	{r4, r5, r7, pc}
 800039a:	bf00      	nop
 800039c:	2000004c 	.word	0x2000004c
 80003a0:	0001003f 	.word	0x0001003f
 80003a4:	200002c0 	.word	0x200002c0

080003a8 <read_all_calib_values>:

	sensor->calib_code = code;

}

void read_all_calib_values(){
 80003a8:	b480      	push	{r7}
 80003aa:	b087      	sub	sp, #28
 80003ac:	af00      	add	r7, sp, #0

	for(int i = 0; i < SENSOR_NUM; i++){
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e053      	b.n	800045c <read_all_calib_values+0xb4>

		uint32_t value = *(__IO uint32_t*)(FLASH_ADDRESS + i * 8);
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 80003ba:	f503 537c 	add.w	r3, r3, #16128	@ 0x3f00
 80003be:	00db      	lsls	r3, r3, #3
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	60fb      	str	r3, [r7, #12]

		uint16_t low = value;
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	817b      	strh	r3, [r7, #10]
		uint16_t high = value >> 16;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	0c1b      	lsrs	r3, r3, #16
 80003cc:	813b      	strh	r3, [r7, #8]

		sensors[i].low_adc = low;
 80003ce:	4928      	ldr	r1, [pc, #160]	@ (8000470 <read_all_calib_values+0xc8>)
 80003d0:	697a      	ldr	r2, [r7, #20]
 80003d2:	4613      	mov	r3, r2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	440b      	add	r3, r1
 80003dc:	3310      	adds	r3, #16
 80003de:	897a      	ldrh	r2, [r7, #10]
 80003e0:	801a      	strh	r2, [r3, #0]
		sensors[i].high_adc = high;
 80003e2:	4923      	ldr	r1, [pc, #140]	@ (8000470 <read_all_calib_values+0xc8>)
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	4613      	mov	r3, r2
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	4413      	add	r3, r2
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	440b      	add	r3, r1
 80003f0:	3312      	adds	r3, #18
 80003f2:	893a      	ldrh	r2, [r7, #8]
 80003f4:	801a      	strh	r2, [r3, #0]

		uint16_t default_value = 0xFFFF;
 80003f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80003fa:	80fb      	strh	r3, [r7, #6]
		int8_t code = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	74fb      	strb	r3, [r7, #19]
		if(sensors[i].low_adc != default_value )
 8000400:	491b      	ldr	r1, [pc, #108]	@ (8000470 <read_all_calib_values+0xc8>)
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	4613      	mov	r3, r2
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	4413      	add	r3, r2
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	440b      	add	r3, r1
 800040e:	3310      	adds	r3, #16
 8000410:	881b      	ldrh	r3, [r3, #0]
 8000412:	88fa      	ldrh	r2, [r7, #6]
 8000414:	429a      	cmp	r2, r3
 8000416:	d003      	beq.n	8000420 <read_all_calib_values+0x78>
				code += 1;
 8000418:	7cfb      	ldrb	r3, [r7, #19]
 800041a:	3301      	adds	r3, #1
 800041c:	b2db      	uxtb	r3, r3
 800041e:	74fb      	strb	r3, [r7, #19]
		if(sensors[i].high_adc != default_value )
 8000420:	4913      	ldr	r1, [pc, #76]	@ (8000470 <read_all_calib_values+0xc8>)
 8000422:	697a      	ldr	r2, [r7, #20]
 8000424:	4613      	mov	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	4413      	add	r3, r2
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	440b      	add	r3, r1
 800042e:	3312      	adds	r3, #18
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	88fa      	ldrh	r2, [r7, #6]
 8000434:	429a      	cmp	r2, r3
 8000436:	d003      	beq.n	8000440 <read_all_calib_values+0x98>
				code += 2;
 8000438:	7cfb      	ldrb	r3, [r7, #19]
 800043a:	3302      	adds	r3, #2
 800043c:	b2db      	uxtb	r3, r3
 800043e:	74fb      	strb	r3, [r7, #19]

		sensors[i].calib_code = code;
 8000440:	7cf8      	ldrb	r0, [r7, #19]
 8000442:	490b      	ldr	r1, [pc, #44]	@ (8000470 <read_all_calib_values+0xc8>)
 8000444:	697a      	ldr	r2, [r7, #20]
 8000446:	4613      	mov	r3, r2
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	4413      	add	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	440b      	add	r3, r1
 8000450:	330d      	adds	r3, #13
 8000452:	4602      	mov	r2, r0
 8000454:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SENSOR_NUM; i++){
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	3301      	adds	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	2b0b      	cmp	r3, #11
 8000460:	dda8      	ble.n	80003b4 <read_all_calib_values+0xc>



		//check_calib_status(&sensors[i]);
	}
}
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	371c      	adds	r7, #28
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	200002c0 	.word	0x200002c0

08000474 <Config_1>:


void Config_1(void) {
 8000474:	b4b0      	push	{r4, r5, r7}
 8000476:	b0a9      	sub	sp, #164	@ 0xa4
 8000478:	af00      	add	r7, sp, #0



	Sensor BTN1 = {TF_BTN, 12, 100, 0, V5_in0};
 800047a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]
 800048a:	4b87      	ldr	r3, [pc, #540]	@ (80006a8 <Config_1+0x234>)
 800048c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000490:	230c      	movs	r3, #12
 8000492:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8000496:	2364      	movs	r3, #100	@ 0x64
 8000498:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800049c:	2302      	movs	r3, #2
 800049e:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
	Sensor BTN2 = {TF_BTN, 13, 100, 0, V5_in5};
 80004a2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]
 80004b2:	4b7d      	ldr	r3, [pc, #500]	@ (80006a8 <Config_1+0x234>)
 80004b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80004b6:	230d      	movs	r3, #13
 80004b8:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 80004bc:	2364      	movs	r3, #100	@ 0x64
 80004be:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 80004c2:	2307      	movs	r3, #7
 80004c4:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
	Sensor BTN3 = {TF_BTN, 14, 100, 0, V5_in4};
 80004c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	4b73      	ldr	r3, [pc, #460]	@ (80006a8 <Config_1+0x234>)
 80004da:	667b      	str	r3, [r7, #100]	@ 0x64
 80004dc:	230e      	movs	r3, #14
 80004de:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80004e2:	2364      	movs	r3, #100	@ 0x64
 80004e4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80004e8:	2306      	movs	r3, #6
 80004ea:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
	Sensor APPS2 = {TF_APPS2, 2, 100, 0, V5_in1};
 80004ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]
 80004fe:	4b6b      	ldr	r3, [pc, #428]	@ (80006ac <Config_1+0x238>)
 8000500:	653b      	str	r3, [r7, #80]	@ 0x50
 8000502:	2302      	movs	r3, #2
 8000504:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000508:	2364      	movs	r3, #100	@ 0x64
 800050a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800050e:	2303      	movs	r3, #3
 8000510:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	Sensor APPS1 = {TF_APPS1, 1, 100, 0, V24_in1};
 8000514:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
 8000524:	4b62      	ldr	r3, [pc, #392]	@ (80006b0 <Config_1+0x23c>)
 8000526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000528:	2301      	movs	r3, #1
 800052a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800052e:	2364      	movs	r3, #100	@ 0x64
 8000530:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8000534:	2305      	movs	r3, #5
 8000536:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	//Sensor ANGLE = {TF_24V, 6, 100, 0, V24_in0};
	Sensor BPPS = {TF_BPPS, 3, 100, 0, V5_in2};
 800053a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]
 800054a:	4b5a      	ldr	r3, [pc, #360]	@ (80006b4 <Config_1+0x240>)
 800054c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800054e:	2303      	movs	r3, #3
 8000550:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000552:	2364      	movs	r3, #100	@ 0x64
 8000554:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000556:	230b      	movs	r3, #11
 8000558:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	Sensor F_ROLL = {TF_5V, 10, 100, 0, V5_in6};
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
 800056c:	4b52      	ldr	r3, [pc, #328]	@ (80006b8 <Config_1+0x244>)
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	230a      	movs	r3, #10
 8000572:	833b      	strh	r3, [r7, #24]
 8000574:	2364      	movs	r3, #100	@ 0x64
 8000576:	837b      	strh	r3, [r7, #26]
 8000578:	2308      	movs	r3, #8
 800057a:	f887 3020 	strb.w	r3, [r7, #32]
	Sensor F_HEAVE = {TF_5V, 8, 100, 0, V5_in3};
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
 800058c:	4b4a      	ldr	r3, [pc, #296]	@ (80006b8 <Config_1+0x244>)
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	2308      	movs	r3, #8
 8000592:	80bb      	strh	r3, [r7, #4]
 8000594:	2364      	movs	r3, #100	@ 0x64
 8000596:	80fb      	strh	r3, [r7, #6]
 8000598:	230a      	movs	r3, #10
 800059a:	733b      	strb	r3, [r7, #12]

    sensors[APPS1.pin] = APPS1;
 800059c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80005a0:	4619      	mov	r1, r3
 80005a2:	4a46      	ldr	r2, [pc, #280]	@ (80006bc <Config_1+0x248>)
 80005a4:	460b      	mov	r3, r1
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	461d      	mov	r5, r3
 80005b0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80005b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b8:	6823      	ldr	r3, [r4, #0]
 80005ba:	602b      	str	r3, [r5, #0]
    sensors[APPS2.pin] = APPS2;
 80005bc:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80005c0:	4619      	mov	r1, r3
 80005c2:	4a3e      	ldr	r2, [pc, #248]	@ (80006bc <Config_1+0x248>)
 80005c4:	460b      	mov	r3, r1
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	440b      	add	r3, r1
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4413      	add	r3, r2
 80005ce:	461d      	mov	r5, r3
 80005d0:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80005d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d8:	6823      	ldr	r3, [r4, #0]
 80005da:	602b      	str	r3, [r5, #0]
    sensors[BPPS.pin] = BPPS;
 80005dc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80005e0:	4619      	mov	r1, r3
 80005e2:	4a36      	ldr	r2, [pc, #216]	@ (80006bc <Config_1+0x248>)
 80005e4:	460b      	mov	r3, r1
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	440b      	add	r3, r1
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	461d      	mov	r5, r3
 80005f0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80005f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005f8:	6823      	ldr	r3, [r4, #0]
 80005fa:	602b      	str	r3, [r5, #0]
	sensors[BTN1.pin] = BTN1;
 80005fc:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8000600:	4619      	mov	r1, r3
 8000602:	4a2e      	ldr	r2, [pc, #184]	@ (80006bc <Config_1+0x248>)
 8000604:	460b      	mov	r3, r1
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	440b      	add	r3, r1
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	461d      	mov	r5, r3
 8000610:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8000614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000618:	6823      	ldr	r3, [r4, #0]
 800061a:	602b      	str	r3, [r5, #0]
	sensors[BTN2.pin] = BTN2;
 800061c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8000620:	4619      	mov	r1, r3
 8000622:	4a26      	ldr	r2, [pc, #152]	@ (80006bc <Config_1+0x248>)
 8000624:	460b      	mov	r3, r1
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	440b      	add	r3, r1
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4413      	add	r3, r2
 800062e:	461d      	mov	r5, r3
 8000630:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8000634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000638:	6823      	ldr	r3, [r4, #0]
 800063a:	602b      	str	r3, [r5, #0]
	sensors[BTN3.pin] = BTN3;
 800063c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000640:	4619      	mov	r1, r3
 8000642:	4a1e      	ldr	r2, [pc, #120]	@ (80006bc <Config_1+0x248>)
 8000644:	460b      	mov	r3, r1
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	440b      	add	r3, r1
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	461d      	mov	r5, r3
 8000650:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8000654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000658:	6823      	ldr	r3, [r4, #0]
 800065a:	602b      	str	r3, [r5, #0]
	//sensors[ANGLE.pin] = ANGLE;
	sensors[F_ROLL.pin] = F_ROLL;
 800065c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000660:	4619      	mov	r1, r3
 8000662:	4a16      	ldr	r2, [pc, #88]	@ (80006bc <Config_1+0x248>)
 8000664:	460b      	mov	r3, r1
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	440b      	add	r3, r1
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	4413      	add	r3, r2
 800066e:	461d      	mov	r5, r3
 8000670:	f107 0414 	add.w	r4, r7, #20
 8000674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000678:	6823      	ldr	r3, [r4, #0]
 800067a:	602b      	str	r3, [r5, #0]
	sensors[F_HEAVE.pin] = F_HEAVE;
 800067c:	7b3b      	ldrb	r3, [r7, #12]
 800067e:	4619      	mov	r1, r3
 8000680:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <Config_1+0x248>)
 8000682:	460b      	mov	r3, r1
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	440b      	add	r3, r1
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	461d      	mov	r5, r3
 800068e:	463c      	mov	r4, r7
 8000690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000694:	6823      	ldr	r3, [r4, #0]
 8000696:	602b      	str	r3, [r5, #0]
	SensorData data = {0};
	pedalreq.output = data;
	pedalreq.inputs[2];

	*/
    CAN_interval = 20;
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <Config_1+0x24c>)
 800069a:	2214      	movs	r2, #20
 800069c:	801a      	strh	r2, [r3, #0]
}
 800069e:	bf00      	nop
 80006a0:	37a4      	adds	r7, #164	@ 0xa4
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bcb0      	pop	{r4, r5, r7}
 80006a6:	4770      	bx	lr
 80006a8:	080019e9 	.word	0x080019e9
 80006ac:	08001959 	.word	0x08001959
 80006b0:	080018c9 	.word	0x080018c9
 80006b4:	0800182d 	.word	0x0800182d
 80006b8:	080017ed 	.word	0x080017ed
 80006bc:	200002c0 	.word	0x200002c0
 80006c0:	200006ca 	.word	0x200006ca

080006c4 <CanSend>:
CAN_Message TxMessage;

uint8_t sensor_for_calib; //Sensor calibration number
int8_t calib_select = -1; //Upper or lower calibration

void CanSend(uint8_t *TxData){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80006cc:	e001      	b.n	80006d2 <CanSend+0xe>
		Error_Handler();
 80006ce:	f000 fdef 	bl	80012b0 <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <CanSend+0x34>)
 80006d4:	f003 fad6 	bl	8003c84 <HAL_FDCAN_GetTxFifoFreeLevel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <CanSend+0x2a>
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4906      	ldr	r1, [pc, #24]	@ (80006fc <CanSend+0x38>)
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <CanSend+0x34>)
 80006e4:	f003 f982 	bl	80039ec <HAL_FDCAN_AddMessageToTxFifoQ>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1ef      	bne.n	80006ce <CanSend+0xa>
	}
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000210 	.word	0x20000210
 80006fc:	200006d4 	.word	0x200006d4

08000700 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d024      	beq.n	800075e <HAL_FDCAN_RxFifo0Callback+0x5e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxMessage.Bytes) != HAL_OK)
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000716:	4a15      	ldr	r2, [pc, #84]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000718:	2140      	movs	r1, #64	@ 0x40
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f003 f9aa 	bl	8003a74 <HAL_FDCAN_GetRxMessage>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d002      	beq.n	800072c <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 8000726:	f000 fdc3 	bl	80012b0 <Error_Handler>
 800072a:	e00e      	b.n	800074a <HAL_FDCAN_RxFifo0Callback+0x4a>
		}else{

			RxMessage.Id = RxHeader.Identifier;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x6c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000734:	801a      	strh	r2, [r3, #0]
			RxMessage.DLC = RxHeader.DataLength;
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x70>)
 800073e:	709a      	strb	r2, [r3, #2]

			decode(RxMessage);
 8000740:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000742:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000746:	f000 f95b 	bl	8000a00 <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800074a:	2200      	movs	r2, #0
 800074c:	2101      	movs	r1, #1
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f003 faaa 	bl	8003ca8 <HAL_FDCAN_ActivateNotification>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_FDCAN_RxFifo0Callback+0x5e>
		{
			/* Notification Error */
			Error_Handler();
 800075a:	f000 fda9 	bl	80012b0 <Error_Handler>
		}
	}
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000005f 	.word	0x2000005f
 800076c:	200006f8 	.word	0x200006f8
 8000770:	2000005c 	.word	0x2000005c

08000774 <print>:



void print(uint16_t select){
 8000774:	b5b0      	push	{r4, r5, r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	80fb      	strh	r3, [r7, #6]

		if(sensors[select].CAN_ID){
 800077e:	88fa      	ldrh	r2, [r7, #6]
 8000780:	492e      	ldr	r1, [pc, #184]	@ (800083c <print+0xc8>)
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	440b      	add	r3, r1
 800078c:	3304      	adds	r3, #4
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d04f      	beq.n	8000834 <print+0xc0>

			sensors[select].data = sensors[select].transfer_function(1,sensors[select].averages, &sensors[select]);
 8000794:	88fa      	ldrh	r2, [r7, #6]
 8000796:	4929      	ldr	r1, [pc, #164]	@ (800083c <print+0xc8>)
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	440b      	add	r3, r1
 80007a2:	681d      	ldr	r5, [r3, #0]
 80007a4:	88fa      	ldrh	r2, [r7, #6]
 80007a6:	4925      	ldr	r1, [pc, #148]	@ (800083c <print+0xc8>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	440b      	add	r3, r1
 80007b2:	3308      	adds	r3, #8
 80007b4:	6819      	ldr	r1, [r3, #0]
 80007b6:	88fa      	ldrh	r2, [r7, #6]
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4a1e      	ldr	r2, [pc, #120]	@ (800083c <print+0xc8>)
 80007c2:	4413      	add	r3, r2
 80007c4:	88fc      	ldrh	r4, [r7, #6]
 80007c6:	461a      	mov	r2, r3
 80007c8:	2001      	movs	r0, #1
 80007ca:	47a8      	blx	r5
 80007cc:	4603      	mov	r3, r0
 80007ce:	4619      	mov	r1, r3
 80007d0:	4a1a      	ldr	r2, [pc, #104]	@ (800083c <print+0xc8>)
 80007d2:	4623      	mov	r3, r4
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4423      	add	r3, r4
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	330e      	adds	r3, #14
 80007de:	460a      	mov	r2, r1
 80007e0:	801a      	strh	r2, [r3, #0]
			TxMessage.Bytes[0] = sensors[select].data;
 80007e2:	88fa      	ldrh	r2, [r7, #6]
 80007e4:	4915      	ldr	r1, [pc, #84]	@ (800083c <print+0xc8>)
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	440b      	add	r3, r1
 80007f0:	330e      	adds	r3, #14
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <print+0xcc>)
 80007f8:	70da      	strb	r2, [r3, #3]
			TxMessage.Bytes[1] = sensors[select].data >> 8;
 80007fa:	88fa      	ldrh	r2, [r7, #6]
 80007fc:	490f      	ldr	r1, [pc, #60]	@ (800083c <print+0xc8>)
 80007fe:	4613      	mov	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	4413      	add	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	440b      	add	r3, r1
 8000808:	330e      	adds	r3, #14
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	b29b      	uxth	r3, r3
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <print+0xcc>)
 8000814:	711a      	strb	r2, [r3, #4]
			TxHeader.Identifier = sensors[select].CAN_ID;
 8000816:	88fa      	ldrh	r2, [r7, #6]
 8000818:	4908      	ldr	r1, [pc, #32]	@ (800083c <print+0xc8>)
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	440b      	add	r3, r1
 8000824:	3304      	adds	r3, #4
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <print+0xd0>)
 800082c:	601a      	str	r2, [r3, #0]

			CanSend(TxMessage.Bytes);
 800082e:	4806      	ldr	r0, [pc, #24]	@ (8000848 <print+0xd4>)
 8000830:	f7ff ff48 	bl	80006c4 <CanSend>
		}

}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bdb0      	pop	{r4, r5, r7, pc}
 800083c:	200002c0 	.word	0x200002c0
 8000840:	20000068 	.word	0x20000068
 8000844:	200006d4 	.word	0x200006d4
 8000848:	2000006b 	.word	0x2000006b

0800084c <sent_calib_done>:


void sent_calib_done(){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

	TxHeader.Identifier = CAN_CALIIB_DONE_ID;
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <sent_calib_done+0x64>)
 8000852:	2220      	movs	r2, #32
 8000854:	601a      	str	r2, [r3, #0]
	TxMessage.Bytes[0] = sensor_for_calib;
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <sent_calib_done+0x68>)
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <sent_calib_done+0x6c>)
 800085c:	70da      	strb	r2, [r3, #3]
	CanSend(TxMessage.Bytes);
 800085e:	4817      	ldr	r0, [pc, #92]	@ (80008bc <sent_calib_done+0x70>)
 8000860:	f7ff ff30 	bl	80006c4 <CanSend>


	sensors[sensor_for_calib].calib_code = sensors[sensor_for_calib].calib_code | (1 << calib_select);
 8000864:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <sent_calib_done+0x68>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <sent_calib_done+0x74>)
 800086c:	460b      	mov	r3, r1
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	440b      	add	r3, r1
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	330d      	adds	r3, #13
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b25a      	sxtb	r2, r3
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <sent_calib_done+0x78>)
 800087e:	f993 3000 	ldrsb.w	r3, [r3]
 8000882:	4619      	mov	r1, r3
 8000884:	2301      	movs	r3, #1
 8000886:	408b      	lsls	r3, r1
 8000888:	b25b      	sxtb	r3, r3
 800088a:	4313      	orrs	r3, r2
 800088c:	b25a      	sxtb	r2, r3
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <sent_calib_done+0x68>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	b2d0      	uxtb	r0, r2
 8000896:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <sent_calib_done+0x74>)
 8000898:	460b      	mov	r3, r1
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	440b      	add	r3, r1
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	330d      	adds	r3, #13
 80008a4:	4602      	mov	r2, r0
 80008a6:	701a      	strb	r2, [r3, #0]

	ADC_Calib_Update();
 80008a8:	f7ff fd20 	bl	80002ec <ADC_Calib_Update>

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200006d4 	.word	0x200006d4
 80008b4:	20000074 	.word	0x20000074
 80008b8:	20000068 	.word	0x20000068
 80008bc:	2000006b 	.word	0x2000006b
 80008c0:	200002c0 	.word	0x200002c0
 80008c4:	20000000 	.word	0x20000000

080008c8 <calibration>:

uint16_t max_value = 0;
uint16_t min_value = 65535;


void calibration(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

	if(calib_select == -1){
 80008cc:	4b45      	ldr	r3, [pc, #276]	@ (80009e4 <calibration+0x11c>)
 80008ce:	f993 3000 	ldrsb.w	r3, [r3]
 80008d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d6:	f000 8082 	beq.w	80009de <calibration+0x116>
		return;
	}
	else{

		calibration_counter++;
 80008da:	4b43      	ldr	r3, [pc, #268]	@ (80009e8 <calibration+0x120>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	3301      	adds	r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b41      	ldr	r3, [pc, #260]	@ (80009e8 <calibration+0x120>)
 80008e4:	701a      	strb	r2, [r3, #0]
		//calibration_value += (sensors[sensor_for_calib].averages - calibration_value) / calibration_counter;

		if (sensors[sensor_for_calib].averages > max_value) {
 80008e6:	4b41      	ldr	r3, [pc, #260]	@ (80009ec <calibration+0x124>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4619      	mov	r1, r3
 80008ec:	4a40      	ldr	r2, [pc, #256]	@ (80009f0 <calibration+0x128>)
 80008ee:	460b      	mov	r3, r1
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	440b      	add	r3, r1
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	3308      	adds	r3, #8
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a3d      	ldr	r2, [pc, #244]	@ (80009f4 <calibration+0x12c>)
 80008fe:	8812      	ldrh	r2, [r2, #0]
 8000900:	4293      	cmp	r3, r2
 8000902:	d90d      	bls.n	8000920 <calibration+0x58>
					max_value = sensors[sensor_for_calib].averages;
 8000904:	4b39      	ldr	r3, [pc, #228]	@ (80009ec <calibration+0x124>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	4a39      	ldr	r2, [pc, #228]	@ (80009f0 <calibration+0x128>)
 800090c:	460b      	mov	r3, r1
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	440b      	add	r3, r1
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4413      	add	r3, r2
 8000916:	3308      	adds	r3, #8
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	b29a      	uxth	r2, r3
 800091c:	4b35      	ldr	r3, [pc, #212]	@ (80009f4 <calibration+0x12c>)
 800091e:	801a      	strh	r2, [r3, #0]
				}

		if (sensors[sensor_for_calib].averages < min_value) {
 8000920:	4b32      	ldr	r3, [pc, #200]	@ (80009ec <calibration+0x124>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	4a32      	ldr	r2, [pc, #200]	@ (80009f0 <calibration+0x128>)
 8000928:	460b      	mov	r3, r1
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	440b      	add	r3, r1
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	3308      	adds	r3, #8
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a30      	ldr	r2, [pc, #192]	@ (80009f8 <calibration+0x130>)
 8000938:	8812      	ldrh	r2, [r2, #0]
 800093a:	4293      	cmp	r3, r2
 800093c:	d20d      	bcs.n	800095a <calibration+0x92>
					min_value = sensors[sensor_for_calib].averages;
 800093e:	4b2b      	ldr	r3, [pc, #172]	@ (80009ec <calibration+0x124>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	4619      	mov	r1, r3
 8000944:	4a2a      	ldr	r2, [pc, #168]	@ (80009f0 <calibration+0x128>)
 8000946:	460b      	mov	r3, r1
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	440b      	add	r3, r1
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	3308      	adds	r3, #8
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b28      	ldr	r3, [pc, #160]	@ (80009f8 <calibration+0x130>)
 8000958:	801a      	strh	r2, [r3, #0]
				}

		if(calibration_counter > (5000 / CAN_interval)){
 800095a:	4b23      	ldr	r3, [pc, #140]	@ (80009e8 <calibration+0x120>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <calibration+0x134>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f241 3388 	movw	r3, #5000	@ 0x1388
 800096a:	fb93 f3f1 	sdiv	r3, r3, r1
 800096e:	429a      	cmp	r2, r3
 8000970:	dd36      	ble.n	80009e0 <calibration+0x118>

			//calibration_value = calibration_value / calibration_counter;


			if(calib_select == 0)
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <calibration+0x11c>)
 8000974:	f993 3000 	ldrsb.w	r3, [r3]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d10d      	bne.n	8000998 <calibration+0xd0>
				sensors[sensor_for_calib].low_adc = min_value;
 800097c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <calibration+0x124>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <calibration+0x130>)
 8000984:	8818      	ldrh	r0, [r3, #0]
 8000986:	4a1a      	ldr	r2, [pc, #104]	@ (80009f0 <calibration+0x128>)
 8000988:	460b      	mov	r3, r1
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	440b      	add	r3, r1
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	4413      	add	r3, r2
 8000992:	3310      	adds	r3, #16
 8000994:	4602      	mov	r2, r0
 8000996:	801a      	strh	r2, [r3, #0]
			if(calib_select == 1)
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <calibration+0x11c>)
 800099a:	f993 3000 	ldrsb.w	r3, [r3]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d10d      	bne.n	80009be <calibration+0xf6>
				sensors[sensor_for_calib].high_adc = max_value;
 80009a2:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <calibration+0x124>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4619      	mov	r1, r3
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <calibration+0x12c>)
 80009aa:	8818      	ldrh	r0, [r3, #0]
 80009ac:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <calibration+0x128>)
 80009ae:	460b      	mov	r3, r1
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	440b      	add	r3, r1
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	4413      	add	r3, r2
 80009b8:	3312      	adds	r3, #18
 80009ba:	4602      	mov	r2, r0
 80009bc:	801a      	strh	r2, [r3, #0]


			sent_calib_done();
 80009be:	f7ff ff45 	bl	800084c <sent_calib_done>

			calib_select = -1;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <calibration+0x11c>)
 80009c4:	22ff      	movs	r2, #255	@ 0xff
 80009c6:	701a      	strb	r2, [r3, #0]
			calibration_counter = 0;
 80009c8:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <calibration+0x120>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]

			max_value = 0;
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <calibration+0x12c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	801a      	strh	r2, [r3, #0]
			min_value = 65535;
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <calibration+0x130>)
 80009d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009da:	801a      	strh	r2, [r3, #0]
 80009dc:	e000      	b.n	80009e0 <calibration+0x118>
		return;
 80009de:	bf00      	nop
		}

	}
}
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000075 	.word	0x20000075
 80009ec:	20000074 	.word	0x20000074
 80009f0:	200002c0 	.word	0x200002c0
 80009f4:	20000076 	.word	0x20000076
 80009f8:	20000002 	.word	0x20000002
 80009fc:	200006ca 	.word	0x200006ca

08000a00 <decode>:

void decode(CAN_Message msg){
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	switch(msg.Id){
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	2b1f      	cmp	r3, #31
 8000a10:	d107      	bne.n	8000a22 <decode+0x22>
		case CAN_CALIB_ID:
			sensor_for_calib = msg.Bytes[0];
 8000a12:	79fa      	ldrb	r2, [r7, #7]
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <decode+0x30>)
 8000a16:	701a      	strb	r2, [r3, #0]
			calib_select = msg.Bytes[1];
 8000a18:	7a3b      	ldrb	r3, [r7, #8]
 8000a1a:	b25a      	sxtb	r2, r3
 8000a1c:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <decode+0x34>)
 8000a1e:	701a      	strb	r2, [r3, #0]
			break;
 8000a20:	bf00      	nop
	}
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000074 	.word	0x20000074
 8000a34:	20000000 	.word	0x20000000

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3e:	f001 f822 	bl	8001a86 <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 8000a42:	f7ff fc49 	bl	80002d8 <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a46:	f000 f863 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4a:	f000 fb23 	bl	8001094 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a4e:	f000 faef 	bl	8001030 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a52:	f000 f89d 	bl	8000b90 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000a56:	f000 fa1d 	bl	8000e94 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 8000a5a:	f000 fa9b 	bl	8000f94 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000a5e:	f000 f961 	bl	8000d24 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
 8000a62:	4822      	ldr	r0, [pc, #136]	@ (8000aec <main+0xb4>)
 8000a64:	f005 f894 	bl	8005b90 <HAL_TIM_Base_Start_IT>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <main+0x3a>
 8000a6e:	f000 fc1f 	bl	80012b0 <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000a72:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <main+0xb8>)
 8000a74:	6a1b      	ldr	r3, [r3, #32]
 8000a76:	461a      	mov	r2, r3
 8000a78:	491e      	ldr	r1, [pc, #120]	@ (8000af4 <main+0xbc>)
 8000a7a:	481d      	ldr	r0, [pc, #116]	@ (8000af0 <main+0xb8>)
 8000a7c:	f001 fc16 	bl	80022ac <HAL_ADC_Start_DMA>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <main+0x52>
 8000a86:	f000 fc13 	bl	80012b0 <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADC2Data, hadc2.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <main+0xc0>)
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	491a      	ldr	r1, [pc, #104]	@ (8000afc <main+0xc4>)
 8000a92:	4819      	ldr	r0, [pc, #100]	@ (8000af8 <main+0xc0>)
 8000a94:	f001 fc0a 	bl	80022ac <HAL_ADC_Start_DMA>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <main+0x6a>
 8000a9e:	f000 fc07 	bl	80012b0 <Error_Handler>

  uint8_t counter = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <main+0xc8>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d1fb      	bne.n	8000aa6 <main+0x6e>
		  if(millis % CAN_interval == 0){
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <main+0xcc>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a15      	ldr	r2, [pc, #84]	@ (8000b08 <main+0xd0>)
 8000ab4:	8812      	ldrh	r2, [r2, #0]
 8000ab6:	fbb3 f1f2 	udiv	r1, r3, r2
 8000aba:	fb01 f202 	mul.w	r2, r1, r2
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f0      	bne.n	8000aa6 <main+0x6e>
			print(counter);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fe53 	bl	8000774 <print>
			  calibration();
 8000ace:	f7ff fefb 	bl	80008c8 <calibration>
			  counter++;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	71fb      	strb	r3, [r7, #7]
			  if(counter == SENSOR_NUM){
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b0c      	cmp	r3, #12
 8000adc:	d1e3      	bne.n	8000aa6 <main+0x6e>
				  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8000ade:	2140      	movs	r1, #64	@ 0x40
 8000ae0:	480a      	ldr	r0, [pc, #40]	@ (8000b0c <main+0xd4>)
 8000ae2:	f004 f849 	bl	8004b78 <HAL_GPIO_TogglePin>
				  counter = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	  if(CAN_enable == 1){
 8000aea:	e7dc      	b.n	8000aa6 <main+0x6e>
 8000aec:	20000274 	.word	0x20000274
 8000af0:	20000078 	.word	0x20000078
 8000af4:	200003b0 	.word	0x200003b0
 8000af8:	200000e4 	.word	0x200000e4
 8000afc:	200003bc 	.word	0x200003bc
 8000b00:	200006d0 	.word	0x200006d0
 8000b04:	200006cc 	.word	0x200006cc
 8000b08:	200006ca 	.word	0x200006ca
 8000b0c:	48000800 	.word	0x48000800

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b094      	sub	sp, #80	@ 0x50
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0318 	add.w	r3, r7, #24
 8000b1a:	2238      	movs	r2, #56	@ 0x38
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f005 fd1c 	bl	800655c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b32:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b36:	f004 f839 	bl	8004bac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b44:	2340      	movs	r3, #64	@ 0x40
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0318 	add.w	r3, r7, #24
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 f8df 	bl	8004d14 <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b5c:	f000 fba8 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	230f      	movs	r3, #15
 8000b62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b64:	2301      	movs	r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 fbdd 	bl	8005338 <HAL_RCC_ClockConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b84:	f000 fb94 	bl	80012b0 <Error_Handler>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3750      	adds	r7, #80	@ 0x50
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	@ 0x30
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2220      	movs	r2, #32
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f005 fcd7 	bl	800655c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bae:	4b56      	ldr	r3, [pc, #344]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000bb0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000bb6:	4b54      	ldr	r3, [pc, #336]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000bb8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000bbc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bbe:	4b52      	ldr	r3, [pc, #328]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc4:	4b50      	ldr	r3, [pc, #320]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000bca:	4b4f      	ldr	r3, [pc, #316]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd6:	4b4c      	ldr	r3, [pc, #304]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000bd8:	2204      	movs	r2, #4
 8000bda:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bdc:	4b4a      	ldr	r3, [pc, #296]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000be2:	4b49      	ldr	r3, [pc, #292]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8000be8:	4b47      	ldr	r3, [pc, #284]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000bea:	2206      	movs	r2, #6
 8000bec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bee:	4b46      	ldr	r3, [pc, #280]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf6:	4b44      	ldr	r3, [pc, #272]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bfc:	4b42      	ldr	r3, [pc, #264]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c02:	4b41      	ldr	r3, [pc, #260]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c10:	4b3d      	ldr	r3, [pc, #244]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c18:	483b      	ldr	r0, [pc, #236]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000c1a:	f001 f9c3 	bl	8001fa4 <HAL_ADC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c24:	f000 fb44 	bl	80012b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	4835      	ldr	r0, [pc, #212]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000c34:	f002 f932 	bl	8002e9c <HAL_ADCEx_MultiModeConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c3e:	f000 fb37 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c42:	4b32      	ldr	r3, [pc, #200]	@ (8000d0c <MX_ADC1_Init+0x17c>)
 8000c44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c46:	2306      	movs	r3, #6
 8000c48:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c4e:	237f      	movs	r3, #127	@ 0x7f
 8000c50:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c52:	2304      	movs	r3, #4
 8000c54:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	482a      	ldr	r0, [pc, #168]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000c60:	f001 fbec 	bl	800243c <HAL_ADC_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c6a:	f000 fb21 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c6e:	4b28      	ldr	r3, [pc, #160]	@ (8000d10 <MX_ADC1_Init+0x180>)
 8000c70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c72:	230c      	movs	r3, #12
 8000c74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4823      	ldr	r0, [pc, #140]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000c7c:	f001 fbde 	bl	800243c <HAL_ADC_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000c86:	f000 fb13 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c8a:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <MX_ADC1_Init+0x184>)
 8000c8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c8e:	2312      	movs	r3, #18
 8000c90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	481c      	ldr	r0, [pc, #112]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000c98:	f001 fbd0 	bl	800243c <HAL_ADC_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000ca2:	f000 fb05 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <MX_ADC1_Init+0x188>)
 8000ca8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000caa:	2318      	movs	r3, #24
 8000cac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4815      	ldr	r0, [pc, #84]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000cb4:	f001 fbc2 	bl	800243c <HAL_ADC_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000cbe:	f000 faf7 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <MX_ADC1_Init+0x18c>)
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000cc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000cd2:	f001 fbb3 	bl	800243c <HAL_ADC_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000cdc:	f000 fae8 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_ADC1_Init+0x190>)
 8000ce2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000ce4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	@ (8000d08 <MX_ADC1_Init+0x178>)
 8000cf0:	f001 fba4 	bl	800243c <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000cfa:	f000 fad9 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3730      	adds	r7, #48	@ 0x30
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000078 	.word	0x20000078
 8000d0c:	04300002 	.word	0x04300002
 8000d10:	08600004 	.word	0x08600004
 8000d14:	0c900008 	.word	0x0c900008
 8000d18:	10c00010 	.word	0x10c00010
 8000d1c:	32601000 	.word	0x32601000
 8000d20:	3ef08000 	.word	0x3ef08000

08000d24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f005 fc13 	bl	800655c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d36:	4b4f      	ldr	r3, [pc, #316]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d38:	4a4f      	ldr	r2, [pc, #316]	@ (8000e78 <MX_ADC2_Init+0x154>)
 8000d3a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d3e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000d42:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d44:	4b4b      	ldr	r3, [pc, #300]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000d50:	4b48      	ldr	r3, [pc, #288]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d56:	4b47      	ldr	r3, [pc, #284]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5c:	4b45      	ldr	r3, [pc, #276]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d62:	4b44      	ldr	r3, [pc, #272]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d68:	4b42      	ldr	r3, [pc, #264]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 6;
 8000d6e:	4b41      	ldr	r3, [pc, #260]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d70:	2206      	movs	r2, #6
 8000d72:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d74:	4b3f      	ldr	r3, [pc, #252]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d82:	4b3c      	ldr	r3, [pc, #240]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000d88:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d90:	4b38      	ldr	r3, [pc, #224]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000d96:	4b37      	ldr	r3, [pc, #220]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d9e:	4835      	ldr	r0, [pc, #212]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000da0:	f001 f900 	bl	8001fa4 <HAL_ADC_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000daa:	f000 fa81 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dae:	4b33      	ldr	r3, [pc, #204]	@ (8000e7c <MX_ADC2_Init+0x158>)
 8000db0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db2:	2306      	movs	r3, #6
 8000db4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dba:	237f      	movs	r3, #127	@ 0x7f
 8000dbc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4619      	mov	r1, r3
 8000dca:	482a      	ldr	r0, [pc, #168]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000dcc:	f001 fb36 	bl	800243c <HAL_ADC_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000dd6:	f000 fa6b 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000dda:	4b29      	ldr	r3, [pc, #164]	@ (8000e80 <MX_ADC2_Init+0x15c>)
 8000ddc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dde:	230c      	movs	r3, #12
 8000de0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	4619      	mov	r1, r3
 8000de6:	4823      	ldr	r0, [pc, #140]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000de8:	f001 fb28 	bl	800243c <HAL_ADC_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000df2:	f000 fa5d 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000df6:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <MX_ADC2_Init+0x160>)
 8000df8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dfa:	2312      	movs	r3, #18
 8000dfc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4619      	mov	r1, r3
 8000e02:	481c      	ldr	r0, [pc, #112]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000e04:	f001 fb1a 	bl	800243c <HAL_ADC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8000e0e:	f000 fa4f 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <MX_ADC2_Init+0x164>)
 8000e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e16:	2318      	movs	r3, #24
 8000e18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4815      	ldr	r0, [pc, #84]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000e20:	f001 fb0c 	bl	800243c <HAL_ADC_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8000e2a:	f000 fa41 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <MX_ADC2_Init+0x168>)
 8000e30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000e3e:	f001 fafd 	bl	800243c <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8000e48:	f000 fa32 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <MX_ADC2_Init+0x16c>)
 8000e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000e50:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000e54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <MX_ADC2_Init+0x150>)
 8000e5c:	f001 faee 	bl	800243c <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 8000e66:	f000 fa23 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000e4 	.word	0x200000e4
 8000e78:	50000100 	.word	0x50000100
 8000e7c:	0c900008 	.word	0x0c900008
 8000e80:	10c00010 	.word	0x10c00010
 8000e84:	14f00020 	.word	0x14f00020
 8000e88:	2e300800 	.word	0x2e300800
 8000e8c:	36902000 	.word	0x36902000
 8000e90:	47520000 	.word	0x47520000

08000e94 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e98:	4b39      	ldr	r3, [pc, #228]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000e9a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f84 <MX_FDCAN1_Init+0xf0>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e9e:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ea4:	4b36      	ldr	r3, [pc, #216]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000eaa:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000eb0:	4b33      	ldr	r3, [pc, #204]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000eb6:	4b32      	ldr	r3, [pc, #200]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000ece:	4b2c      	ldr	r3, [pc, #176]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000ed0:	220d      	movs	r2, #13
 8000ed2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000eda:	4b29      	ldr	r3, [pc, #164]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ee0:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ee6:	4b26      	ldr	r3, [pc, #152]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000eec:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 8000ef2:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000ef4:	221c      	movs	r2, #28
 8000ef6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ef8:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f04:	481e      	ldr	r0, [pc, #120]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000f06:	f002 fbef 	bl	80036e8 <HAL_FDCAN_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000f10:	f000 f9ce 	bl	80012b0 <Error_Handler>



*/

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET); CAN_enable = 1;}
 8000f14:	481a      	ldr	r0, [pc, #104]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000f16:	f002 fd41 	bl	800399c <HAL_FDCAN_Start>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <MX_FDCAN1_Init+0x92>
 8000f20:	f000 f9c6 	bl	80012b0 <Error_Handler>
 8000f24:	e008      	b.n	8000f38 <MX_FDCAN1_Init+0xa4>
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f2c:	4816      	ldr	r0, [pc, #88]	@ (8000f88 <MX_FDCAN1_Init+0xf4>)
 8000f2e:	f003 fe0b 	bl	8004b48 <HAL_GPIO_WritePin>
 8000f32:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <MX_FDCAN1_Init+0xf8>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	4810      	ldr	r0, [pc, #64]	@ (8000f80 <MX_FDCAN1_Init+0xec>)
 8000f3e:	f002 feb3 	bl	8003ca8 <HAL_FDCAN_ActivateNotification>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_FDCAN1_Init+0xb8>
 8000f48:	f000 f9b2 	bl	80012b0 <Error_Handler>



  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <MX_FDCAN1_Init+0xfc>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_FDCAN1_Init+0xfc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <MX_FDCAN1_Init+0xfc>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <MX_FDCAN1_Init+0xfc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <MX_FDCAN1_Init+0xfc>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <MX_FDCAN1_Init+0xfc>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f70:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <MX_FDCAN1_Init+0xfc>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <MX_FDCAN1_Init+0xfc>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000210 	.word	0x20000210
 8000f84:	40006400 	.word	0x40006400
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	200006d0 	.word	0x200006d0
 8000f90:	200006d4 	.word	0x200006d4

08000f94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <MX_TIM3_Init+0x94>)
 8000fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800102c <MX_TIM3_Init+0x98>)
 8000fb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <MX_TIM3_Init+0x94>)
 8000fba:	220f      	movs	r2, #15
 8000fbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <MX_TIM3_Init+0x94>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <MX_TIM3_Init+0x94>)
 8000fc6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <MX_TIM3_Init+0x94>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <MX_TIM3_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fd8:	4813      	ldr	r0, [pc, #76]	@ (8001028 <MX_TIM3_Init+0x94>)
 8000fda:	f004 fd81 	bl	8005ae0 <HAL_TIM_Base_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000fe4:	f000 f964 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <MX_TIM3_Init+0x94>)
 8000ff6:	f004 ff85 	bl	8005f04 <HAL_TIM_ConfigClockSource>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001000:	f000 f956 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_TIM3_Init+0x94>)
 8001012:	f005 f9db 	bl	80063cc <HAL_TIMEx_MasterConfigSynchronization>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800101c:	f000 f948 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000274 	.word	0x20000274
 800102c:	40000400 	.word	0x40000400

08001030 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_DMA_Init+0x60>)
 8001038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800103a:	4a15      	ldr	r2, [pc, #84]	@ (8001090 <MX_DMA_Init+0x60>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6493      	str	r3, [r2, #72]	@ 0x48
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_DMA_Init+0x60>)
 8001044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800104e:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <MX_DMA_Init+0x60>)
 8001050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001052:	4a0f      	ldr	r2, [pc, #60]	@ (8001090 <MX_DMA_Init+0x60>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6493      	str	r3, [r2, #72]	@ 0x48
 800105a:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <MX_DMA_Init+0x60>)
 800105c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	200b      	movs	r0, #11
 800106c:	f002 f895 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001070:	200b      	movs	r0, #11
 8001072:	f002 f8ac 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	200c      	movs	r0, #12
 800107c:	f002 f88d 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001080:	200c      	movs	r0, #12
 8001082:	f002 f8a4 	bl	80031ce <HAL_NVIC_EnableIRQ>

}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010b0:	f043 0320 	orr.w	r3, r3, #32
 80010b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	f003 0320 	and.w	r3, r3, #32
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	4a27      	ldr	r2, [pc, #156]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ce:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a21      	ldr	r2, [pc, #132]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <MX_GPIO_Init+0xd0>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <MX_GPIO_Init+0xd0>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001110:	4815      	ldr	r0, [pc, #84]	@ (8001168 <MX_GPIO_Init+0xd4>)
 8001112:	f003 fd19 	bl	8004b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2140      	movs	r1, #64	@ 0x40
 800111a:	4814      	ldr	r0, [pc, #80]	@ (800116c <MX_GPIO_Init+0xd8>)
 800111c:	f003 fd14 	bl	8004b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001120:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001126:	2301      	movs	r3, #1
 8001128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	480b      	ldr	r0, [pc, #44]	@ (8001168 <MX_GPIO_Init+0xd4>)
 800113a:	f003 fb83 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800113e:	2340      	movs	r3, #64	@ 0x40
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_GPIO_Init+0xd8>)
 8001156:	f003 fb75 	bl	8004844 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	@ 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	48000400 	.word	0x48000400
 800116c:	48000800 	.word	0x48000800

08001170 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    // Use a static flag to ensure both ADCs have finished a conversion cycle.
    // Bit 0 for ADC1, Bit 1 for ADC2.
    static uint8_t adc_done = 0;

    if (hadc->Instance == ADC1) {
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001180:	d11f      	bne.n	80011c2 <HAL_ADC_ConvCpltCallback+0x52>
        // Store ADC1 conversion results into sensors[0..5]
        for (int j = 0; j < hadc->Init.NbrOfConversion; j++) {
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e00f      	b.n	80011a8 <HAL_ADC_ConvCpltCallback+0x38>
            all_raw_data[j][AVE_POS] = ADC1Data[j];
 8001188:	4b42      	ldr	r3, [pc, #264]	@ (8001294 <HAL_ADC_ConvCpltCallback+0x124>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	4a42      	ldr	r2, [pc, #264]	@ (8001298 <HAL_ADC_ConvCpltCallback+0x128>)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001196:	4a41      	ldr	r2, [pc, #260]	@ (800129c <HAL_ADC_ConvCpltCallback+0x12c>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	015b      	lsls	r3, r3, #5
 800119c:	4403      	add	r3, r0
 800119e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 0; j < hadc->Init.NbrOfConversion; j++) {
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3301      	adds	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1a      	ldr	r2, [r3, #32]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d8ea      	bhi.n	8001188 <HAL_ADC_ConvCpltCallback+0x18>
        }
        adc_done |= 0x01; // Mark ADC1 as done for this cycle.
 80011b2:	4b3b      	ldr	r3, [pc, #236]	@ (80012a0 <HAL_ADC_ConvCpltCallback+0x130>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b38      	ldr	r3, [pc, #224]	@ (80012a0 <HAL_ADC_ConvCpltCallback+0x130>)
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e024      	b.n	800120c <HAL_ADC_ConvCpltCallback+0x9c>
    }
    else if (hadc->Instance == ADC2) {
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a37      	ldr	r2, [pc, #220]	@ (80012a4 <HAL_ADC_ConvCpltCallback+0x134>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d11f      	bne.n	800120c <HAL_ADC_ConvCpltCallback+0x9c>
        // Store ADC2 conversion results into sensors[6..11]
        for (int j = 0; j < hadc->Init.NbrOfConversion; j++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	e010      	b.n	80011f4 <HAL_ADC_ConvCpltCallback+0x84>
            all_raw_data[j + 6][AVE_POS] = ADC2Data[j];
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	3306      	adds	r3, #6
 80011d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001294 <HAL_ADC_ConvCpltCallback+0x124>)
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	4610      	mov	r0, r2
 80011dc:	4932      	ldr	r1, [pc, #200]	@ (80012a8 <HAL_ADC_ConvCpltCallback+0x138>)
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80011e4:	4a2d      	ldr	r2, [pc, #180]	@ (800129c <HAL_ADC_ConvCpltCallback+0x12c>)
 80011e6:	015b      	lsls	r3, r3, #5
 80011e8:	4403      	add	r3, r0
 80011ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 0; j < hadc->Init.NbrOfConversion; j++) {
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1a      	ldr	r2, [r3, #32]
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d8e9      	bhi.n	80011d2 <HAL_ADC_ConvCpltCallback+0x62>
        }
        adc_done |= 0x02; // Mark ADC2 as done for this cycle.
 80011fe:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <HAL_ADC_ConvCpltCallback+0x130>)
 800120a:	701a      	strb	r2, [r3, #0]
    }

    // Once both ADC1 and ADC2 have provided data:
    if (adc_done == 0x03) {
 800120c:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <HAL_ADC_ConvCpltCallback+0x130>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d139      	bne.n	8001288 <HAL_ADC_ConvCpltCallback+0x118>
        adc_done = 0;  // Reset the flag for the next conversion cycle.
 8001214:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
        AVE_POS++;     // Advance the sample index.
 800121a:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <HAL_ADC_ConvCpltCallback+0x124>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <HAL_ADC_ConvCpltCallback+0x124>)
 8001224:	701a      	strb	r2, [r3, #0]

        // When we have collected enough samples for a rolling average...
        if (AVE_POS >= ROLLING_AVE) {
 8001226:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <HAL_ADC_ConvCpltCallback+0x124>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b1f      	cmp	r3, #31
 800122c:	d92c      	bls.n	8001288 <HAL_ADC_ConvCpltCallback+0x118>
            // For each sensor (total SENSOR_NUM = 12 sensors)
            for (int i = 0; i < SENSOR_NUM; i++) {
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	e023      	b.n	800127c <HAL_ADC_ConvCpltCallback+0x10c>
                uint32_t sum = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
                for (int z = 0; z < ROLLING_AVE; z++) {
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e00d      	b.n	800125a <HAL_ADC_ConvCpltCallback+0xea>
                    sum += all_raw_data[i][z];
 800123e:	4917      	ldr	r1, [pc, #92]	@ (800129c <HAL_ADC_ConvCpltCallback+0x12c>)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	015a      	lsls	r2, r3, #5
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800124c:	461a      	mov	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4413      	add	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
                for (int z = 0; z < ROLLING_AVE; z++) {
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b1f      	cmp	r3, #31
 800125e:	ddee      	ble.n	800123e <HAL_ADC_ConvCpltCallback+0xce>
                }
                // Store the average in the sensor structure.
                sensors[i].averages = sum / ROLLING_AVE;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	0959      	lsrs	r1, r3, #5
 8001264:	4811      	ldr	r0, [pc, #68]	@ (80012ac <HAL_ADC_ConvCpltCallback+0x13c>)
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4403      	add	r3, r0
 8001272:	3308      	adds	r3, #8
 8001274:	6019      	str	r1, [r3, #0]
            for (int i = 0; i < SENSOR_NUM; i++) {
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2b0b      	cmp	r3, #11
 8001280:	ddd8      	ble.n	8001234 <HAL_ADC_ConvCpltCallback+0xc4>
            }
            AVE_POS = 0;  // Reset the sample index for the next averaging period.
 8001282:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <HAL_ADC_ConvCpltCallback+0x124>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001288:	bf00      	nop
 800128a:	3724      	adds	r7, #36	@ 0x24
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	200006c8 	.word	0x200006c8
 8001298:	200003b0 	.word	0x200003b0
 800129c:	200003c8 	.word	0x200003c8
 80012a0:	20000720 	.word	0x20000720
 80012a4:	50000100 	.word	0x50000100
 80012a8:	200003bc 	.word	0x200003bc
 80012ac:	200002c0 	.word	0x200002c0

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <Error_Handler+0x8>

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <HAL_MspInit+0x44>)
 80012c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001300 <HAL_MspInit+0x44>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <HAL_MspInit+0x44>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_MspInit+0x44>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012de:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <HAL_MspInit+0x44>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_MspInit+0x44>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012f2:	f003 fcff 	bl	8004cf4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000

08001304 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b09e      	sub	sp, #120	@ 0x78
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800131c:	f107 0320 	add.w	r3, r7, #32
 8001320:	2244      	movs	r2, #68	@ 0x44
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f005 f919 	bl	800655c <memset>
  if(hadc->Instance==ADC1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001332:	f040 8082 	bne.w	800143a <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800133a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800133c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001340:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	4618      	mov	r0, r3
 8001348:	f004 f9da 	bl	8005700 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001352:	f7ff ffad 	bl	80012b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001356:	4b7e      	ldr	r3, [pc, #504]	@ (8001550 <HAL_ADC_MspInit+0x24c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	4a7c      	ldr	r2, [pc, #496]	@ (8001550 <HAL_ADC_MspInit+0x24c>)
 800135e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001360:	4b7b      	ldr	r3, [pc, #492]	@ (8001550 <HAL_ADC_MspInit+0x24c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d10b      	bne.n	8001380 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001368:	4b7a      	ldr	r3, [pc, #488]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136c:	4a79      	ldr	r2, [pc, #484]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 800136e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001372:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001374:	4b77      	ldr	r3, [pc, #476]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b74      	ldr	r3, [pc, #464]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001384:	4a73      	ldr	r2, [pc, #460]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138c:	4b71      	ldr	r3, [pc, #452]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	4b6e      	ldr	r3, [pc, #440]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	4a6d      	ldr	r2, [pc, #436]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 800139e:	f043 0302 	orr.w	r3, r3, #2
 80013a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	697b      	ldr	r3, [r7, #20]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_in0_Pin|ADC2_in1_Pin|ADC1_in2_Pin|ADC1_in3_Pin;
 80013b0:	230f      	movs	r3, #15
 80013b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b4:	2303      	movs	r3, #3
 80013b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013c0:	4619      	mov	r1, r3
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c6:	f003 fa3d 	bl	8004844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_in14_Pin|ADC1_in13_Pin;
 80013ca:	2303      	movs	r3, #3
 80013cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ce:	2303      	movs	r3, #3
 80013d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013da:	4619      	mov	r1, r3
 80013dc:	485e      	ldr	r0, [pc, #376]	@ (8001558 <HAL_ADC_MspInit+0x254>)
 80013de:	f003 fa31 	bl	8004844 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013e2:	4b5e      	ldr	r3, [pc, #376]	@ (800155c <HAL_ADC_MspInit+0x258>)
 80013e4:	4a5e      	ldr	r2, [pc, #376]	@ (8001560 <HAL_ADC_MspInit+0x25c>)
 80013e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013e8:	4b5c      	ldr	r3, [pc, #368]	@ (800155c <HAL_ADC_MspInit+0x258>)
 80013ea:	2205      	movs	r2, #5
 80013ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ee:	4b5b      	ldr	r3, [pc, #364]	@ (800155c <HAL_ADC_MspInit+0x258>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f4:	4b59      	ldr	r3, [pc, #356]	@ (800155c <HAL_ADC_MspInit+0x258>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013fa:	4b58      	ldr	r3, [pc, #352]	@ (800155c <HAL_ADC_MspInit+0x258>)
 80013fc:	2280      	movs	r2, #128	@ 0x80
 80013fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001400:	4b56      	ldr	r3, [pc, #344]	@ (800155c <HAL_ADC_MspInit+0x258>)
 8001402:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001406:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001408:	4b54      	ldr	r3, [pc, #336]	@ (800155c <HAL_ADC_MspInit+0x258>)
 800140a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800140e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001410:	4b52      	ldr	r3, [pc, #328]	@ (800155c <HAL_ADC_MspInit+0x258>)
 8001412:	2220      	movs	r2, #32
 8001414:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001416:	4b51      	ldr	r3, [pc, #324]	@ (800155c <HAL_ADC_MspInit+0x258>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800141c:	484f      	ldr	r0, [pc, #316]	@ (800155c <HAL_ADC_MspInit+0x258>)
 800141e:	f001 fef1 	bl	8003204 <HAL_DMA_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8001428:	f7ff ff42 	bl	80012b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a4b      	ldr	r2, [pc, #300]	@ (800155c <HAL_ADC_MspInit+0x258>)
 8001430:	655a      	str	r2, [r3, #84]	@ 0x54
 8001432:	4a4a      	ldr	r2, [pc, #296]	@ (800155c <HAL_ADC_MspInit+0x258>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001438:	e086      	b.n	8001548 <HAL_ADC_MspInit+0x244>
  else if(hadc->Instance==ADC2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a49      	ldr	r2, [pc, #292]	@ (8001564 <HAL_ADC_MspInit+0x260>)
 8001440:	4293      	cmp	r3, r2
 8001442:	f040 8081 	bne.w	8001548 <HAL_ADC_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800144a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800144c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001450:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	4618      	mov	r0, r3
 8001458:	f004 f952 	bl	8005700 <HAL_RCCEx_PeriphCLKConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_ADC_MspInit+0x162>
      Error_Handler();
 8001462:	f7ff ff25 	bl	80012b0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001466:	4b3a      	ldr	r3, [pc, #232]	@ (8001550 <HAL_ADC_MspInit+0x24c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a38      	ldr	r2, [pc, #224]	@ (8001550 <HAL_ADC_MspInit+0x24c>)
 800146e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001470:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <HAL_ADC_MspInit+0x24c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d10b      	bne.n	8001490 <HAL_ADC_MspInit+0x18c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001478:	4b36      	ldr	r3, [pc, #216]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147c:	4a35      	ldr	r2, [pc, #212]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 800147e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001482:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001484:	4b33      	ldr	r3, [pc, #204]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b30      	ldr	r3, [pc, #192]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001494:	4a2f      	ldr	r2, [pc, #188]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149c:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ac:	4a29      	ldr	r2, [pc, #164]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b4:	4b27      	ldr	r3, [pc, #156]	@ (8001554 <HAL_ADC_MspInit+0x250>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC1_in0_Pin|ADC2_in1_Pin|ADC2_in4_Pin|ADC2_in5_Pin
 80014c0:	23f3      	movs	r3, #243	@ 0xf3
 80014c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c4:	2303      	movs	r3, #3
 80014c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d6:	f003 f9b5 	bl	8004844 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_in8_Pin|ADC2_in15_Pin;
 80014da:	2330      	movs	r3, #48	@ 0x30
 80014dc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014de:	2303      	movs	r3, #3
 80014e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014ea:	4619      	mov	r1, r3
 80014ec:	481e      	ldr	r0, [pc, #120]	@ (8001568 <HAL_ADC_MspInit+0x264>)
 80014ee:	f003 f9a9 	bl	8004844 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <HAL_ADC_MspInit+0x268>)
 80014f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001570 <HAL_ADC_MspInit+0x26c>)
 80014f6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <HAL_ADC_MspInit+0x268>)
 80014fa:	2224      	movs	r2, #36	@ 0x24
 80014fc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fe:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_ADC_MspInit+0x268>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001504:	4b19      	ldr	r3, [pc, #100]	@ (800156c <HAL_ADC_MspInit+0x268>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <HAL_ADC_MspInit+0x268>)
 800150c:	2280      	movs	r2, #128	@ 0x80
 800150e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001510:	4b16      	ldr	r3, [pc, #88]	@ (800156c <HAL_ADC_MspInit+0x268>)
 8001512:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001516:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <HAL_ADC_MspInit+0x268>)
 800151a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800151e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_ADC_MspInit+0x268>)
 8001522:	2220      	movs	r2, #32
 8001524:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <HAL_ADC_MspInit+0x268>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800152c:	480f      	ldr	r0, [pc, #60]	@ (800156c <HAL_ADC_MspInit+0x268>)
 800152e:	f001 fe69 	bl	8003204 <HAL_DMA_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_ADC_MspInit+0x238>
      Error_Handler();
 8001538:	f7ff feba 	bl	80012b0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a0b      	ldr	r2, [pc, #44]	@ (800156c <HAL_ADC_MspInit+0x268>)
 8001540:	655a      	str	r2, [r3, #84]	@ 0x54
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <HAL_ADC_MspInit+0x268>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001548:	bf00      	nop
 800154a:	3778      	adds	r7, #120	@ 0x78
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000724 	.word	0x20000724
 8001554:	40021000 	.word	0x40021000
 8001558:	48000400 	.word	0x48000400
 800155c:	20000150 	.word	0x20000150
 8001560:	40020008 	.word	0x40020008
 8001564:	50000100 	.word	0x50000100
 8001568:	48000800 	.word	0x48000800
 800156c:	200001b0 	.word	0x200001b0
 8001570:	4002001c 	.word	0x4002001c

08001574 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b09a      	sub	sp, #104	@ 0x68
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	2244      	movs	r2, #68	@ 0x44
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f004 ffe1 	bl	800655c <memset>
  if(hfdcan->Instance==FDCAN1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a24      	ldr	r2, [pc, #144]	@ (8001630 <HAL_FDCAN_MspInit+0xbc>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d141      	bne.n	8001628 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80015a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80015aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015ae:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 f8a3 	bl	8005700 <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80015c0:	f7ff fe76 	bl	80012b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <HAL_FDCAN_MspInit+0xc0>)
 80015c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001634 <HAL_FDCAN_MspInit+0xc0>)
 80015ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d0:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <HAL_FDCAN_MspInit+0xc0>)
 80015d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_FDCAN_MspInit+0xc0>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e0:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <HAL_FDCAN_MspInit+0xc0>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_FDCAN_MspInit+0xc0>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015f4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80015f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001606:	2309      	movs	r3, #9
 8001608:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001614:	f003 f916 	bl	8004844 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2015      	movs	r0, #21
 800161e:	f001 fdbc 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001622:	2015      	movs	r0, #21
 8001624:	f001 fdd3 	bl	80031ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001628:	bf00      	nop
 800162a:	3768      	adds	r7, #104	@ 0x68
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40006400 	.word	0x40006400
 8001634:	40021000 	.word	0x40021000

08001638 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0d      	ldr	r2, [pc, #52]	@ (800167c <HAL_TIM_Base_MspInit+0x44>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d113      	bne.n	8001672 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800164a:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <HAL_TIM_Base_MspInit+0x48>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164e:	4a0c      	ldr	r2, [pc, #48]	@ (8001680 <HAL_TIM_Base_MspInit+0x48>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6593      	str	r3, [r2, #88]	@ 0x58
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <HAL_TIM_Base_MspInit+0x48>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	201d      	movs	r0, #29
 8001668:	f001 fd97 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800166c:	201d      	movs	r0, #29
 800166e:	f001 fdae 	bl	80031ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40000400 	.word	0x40000400
 8001680:	40021000 	.word	0x40021000

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <NMI_Handler+0x4>

0800168c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <MemManage_Handler+0x4>

0800169c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <UsageFault_Handler+0x4>

080016ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016da:	f000 fa27 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016e8:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <DMA1_Channel1_IRQHandler+0x10>)
 80016ea:	f001 feae 	bl	800344a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000150 	.word	0x20000150

080016f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <DMA1_Channel2_IRQHandler+0x10>)
 80016fe:	f001 fea4 	bl	800344a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200001b0 	.word	0x200001b0

0800170c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <FDCAN1_IT0_IRQHandler+0x10>)
 8001712:	f002 fbaf 	bl	8003e74 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000210 	.word	0x20000210

08001720 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
		millis++;
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <TIM3_IRQHandler+0x28>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	4a07      	ldr	r2, [pc, #28]	@ (8001748 <TIM3_IRQHandler+0x28>)
 800172c:	6013      	str	r3, [r2, #0]
		if(millis == 1000){
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <TIM3_IRQHandler+0x28>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001736:	d102      	bne.n	800173e <TIM3_IRQHandler+0x1e>
			CAN_enable = 1;
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <TIM3_IRQHandler+0x2c>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800173e:	4804      	ldr	r0, [pc, #16]	@ (8001750 <TIM3_IRQHandler+0x30>)
 8001740:	f004 fa90 	bl	8005c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200006cc 	.word	0x200006cc
 800174c:	200006d0 	.word	0x200006d0
 8001750:	20000274 	.word	0x20000274

08001754 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <ValueControl>:
#include "transfer_functions.h"
#include "functions.h"
#include "main.h"
#include "config.h"

uint32_t ValueControl(uint32_t raw, uint32_t min_raw, uint32_t max_raw){
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]

	if(raw > max_raw)
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	d901      	bls.n	8001790 <ValueControl+0x18>
		return max_raw;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	e006      	b.n	800179e <ValueControl+0x26>

	if(raw < min_raw)
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	429a      	cmp	r2, r3
 8001796:	d201      	bcs.n	800179c <ValueControl+0x24>
			return min_raw;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	e000      	b.n	800179e <ValueControl+0x26>

	return raw;
 800179c:	68fb      	ldr	r3, [r7, #12]


}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <TF_3V3>:

uint16_t TF_3V3(uint8_t bytes, uint32_t raw, Sensor *sensor){
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	73fb      	strb	r3, [r7, #15]


	uint16_t max_volt = 3300;
 80017ba:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80017be:	82fb      	strh	r3, [r7, #22]

	uint16_t voltage = raw*max_volt / 4095;
 80017c0:	8afb      	ldrh	r3, [r7, #22]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	fb03 f202 	mul.w	r2, r3, r2
 80017c8:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <TF_3V3+0x3c>)
 80017ca:	fba3 1302 	umull	r1, r3, r3, r2
 80017ce:	1ad2      	subs	r2, r2, r3
 80017d0:	0852      	lsrs	r2, r2, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	0adb      	lsrs	r3, r3, #11
 80017d6:	82bb      	strh	r3, [r7, #20]
	return voltage;
 80017d8:	8abb      	ldrh	r3, [r7, #20]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	00100101 	.word	0x00100101

080017ec <TF_5V>:

uint16_t TF_5V(uint8_t bytes, uint32_t raw, Sensor *sensor){
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	73fb      	strb	r3, [r7, #15]
	uint16_t max_volt = 5000;
 80017fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017fe:	82fb      	strh	r3, [r7, #22]

	uint16_t voltage = raw*max_volt / 4095;
 8001800:	8afb      	ldrh	r3, [r7, #22]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	fb03 f202 	mul.w	r2, r3, r2
 8001808:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <TF_5V+0x3c>)
 800180a:	fba3 1302 	umull	r1, r3, r3, r2
 800180e:	1ad2      	subs	r2, r2, r3
 8001810:	0852      	lsrs	r2, r2, #1
 8001812:	4413      	add	r3, r2
 8001814:	0adb      	lsrs	r3, r3, #11
 8001816:	82bb      	strh	r3, [r7, #20]
	return voltage;
 8001818:	8abb      	ldrh	r3, [r7, #20]

}
 800181a:	4618      	mov	r0, r3
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	00100101 	.word	0x00100101

0800182c <TF_BPPS>:
	uint16_t voltage = raw*max_volt / 4095;
	return voltage;
}

uint16_t bpps_global;
uint16_t TF_BPPS(uint8_t bytes, uint32_t raw, Sensor *sensor){ //brake pedal position sensor
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	73fb      	strb	r3, [r7, #15]
	uint16_t max_pos = 100; //in percent
 800183a:	2364      	movs	r3, #100	@ 0x64
 800183c:	82bb      	strh	r3, [r7, #20]

	uint16_t min_raw = (sensor->calib_code % 2 == 1 && sensor->low_adc != 0) ? sensor->low_adc : 2615 ;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7b5b      	ldrb	r3, [r3, #13]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <TF_BPPS+0x2e>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	8a1b      	ldrh	r3, [r3, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <TF_BPPS+0x2e>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	8a1b      	ldrh	r3, [r3, #16]
 8001858:	e001      	b.n	800185e <TF_BPPS+0x32>
 800185a:	f640 2337 	movw	r3, #2615	@ 0xa37
 800185e:	827b      	strh	r3, [r7, #18]
	uint16_t max_raw = (sensor->calib_code > 2 && sensor->high_adc != 0) ? sensor->high_adc : 2925;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7b5b      	ldrb	r3, [r3, #13]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d906      	bls.n	8001876 <TF_BPPS+0x4a>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	8a5b      	ldrh	r3, [r3, #18]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <TF_BPPS+0x4a>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	8a5b      	ldrh	r3, [r3, #18]
 8001874:	e001      	b.n	800187a <TF_BPPS+0x4e>
 8001876:	f640 336d 	movw	r3, #2925	@ 0xb6d
 800187a:	823b      	strh	r3, [r7, #16]

	raw = ValueControl(raw, min_raw, max_raw);
 800187c:	8a7b      	ldrh	r3, [r7, #18]
 800187e:	8a3a      	ldrh	r2, [r7, #16]
 8001880:	4619      	mov	r1, r3
 8001882:	68b8      	ldr	r0, [r7, #8]
 8001884:	f7ff ff78 	bl	8001778 <ValueControl>
 8001888:	60b8      	str	r0, [r7, #8]

	uint16_t bpps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 800188a:	8a7b      	ldrh	r3, [r7, #18]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	8aba      	ldrh	r2, [r7, #20]
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	8a39      	ldrh	r1, [r7, #16]
 8001898:	8a7a      	ldrh	r2, [r7, #18]
 800189a:	1a8a      	subs	r2, r1, r2
 800189c:	fbb3 f3f2 	udiv	r3, r3, r2
 80018a0:	82fb      	strh	r3, [r7, #22]

	if(min_raw > max_raw){
 80018a2:	8a7a      	ldrh	r2, [r7, #18]
 80018a4:	8a3b      	ldrh	r3, [r7, #16]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d906      	bls.n	80018b8 <TF_BPPS+0x8c>

		bpps = 100 - bpps;
 80018aa:	8afb      	ldrh	r3, [r7, #22]
 80018ac:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80018b0:	82fb      	strh	r3, [r7, #22]
		bpps_global = bpps;
 80018b2:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <TF_BPPS+0x98>)
 80018b4:	8afb      	ldrh	r3, [r7, #22]
 80018b6:	8013      	strh	r3, [r2, #0]

	}
	return bpps;
 80018b8:	8afb      	ldrh	r3, [r7, #22]

}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000728 	.word	0x20000728

080018c8 <TF_APPS1>:
uint16_t TF_APPS1(uint8_t bytes, uint32_t raw, Sensor *sensor){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	73fb      	strb	r3, [r7, #15]
	uint16_t max_pos = 100; //in percent
 80018d6:	2364      	movs	r3, #100	@ 0x64
 80018d8:	82bb      	strh	r3, [r7, #20]

	uint16_t min_raw = (sensor->calib_code % 2 == 1 && sensor->low_adc != 0) ? sensor->low_adc : 650;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7b5b      	ldrb	r3, [r3, #13]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <TF_APPS1+0x2e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	8a1b      	ldrh	r3, [r3, #16]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <TF_APPS1+0x2e>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	8a1b      	ldrh	r3, [r3, #16]
 80018f4:	e001      	b.n	80018fa <TF_APPS1+0x32>
 80018f6:	f240 238a 	movw	r3, #650	@ 0x28a
 80018fa:	827b      	strh	r3, [r7, #18]
	uint16_t max_raw = (sensor->calib_code > 2 &&  sensor->high_adc != 0) ? sensor->high_adc : 1990 ;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7b5b      	ldrb	r3, [r3, #13]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d906      	bls.n	8001912 <TF_APPS1+0x4a>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	8a5b      	ldrh	r3, [r3, #18]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <TF_APPS1+0x4a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	8a5b      	ldrh	r3, [r3, #18]
 8001910:	e001      	b.n	8001916 <TF_APPS1+0x4e>
 8001912:	f240 73c6 	movw	r3, #1990	@ 0x7c6
 8001916:	823b      	strh	r3, [r7, #16]

	raw = ValueControl(raw, min_raw, max_raw);
 8001918:	8a7b      	ldrh	r3, [r7, #18]
 800191a:	8a3a      	ldrh	r2, [r7, #16]
 800191c:	4619      	mov	r1, r3
 800191e:	68b8      	ldr	r0, [r7, #8]
 8001920:	f7ff ff2a 	bl	8001778 <ValueControl>
 8001924:	60b8      	str	r0, [r7, #8]

	uint16_t apps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 8001926:	8a7b      	ldrh	r3, [r7, #18]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	8aba      	ldrh	r2, [r7, #20]
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	8a39      	ldrh	r1, [r7, #16]
 8001934:	8a7a      	ldrh	r2, [r7, #18]
 8001936:	1a8a      	subs	r2, r1, r2
 8001938:	fbb3 f3f2 	udiv	r3, r3, r2
 800193c:	82fb      	strh	r3, [r7, #22]

	if(min_raw > max_raw){
 800193e:	8a7a      	ldrh	r2, [r7, #18]
 8001940:	8a3b      	ldrh	r3, [r7, #16]
 8001942:	429a      	cmp	r2, r3
 8001944:	d903      	bls.n	800194e <TF_APPS1+0x86>

		apps = 100 - apps;
 8001946:	8afb      	ldrh	r3, [r7, #22]
 8001948:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800194c:	82fb      	strh	r3, [r7, #22]
	}
	return apps;
 800194e:	8afb      	ldrh	r3, [r7, #22]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <TF_APPS2>:

uint16_t TF_APPS2(uint8_t bytes, uint32_t raw, Sensor *sensor){
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	73fb      	strb	r3, [r7, #15]
	uint16_t max_pos = 100; //in percent
 8001966:	2364      	movs	r3, #100	@ 0x64
 8001968:	82bb      	strh	r3, [r7, #20]

	uint16_t min_raw = (sensor->calib_code % 2 == 1 && sensor->low_adc != 0) ? sensor->low_adc : 690 ;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7b5b      	ldrb	r3, [r3, #13]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <TF_APPS2+0x2e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	8a1b      	ldrh	r3, [r3, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <TF_APPS2+0x2e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	8a1b      	ldrh	r3, [r3, #16]
 8001984:	e001      	b.n	800198a <TF_APPS2+0x32>
 8001986:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800198a:	827b      	strh	r3, [r7, #18]
	uint16_t max_raw = (sensor->calib_code >= 2 && sensor->high_adc != 0) ? sensor->high_adc : 2830;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7b5b      	ldrb	r3, [r3, #13]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d906      	bls.n	80019a2 <TF_APPS2+0x4a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	8a5b      	ldrh	r3, [r3, #18]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <TF_APPS2+0x4a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	8a5b      	ldrh	r3, [r3, #18]
 80019a0:	e001      	b.n	80019a6 <TF_APPS2+0x4e>
 80019a2:	f640 330e 	movw	r3, #2830	@ 0xb0e
 80019a6:	823b      	strh	r3, [r7, #16]

	raw = ValueControl(raw, min_raw, max_raw);
 80019a8:	8a7b      	ldrh	r3, [r7, #18]
 80019aa:	8a3a      	ldrh	r2, [r7, #16]
 80019ac:	4619      	mov	r1, r3
 80019ae:	68b8      	ldr	r0, [r7, #8]
 80019b0:	f7ff fee2 	bl	8001778 <ValueControl>
 80019b4:	60b8      	str	r0, [r7, #8]

	uint16_t apps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 80019b6:	8a7b      	ldrh	r3, [r7, #18]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	8aba      	ldrh	r2, [r7, #20]
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	8a39      	ldrh	r1, [r7, #16]
 80019c4:	8a7a      	ldrh	r2, [r7, #18]
 80019c6:	1a8a      	subs	r2, r1, r2
 80019c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80019cc:	82fb      	strh	r3, [r7, #22]

	if(min_raw > max_raw){
 80019ce:	8a7a      	ldrh	r2, [r7, #18]
 80019d0:	8a3b      	ldrh	r3, [r7, #16]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d903      	bls.n	80019de <TF_APPS2+0x86>

		apps = 100 - apps;
 80019d6:	8afb      	ldrh	r3, [r7, #22]
 80019d8:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80019dc:	82fb      	strh	r3, [r7, #22]
	}
	return apps;
 80019de:	8afb      	ldrh	r3, [r7, #22]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <TF_BTN>:

uint16_t TF_BTN(uint8_t bytes, uint32_t raw, Sensor *sensor){
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	73fb      	strb	r3, [r7, #15]
		uint16_t max_volt = 5000;
 80019f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80019fa:	82fb      	strh	r3, [r7, #22]

		uint16_t voltage = raw*max_volt / 4095;
 80019fc:	8afb      	ldrh	r3, [r7, #22]
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	fb03 f202 	mul.w	r2, r3, r2
 8001a04:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <TF_BTN+0x48>)
 8001a06:	fba3 1302 	umull	r1, r3, r3, r2
 8001a0a:	1ad2      	subs	r2, r2, r3
 8001a0c:	0852      	lsrs	r2, r2, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	0adb      	lsrs	r3, r3, #11
 8001a12:	82bb      	strh	r3, [r7, #20]

		if(voltage < 2000)
 8001a14:	8abb      	ldrh	r3, [r7, #20]
 8001a16:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001a1a:	d201      	bcs.n	8001a20 <TF_BTN+0x38>
			return 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e000      	b.n	8001a22 <TF_BTN+0x3a>
		else
			return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	00100101 	.word	0x00100101

08001a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a34:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a36:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a38:	f7ff fe8c 	bl	8001754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a3c:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a3e:	490d      	ldr	r1, [pc, #52]	@ (8001a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a40:	4a0d      	ldr	r2, [pc, #52]	@ (8001a78 <LoopForever+0xe>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a44:	e002      	b.n	8001a4c <LoopCopyDataInit>

08001a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4a:	3304      	adds	r3, #4

08001a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a50:	d3f9      	bcc.n	8001a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a52:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a54:	4c0a      	ldr	r4, [pc, #40]	@ (8001a80 <LoopForever+0x16>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a58:	e001      	b.n	8001a5e <LoopFillZerobss>

08001a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a5c:	3204      	adds	r2, #4

08001a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a60:	d3fb      	bcc.n	8001a5a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001a62:	f004 fd83 	bl	800656c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a66:	f7fe ffe7 	bl	8000a38 <main>

08001a6a <LoopForever>:

LoopForever:
    b LoopForever
 8001a6a:	e7fe      	b.n	8001a6a <LoopForever>
  ldr   r0, =_estack
 8001a6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a74:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001a78:	080065f4 	.word	0x080065f4
  ldr r2, =_sbss
 8001a7c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001a80:	20000730 	.word	0x20000730

08001a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC1_2_IRQHandler>

08001a86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a90:	2003      	movs	r0, #3
 8001a92:	f001 fb77 	bl	8003184 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a96:	200f      	movs	r0, #15
 8001a98:	f000 f80e 	bl	8001ab8 <HAL_InitTick>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	71fb      	strb	r3, [r7, #7]
 8001aa6:	e001      	b.n	8001aac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aa8:	f7ff fc08 	bl	80012bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aac:	79fb      	ldrb	r3, [r7, #7]

}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ac4:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <HAL_InitTick+0x68>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d022      	beq.n	8001b12 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001acc:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <HAL_InitTick+0x6c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <HAL_InitTick+0x68>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 fb82 	bl	80031ea <HAL_SYSTICK_Config>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10f      	bne.n	8001b0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b0f      	cmp	r3, #15
 8001af0:	d809      	bhi.n	8001b06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af2:	2200      	movs	r2, #0
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	f04f 30ff 	mov.w	r0, #4294967295
 8001afa:	f001 fb4e 	bl	800319a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <HAL_InitTick+0x70>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e007      	b.n	8001b16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]
 8001b0a:	e004      	b.n	8001b16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e001      	b.n	8001b16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000000c 	.word	0x2000000c
 8001b24:	20000004 	.word	0x20000004
 8001b28:	20000008 	.word	0x20000008

08001b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_IncTick+0x1c>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_IncTick+0x20>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a03      	ldr	r2, [pc, #12]	@ (8001b48 <HAL_IncTick+0x1c>)
 8001b3c:	6013      	str	r3, [r2, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	2000072c 	.word	0x2000072c
 8001b4c:	2000000c 	.word	0x2000000c

08001b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	2000072c 	.word	0x2000072c

08001b68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	609a      	str	r2, [r3, #8]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3360      	adds	r3, #96	@ 0x60
 8001be2:	461a      	mov	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <LL_ADC_SetOffset+0x44>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c08:	bf00      	nop
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	03fff000 	.word	0x03fff000

08001c18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3360      	adds	r3, #96	@ 0x60
 8001c26:	461a      	mov	r2, r3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3360      	adds	r3, #96	@ 0x60
 8001c54:	461a      	mov	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c6e:	bf00      	nop
 8001c70:	371c      	adds	r7, #28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b087      	sub	sp, #28
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3360      	adds	r3, #96	@ 0x60
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3360      	adds	r3, #96	@ 0x60
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	615a      	str	r2, [r3, #20]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b087      	sub	sp, #28
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3330      	adds	r3, #48	@ 0x30
 8001d42:	461a      	mov	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	4413      	add	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	211f      	movs	r1, #31
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	401a      	ands	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	0e9b      	lsrs	r3, r3, #26
 8001d6a:	f003 011f 	and.w	r1, r3, #31
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d7e:	bf00      	nop
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b087      	sub	sp, #28
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3314      	adds	r3, #20
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	0e5b      	lsrs	r3, r3, #25
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	4413      	add	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	0d1b      	lsrs	r3, r3, #20
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2107      	movs	r1, #7
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	0d1b      	lsrs	r3, r3, #20
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dd4:	bf00      	nop
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0318 	and.w	r3, r3, #24
 8001e02:	4908      	ldr	r1, [pc, #32]	@ (8001e24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e04:	40d9      	lsrs	r1, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	400b      	ands	r3, r1
 8001e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	0007ffff 	.word	0x0007ffff

08001e28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 031f 	and.w	r3, r3, #31
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6093      	str	r3, [r2, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e7c:	d101      	bne.n	8001e82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ea0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ea4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ecc:	d101      	bne.n	8001ed2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ef0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <LL_ADC_IsEnabled+0x18>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <LL_ADC_IsEnabled+0x1a>
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f3e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f42:	f043 0204 	orr.w	r2, r3, #4
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d101      	bne.n	8001f6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d101      	bne.n	8001f94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b089      	sub	sp, #36	@ 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e167      	b.n	800228e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff f999 	bl	8001304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff3f 	bl	8001e68 <LL_ADC_IsDeepPowerDownEnabled>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff25 	bl	8001e44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff5a 	bl	8001eb8 <LL_ADC_IsInternalRegulatorEnabled>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d115      	bne.n	8002036 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff3e 	bl	8001e90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002014:	4ba0      	ldr	r3, [pc, #640]	@ (8002298 <HAL_ADC_Init+0x2f4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	099b      	lsrs	r3, r3, #6
 800201a:	4aa0      	ldr	r2, [pc, #640]	@ (800229c <HAL_ADC_Init+0x2f8>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	099b      	lsrs	r3, r3, #6
 8002022:	3301      	adds	r3, #1
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002028:	e002      	b.n	8002030 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3b01      	subs	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f9      	bne.n	800202a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff3c 	bl	8001eb8 <LL_ADC_IsInternalRegulatorEnabled>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204a:	f043 0210 	orr.w	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff75 	bl	8001f56 <LL_ADC_REG_IsConversionOngoing>
 800206c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	f040 8100 	bne.w	800227c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f040 80fc 	bne.w	800227c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800208c:	f043 0202 	orr.w	r2, r3, #2
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff35 	bl	8001f08 <LL_ADC_IsEnabled>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d111      	bne.n	80020c8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020a8:	f7ff ff2e 	bl	8001f08 <LL_ADC_IsEnabled>
 80020ac:	4604      	mov	r4, r0
 80020ae:	487c      	ldr	r0, [pc, #496]	@ (80022a0 <HAL_ADC_Init+0x2fc>)
 80020b0:	f7ff ff2a 	bl	8001f08 <LL_ADC_IsEnabled>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4323      	orrs	r3, r4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4619      	mov	r1, r3
 80020c2:	4878      	ldr	r0, [pc, #480]	@ (80022a4 <HAL_ADC_Init+0x300>)
 80020c4:	f7ff fd50 	bl	8001b68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7f5b      	ldrb	r3, [r3, #29]
 80020cc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020d2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020d8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020de:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020e6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d106      	bne.n	8002104 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fa:	3b01      	subs	r3, #1
 80020fc:	045b      	lsls	r3, r3, #17
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	4b60      	ldr	r3, [pc, #384]	@ (80022a8 <HAL_ADC_Init+0x304>)
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	430b      	orrs	r3, r1
 8002132:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff14 	bl	8001f7c <LL_ADC_INJ_IsConversionOngoing>
 8002154:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d16d      	bne.n	8002238 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d16a      	bne.n	8002238 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002166:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800216e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800217e:	f023 0302 	bic.w	r3, r3, #2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	69b9      	ldr	r1, [r7, #24]
 8002188:	430b      	orrs	r3, r1
 800218a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d017      	beq.n	80021c4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6911      	ldr	r1, [r2, #16]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	430b      	orrs	r3, r1
 80021be:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80021c2:	e013      	b.n	80021ec <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80021d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021e8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d118      	bne.n	8002228 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002200:	f023 0304 	bic.w	r3, r3, #4
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800220c:	4311      	orrs	r1, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002212:	4311      	orrs	r1, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002218:	430a      	orrs	r2, r1
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0201 	orr.w	r2, r2, #1
 8002224:	611a      	str	r2, [r3, #16]
 8002226:	e007      	b.n	8002238 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d10c      	bne.n	800225a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f023 010f 	bic.w	r1, r3, #15
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	1e5a      	subs	r2, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
 8002258:	e007      	b.n	800226a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 020f 	bic.w	r2, r2, #15
 8002268:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226e:	f023 0303 	bic.w	r3, r3, #3
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	65da      	str	r2, [r3, #92]	@ 0x5c
 800227a:	e007      	b.n	800228c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002280:	f043 0210 	orr.w	r2, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800228c:	7ffb      	ldrb	r3, [r7, #31]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	@ 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd90      	pop	{r4, r7, pc}
 8002296:	bf00      	nop
 8002298:	20000004 	.word	0x20000004
 800229c:	053e2d63 	.word	0x053e2d63
 80022a0:	50000100 	.word	0x50000100
 80022a4:	50000300 	.word	0x50000300
 80022a8:	fff04007 	.word	0xfff04007

080022ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022b8:	4851      	ldr	r0, [pc, #324]	@ (8002400 <HAL_ADC_Start_DMA+0x154>)
 80022ba:	f7ff fdb5 	bl	8001e28 <LL_ADC_GetMultimode>
 80022be:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fe46 	bl	8001f56 <LL_ADC_REG_IsConversionOngoing>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f040 808f 	bne.w	80023f0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_Start_DMA+0x34>
 80022dc:	2302      	movs	r3, #2
 80022de:	e08a      	b.n	80023f6 <HAL_ADC_Start_DMA+0x14a>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d002      	beq.n	80022fa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d173      	bne.n	80023e2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fc8e 	bl	8002c1c <ADC_Enable>
 8002300:	4603      	mov	r3, r0
 8002302:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002304:	7dfb      	ldrb	r3, [r7, #23]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d166      	bne.n	80023d8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a38      	ldr	r2, [pc, #224]	@ (8002404 <HAL_ADC_Start_DMA+0x158>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d002      	beq.n	800232e <HAL_ADC_Start_DMA+0x82>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	e001      	b.n	8002332 <HAL_ADC_Start_DMA+0x86>
 800232e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	4293      	cmp	r3, r2
 8002338:	d002      	beq.n	8002340 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002344:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002350:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235c:	f023 0206 	bic.w	r2, r3, #6
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	661a      	str	r2, [r3, #96]	@ 0x60
 8002364:	e002      	b.n	800236c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002370:	4a25      	ldr	r2, [pc, #148]	@ (8002408 <HAL_ADC_Start_DMA+0x15c>)
 8002372:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002378:	4a24      	ldr	r2, [pc, #144]	@ (800240c <HAL_ADC_Start_DMA+0x160>)
 800237a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002380:	4a23      	ldr	r2, [pc, #140]	@ (8002410 <HAL_ADC_Start_DMA+0x164>)
 8002382:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	221c      	movs	r2, #28
 800238a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0210 	orr.w	r2, r2, #16
 80023a2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3340      	adds	r3, #64	@ 0x40
 80023be:	4619      	mov	r1, r3
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f000 ffc6 	bl	8003354 <HAL_DMA_Start_IT>
 80023c8:	4603      	mov	r3, r0
 80023ca:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fdac 	bl	8001f2e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80023d6:	e00d      	b.n	80023f4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80023e0:	e008      	b.n	80023f4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80023ee:	e001      	b.n	80023f4 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023f0:	2302      	movs	r3, #2
 80023f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	50000300 	.word	0x50000300
 8002404:	50000100 	.word	0x50000100
 8002408:	08002d29 	.word	0x08002d29
 800240c:	08002e01 	.word	0x08002e01
 8002410:	08002e1d 	.word	0x08002e1d

08002414 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b0b6      	sub	sp, #216	@ 0xd8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x22>
 800245a:	2302      	movs	r3, #2
 800245c:	e3c8      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x7b4>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fd73 	bl	8001f56 <LL_ADC_REG_IsConversionOngoing>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 83ad 	bne.w	8002bd2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	f7ff fc54 	bl	8001d32 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fd61 	bl	8001f56 <LL_ADC_REG_IsConversionOngoing>
 8002494:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fd6d 	bl	8001f7c <LL_ADC_INJ_IsConversionOngoing>
 80024a2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 81d9 	bne.w	8002862 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 81d4 	bne.w	8002862 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024c2:	d10f      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2200      	movs	r2, #0
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7ff fc5b 	bl	8001d8a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fc02 	bl	8001ce6 <LL_ADC_SetSamplingTimeCommonConfig>
 80024e2:	e00e      	b.n	8002502 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	461a      	mov	r2, r3
 80024f2:	f7ff fc4a 	bl	8001d8a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fbf2 	bl	8001ce6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	08db      	lsrs	r3, r3, #3
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d022      	beq.n	800256a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6919      	ldr	r1, [r3, #16]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002534:	f7ff fb4c 	bl	8001bd0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6919      	ldr	r1, [r3, #16]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	461a      	mov	r2, r3
 8002546:	f7ff fb98 	bl	8001c7a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x124>
 800255a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800255e:	e000      	b.n	8002562 <HAL_ADC_ConfigChannel+0x126>
 8002560:	2300      	movs	r3, #0
 8002562:	461a      	mov	r2, r3
 8002564:	f7ff fba4 	bl	8001cb0 <LL_ADC_SetOffsetSaturation>
 8002568:	e17b      	b.n	8002862 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fb51 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002576:	4603      	mov	r3, r0
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x15a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fb46 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 800258c:	4603      	mov	r3, r0
 800258e:	0e9b      	lsrs	r3, r3, #26
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	e01e      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x198>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fb3b 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80025c4:	2320      	movs	r3, #32
 80025c6:	e004      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80025c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1b0>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	e018      	b.n	800261e <HAL_ADC_ConfigChannel+0x1e2>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002610:	2320      	movs	r3, #32
 8002612:	e004      	b.n	800261e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002614:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800261e:	429a      	cmp	r2, r3
 8002620:	d106      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fb0a 	bl	8001c44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2101      	movs	r1, #1
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff faee 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 800263c:	4603      	mov	r3, r0
 800263e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10a      	bne.n	800265c <HAL_ADC_ConfigChannel+0x220>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2101      	movs	r1, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fae3 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002652:	4603      	mov	r3, r0
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	f003 021f 	and.w	r2, r3, #31
 800265a:	e01e      	b.n	800269a <HAL_ADC_ConfigChannel+0x25e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2101      	movs	r1, #1
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fad8 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800267a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800267e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800268a:	2320      	movs	r3, #32
 800268c:	e004      	b.n	8002698 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800268e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x276>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0e9b      	lsrs	r3, r3, #26
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	e018      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x2a8>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80026c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80026ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80026d6:	2320      	movs	r3, #32
 80026d8:	e004      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80026da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2101      	movs	r1, #1
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff faa7 	bl	8001c44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2102      	movs	r1, #2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fa8b 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002702:	4603      	mov	r3, r0
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x2e6>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2102      	movs	r1, #2
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fa80 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	0e9b      	lsrs	r3, r3, #26
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	e01e      	b.n	8002760 <HAL_ADC_ConfigChannel+0x324>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2102      	movs	r1, #2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fa75 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002740:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002744:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002748:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e004      	b.n	800275e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002754:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x33c>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	e016      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x36a>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800278a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800278c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002790:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002798:	2320      	movs	r3, #32
 800279a:	e004      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800279c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	2102      	movs	r1, #2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fa46 	bl	8001c44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2103      	movs	r1, #3
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fa2a 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x3a8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2103      	movs	r1, #3
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fa1f 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	f003 021f 	and.w	r2, r3, #31
 80027e2:	e017      	b.n	8002814 <HAL_ADC_ConfigChannel+0x3d8>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2103      	movs	r1, #3
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fa14 	bl	8001c18 <LL_ADC_GetOffsetChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80027fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027fe:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002806:	2320      	movs	r3, #32
 8002808:	e003      	b.n	8002812 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800280a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <HAL_ADC_ConfigChannel+0x3f0>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	e011      	b.n	8002850 <HAL_ADC_ConfigChannel+0x414>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800283a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800283c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800283e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e003      	b.n	8002850 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002850:	429a      	cmp	r2, r3
 8002852:	d106      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2200      	movs	r2, #0
 800285a:	2103      	movs	r1, #3
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff f9f1 	bl	8001c44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fb4e 	bl	8001f08 <LL_ADC_IsEnabled>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 8140 	bne.w	8002af4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6819      	ldr	r1, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	461a      	mov	r2, r3
 8002882:	f7ff faad 	bl	8001de0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4a8f      	ldr	r2, [pc, #572]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x68c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	f040 8131 	bne.w	8002af4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10b      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x47e>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	3301      	adds	r3, #1
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2b09      	cmp	r3, #9
 80028b0:	bf94      	ite	ls
 80028b2:	2301      	movls	r3, #1
 80028b4:	2300      	movhi	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	e019      	b.n	80028ee <HAL_ADC_ConfigChannel+0x4b2>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80028c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ca:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80028cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80028d2:	2320      	movs	r3, #32
 80028d4:	e003      	b.n	80028de <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80028d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	3301      	adds	r3, #1
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	2b09      	cmp	r3, #9
 80028e6:	bf94      	ite	ls
 80028e8:	2301      	movls	r3, #1
 80028ea:	2300      	movhi	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d079      	beq.n	80029e6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d107      	bne.n	800290e <HAL_ADC_ConfigChannel+0x4d2>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0e9b      	lsrs	r3, r3, #26
 8002904:	3301      	adds	r3, #1
 8002906:	069b      	lsls	r3, r3, #26
 8002908:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800290c:	e015      	b.n	800293a <HAL_ADC_ConfigChannel+0x4fe>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800291c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800291e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002926:	2320      	movs	r3, #32
 8002928:	e003      	b.n	8002932 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800292a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	3301      	adds	r3, #1
 8002934:	069b      	lsls	r3, r3, #26
 8002936:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_ADC_ConfigChannel+0x51e>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	0e9b      	lsrs	r3, r3, #26
 800294c:	3301      	adds	r3, #1
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	e017      	b.n	800298a <HAL_ADC_ConfigChannel+0x54e>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800296a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800296c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e003      	b.n	800297e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	ea42 0103 	orr.w	r1, r2, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x574>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0e9b      	lsrs	r3, r3, #26
 80029a0:	3301      	adds	r3, #1
 80029a2:	f003 021f 	and.w	r2, r3, #31
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	051b      	lsls	r3, r3, #20
 80029ae:	e018      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x5a6>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80029be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80029c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e003      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80029cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f003 021f 	and.w	r2, r3, #31
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e2:	430b      	orrs	r3, r1
 80029e4:	e081      	b.n	8002aea <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d107      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x5c6>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	0e9b      	lsrs	r3, r3, #26
 80029f8:	3301      	adds	r3, #1
 80029fa:	069b      	lsls	r3, r3, #26
 80029fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a00:	e015      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x5f2>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a12:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	e003      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	3301      	adds	r3, #1
 8002a28:	069b      	lsls	r3, r3, #26
 8002a2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x612>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0e9b      	lsrs	r3, r3, #26
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	e017      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x642>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002a66:	2320      	movs	r3, #32
 8002a68:	e003      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2101      	movs	r1, #1
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	ea42 0103 	orr.w	r1, r2, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10d      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x66e>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0e9b      	lsrs	r3, r3, #26
 8002a94:	3301      	adds	r3, #1
 8002a96:	f003 021f 	and.w	r2, r3, #31
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3b1e      	subs	r3, #30
 8002aa2:	051b      	lsls	r3, r3, #20
 8002aa4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002aa8:	e01e      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x6ac>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	613b      	str	r3, [r7, #16]
  return result;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e006      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x698>
 8002ac6:	bf00      	nop
 8002ac8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f003 021f 	and.w	r2, r3, #31
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	3b1e      	subs	r3, #30
 8002ae2:	051b      	lsls	r3, r3, #20
 8002ae4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aee:	4619      	mov	r1, r3
 8002af0:	f7ff f94b 	bl	8001d8a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d071      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b00:	483e      	ldr	r0, [pc, #248]	@ (8002bfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b02:	f7ff f857 	bl	8001bb4 <LL_ADC_GetCommonPathInternalCh>
 8002b06:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8002c00 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x6e2>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a3a      	ldr	r2, [pc, #232]	@ (8002c04 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d127      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d121      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b32:	d157      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	482f      	ldr	r0, [pc, #188]	@ (8002bfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b40:	f7ff f825 	bl	8001b8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b44:	4b30      	ldr	r3, [pc, #192]	@ (8002c08 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	099b      	lsrs	r3, r3, #6
 8002b4a:	4a30      	ldr	r2, [pc, #192]	@ (8002c0c <HAL_ADC_ConfigChannel+0x7d0>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b5e:	e002      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f9      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b6c:	e03a      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a27      	ldr	r2, [pc, #156]	@ (8002c10 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d113      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10d      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a22      	ldr	r2, [pc, #136]	@ (8002c14 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02a      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b96:	4619      	mov	r1, r3
 8002b98:	4818      	ldr	r0, [pc, #96]	@ (8002bfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b9a:	f7fe fff8 	bl	8001b8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b9e:	e021      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d11c      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002baa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a16      	ldr	r2, [pc, #88]	@ (8002c14 <HAL_ADC_ConfigChannel+0x7d8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d011      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bc8:	4619      	mov	r1, r3
 8002bca:	480c      	ldr	r0, [pc, #48]	@ (8002bfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002bcc:	f7fe ffdf 	bl	8001b8e <LL_ADC_SetCommonPathInternalCh>
 8002bd0:	e008      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd6:	f043 0220 	orr.w	r2, r3, #32
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bec:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	37d8      	adds	r7, #216	@ 0xd8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	80080000 	.word	0x80080000
 8002bfc:	50000300 	.word	0x50000300
 8002c00:	c3210000 	.word	0xc3210000
 8002c04:	90c00010 	.word	0x90c00010
 8002c08:	20000004 	.word	0x20000004
 8002c0c:	053e2d63 	.word	0x053e2d63
 8002c10:	c7520000 	.word	0xc7520000
 8002c14:	50000100 	.word	0x50000100
 8002c18:	cb840000 	.word	0xcb840000

08002c1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f96b 	bl	8001f08 <LL_ADC_IsEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d169      	bne.n	8002d0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	4b36      	ldr	r3, [pc, #216]	@ (8002d18 <ADC_Enable+0xfc>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4a:	f043 0210 	orr.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e055      	b.n	8002d0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff f93a 	bl	8001ee0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c6c:	482b      	ldr	r0, [pc, #172]	@ (8002d1c <ADC_Enable+0x100>)
 8002c6e:	f7fe ffa1 	bl	8001bb4 <LL_ADC_GetCommonPathInternalCh>
 8002c72:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c7c:	4b28      	ldr	r3, [pc, #160]	@ (8002d20 <ADC_Enable+0x104>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	099b      	lsrs	r3, r3, #6
 8002c82:	4a28      	ldr	r2, [pc, #160]	@ (8002d24 <ADC_Enable+0x108>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c96:	e002      	b.n	8002c9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f9      	bne.n	8002c98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ca4:	f7fe ff54 	bl	8001b50 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002caa:	e028      	b.n	8002cfe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f929 	bl	8001f08 <LL_ADC_IsEnabled>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff f90d 	bl	8001ee0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cc6:	f7fe ff43 	bl	8001b50 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d914      	bls.n	8002cfe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d00d      	beq.n	8002cfe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce6:	f043 0210 	orr.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf2:	f043 0201 	orr.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e007      	b.n	8002d0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d1cf      	bne.n	8002cac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	8000003f 	.word	0x8000003f
 8002d1c:	50000300 	.word	0x50000300
 8002d20:	20000004 	.word	0x20000004
 8002d24:	053e2d63 	.word	0x053e2d63

08002d28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d14b      	bne.n	8002dda <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d021      	beq.n	8002da0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe ffd3 	bl	8001d0c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d032      	beq.n	8002dd2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d12b      	bne.n	8002dd2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d11f      	bne.n	8002dd2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d9e:	e018      	b.n	8002dd2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d111      	bne.n	8002dd2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d105      	bne.n	8002dd2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f7fe f9cc 	bl	8001170 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dd8:	e00e      	b.n	8002df8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff fb1e 	bl	8002428 <HAL_ADC_ErrorCallback>
}
 8002dec:	e004      	b.n	8002df8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff fb00 	bl	8002414 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e3a:	f043 0204 	orr.w	r2, r3, #4
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff faf0 	bl	8002428 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <LL_ADC_IsEnabled>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <LL_ADC_IsEnabled+0x18>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <LL_ADC_IsEnabled+0x1a>
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d101      	bne.n	8002e8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b0a1      	sub	sp, #132	@ 0x84
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e08b      	b.n	8002fd2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ed2:	d102      	bne.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ed4:	4b41      	ldr	r3, [pc, #260]	@ (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	e001      	b.n	8002ede <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e06a      	b.n	8002fd2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ffb9 	bl	8002e76 <LL_ADC_REG_IsConversionOngoing>
 8002f04:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ffb3 	bl	8002e76 <LL_ADC_REG_IsConversionOngoing>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d14c      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d149      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f1c:	4b30      	ldr	r3, [pc, #192]	@ (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002f1e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d028      	beq.n	8002f7a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f3a:	035b      	lsls	r3, r3, #13
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f44:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f48:	f7ff ff82 	bl	8002e50 <LL_ADC_IsEnabled>
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	4823      	ldr	r0, [pc, #140]	@ (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f50:	f7ff ff7e 	bl	8002e50 <LL_ADC_IsEnabled>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4323      	orrs	r3, r4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d133      	bne.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f64:	f023 030f 	bic.w	r3, r3, #15
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	6811      	ldr	r1, [r2, #0]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	6892      	ldr	r2, [r2, #8]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	431a      	orrs	r2, r3
 8002f74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f76:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f78:	e024      	b.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f86:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f8a:	f7ff ff61 	bl	8002e50 <LL_ADC_IsEnabled>
 8002f8e:	4604      	mov	r4, r0
 8002f90:	4812      	ldr	r0, [pc, #72]	@ (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f92:	f7ff ff5d 	bl	8002e50 <LL_ADC_IsEnabled>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4323      	orrs	r3, r4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d112      	bne.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fa6:	f023 030f 	bic.w	r3, r3, #15
 8002faa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002fac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fae:	e009      	b.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002fc2:	e000      	b.n	8002fc6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3784      	adds	r7, #132	@ 0x84
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	50000100 	.word	0x50000100
 8002fe0:	50000300 	.word	0x50000300

08002fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800300c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	@ (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003030:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <__NVIC_GetPriorityGrouping+0x18>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0307 	and.w	r3, r3, #7
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	db0b      	blt.n	8003072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	4907      	ldr	r1, [pc, #28]	@ (8003080 <__NVIC_EnableIRQ+0x38>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2001      	movs	r0, #1
 800306a:	fa00 f202 	lsl.w	r2, r0, r2
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000e100 	.word	0xe000e100

08003084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	6039      	str	r1, [r7, #0]
 800308e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db0a      	blt.n	80030ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	490c      	ldr	r1, [pc, #48]	@ (80030d0 <__NVIC_SetPriority+0x4c>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	440b      	add	r3, r1
 80030a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ac:	e00a      	b.n	80030c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4908      	ldr	r1, [pc, #32]	@ (80030d4 <__NVIC_SetPriority+0x50>)
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3b04      	subs	r3, #4
 80030bc:	0112      	lsls	r2, r2, #4
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	440b      	add	r3, r1
 80030c2:	761a      	strb	r2, [r3, #24]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000e100 	.word	0xe000e100
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	@ 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f1c3 0307 	rsb	r3, r3, #7
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	bf28      	it	cs
 80030f6:	2304      	movcs	r3, #4
 80030f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d902      	bls.n	8003108 <NVIC_EncodePriority+0x30>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3b03      	subs	r3, #3
 8003106:	e000      	b.n	800310a <NVIC_EncodePriority+0x32>
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	401a      	ands	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003120:	f04f 31ff 	mov.w	r1, #4294967295
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	43d9      	mvns	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003130:	4313      	orrs	r3, r2
         );
}
 8003132:	4618      	mov	r0, r3
 8003134:	3724      	adds	r7, #36	@ 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003150:	d301      	bcc.n	8003156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003152:	2301      	movs	r3, #1
 8003154:	e00f      	b.n	8003176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003156:	4a0a      	ldr	r2, [pc, #40]	@ (8003180 <SysTick_Config+0x40>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315e:	210f      	movs	r1, #15
 8003160:	f04f 30ff 	mov.w	r0, #4294967295
 8003164:	f7ff ff8e 	bl	8003084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <SysTick_Config+0x40>)
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316e:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <SysTick_Config+0x40>)
 8003170:	2207      	movs	r2, #7
 8003172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	e000e010 	.word	0xe000e010

08003184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff ff29 	bl	8002fe4 <__NVIC_SetPriorityGrouping>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	4603      	mov	r3, r0
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031a8:	f7ff ff40 	bl	800302c <__NVIC_GetPriorityGrouping>
 80031ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f7ff ff90 	bl	80030d8 <NVIC_EncodePriority>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff5f 	bl	8003084 <__NVIC_SetPriority>
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff33 	bl	8003048 <__NVIC_EnableIRQ>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffa4 	bl	8003140 <SysTick_Config>
 80031f8:	4603      	mov	r3, r0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e08d      	b.n	8003332 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	4b47      	ldr	r3, [pc, #284]	@ (800333c <HAL_DMA_Init+0x138>)
 800321e:	429a      	cmp	r2, r3
 8003220:	d80f      	bhi.n	8003242 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	4b45      	ldr	r3, [pc, #276]	@ (8003340 <HAL_DMA_Init+0x13c>)
 800322a:	4413      	add	r3, r2
 800322c:	4a45      	ldr	r2, [pc, #276]	@ (8003344 <HAL_DMA_Init+0x140>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	091b      	lsrs	r3, r3, #4
 8003234:	009a      	lsls	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a42      	ldr	r2, [pc, #264]	@ (8003348 <HAL_DMA_Init+0x144>)
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003240:	e00e      	b.n	8003260 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	4b40      	ldr	r3, [pc, #256]	@ (800334c <HAL_DMA_Init+0x148>)
 800324a:	4413      	add	r3, r2
 800324c:	4a3d      	ldr	r2, [pc, #244]	@ (8003344 <HAL_DMA_Init+0x140>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	009a      	lsls	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a3c      	ldr	r2, [pc, #240]	@ (8003350 <HAL_DMA_Init+0x14c>)
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f9b6 	bl	8003624 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032c0:	d102      	bne.n	80032c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d010      	beq.n	8003308 <HAL_DMA_Init+0x104>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d80c      	bhi.n	8003308 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f9d6 	bl	80036a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	e008      	b.n	800331a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40020407 	.word	0x40020407
 8003340:	bffdfff8 	.word	0xbffdfff8
 8003344:	cccccccd 	.word	0xcccccccd
 8003348:	40020000 	.word	0x40020000
 800334c:	bffdfbf8 	.word	0xbffdfbf8
 8003350:	40020400 	.word	0x40020400

08003354 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_DMA_Start_IT+0x20>
 8003370:	2302      	movs	r3, #2
 8003372:	e066      	b.n	8003442 <HAL_DMA_Start_IT+0xee>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d155      	bne.n	8003434 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f8fb 	bl	80035a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 020e 	orr.w	r2, r2, #14
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e00f      	b.n	80033ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0204 	bic.w	r2, r2, #4
 80033da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 020a 	orr.w	r2, r2, #10
 80033ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003408:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003420:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0201 	orr.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e005      	b.n	8003440 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800343c:	2302      	movs	r3, #2
 800343e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003440:	7dfb      	ldrb	r3, [r7, #23]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	2204      	movs	r2, #4
 800346c:	409a      	lsls	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d026      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x7a>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d021      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0204 	bic.w	r2, r2, #4
 800349c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	f003 021f 	and.w	r2, r3, #31
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	2104      	movs	r1, #4
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d071      	beq.n	800359e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80034c2:	e06c      	b.n	800359e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	2202      	movs	r2, #2
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d02e      	beq.n	8003536 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d029      	beq.n	8003536 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 020a 	bic.w	r2, r2, #10
 80034fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350c:	f003 021f 	and.w	r2, r3, #31
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003514:	2102      	movs	r1, #2
 8003516:	fa01 f202 	lsl.w	r2, r1, r2
 800351a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d038      	beq.n	800359e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003534:	e033      	b.n	800359e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	f003 031f 	and.w	r3, r3, #31
 800353e:	2208      	movs	r2, #8
 8003540:	409a      	lsls	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d02a      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d025      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 020e 	bic.w	r2, r2, #14
 8003562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	2101      	movs	r1, #1
 8003572:	fa01 f202 	lsl.w	r2, r1, r2
 8003576:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
}
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d004      	beq.n	80035d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	f003 021f 	and.w	r2, r3, #31
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d108      	bne.n	8003608 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003606:	e007      	b.n	8003618 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	60da      	str	r2, [r3, #12]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	4b16      	ldr	r3, [pc, #88]	@ (800368c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003634:	429a      	cmp	r2, r3
 8003636:	d802      	bhi.n	800363e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003638:	4b15      	ldr	r3, [pc, #84]	@ (8003690 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	e001      	b.n	8003642 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800363e:	4b15      	ldr	r3, [pc, #84]	@ (8003694 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003640:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3b08      	subs	r3, #8
 800364e:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365c:	089b      	lsrs	r3, r3, #2
 800365e:	009a      	lsls	r2, r3, #2
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4413      	add	r3, r2
 8003664:	461a      	mov	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a0b      	ldr	r2, [pc, #44]	@ (800369c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800366e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	2201      	movs	r2, #1
 8003678:	409a      	lsls	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40020407 	.word	0x40020407
 8003690:	40020800 	.word	0x40020800
 8003694:	40020820 	.word	0x40020820
 8003698:	cccccccd 	.word	0xcccccccd
 800369c:	40020880 	.word	0x40020880

080036a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	461a      	mov	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a08      	ldr	r2, [pc, #32]	@ (80036e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80036c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	2201      	movs	r2, #1
 80036ce:	409a      	lsls	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	1000823f 	.word	0x1000823f
 80036e4:	40020940 	.word	0x40020940

080036e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e147      	b.n	800398a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd ff30 	bl	8001574 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0210 	bic.w	r2, r2, #16
 8003722:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003724:	f7fe fa14 	bl	8001b50 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800372a:	e012      	b.n	8003752 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800372c:	f7fe fa10 	bl	8001b50 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b0a      	cmp	r3, #10
 8003738:	d90b      	bls.n	8003752 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2203      	movs	r2, #3
 800374a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e11b      	b.n	800398a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b08      	cmp	r3, #8
 800375e:	d0e5      	beq.n	800372c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003770:	f7fe f9ee 	bl	8001b50 <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003776:	e012      	b.n	800379e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003778:	f7fe f9ea 	bl	8001b50 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b0a      	cmp	r3, #10
 8003784:	d90b      	bls.n	800379e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378a:	f043 0201 	orr.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2203      	movs	r2, #3
 8003796:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e0f5      	b.n	800398a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0e5      	beq.n	8003778 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0202 	orr.w	r2, r2, #2
 80037ba:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a74      	ldr	r2, [pc, #464]	@ (8003994 <HAL_FDCAN_Init+0x2ac>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d103      	bne.n	80037ce <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80037c6:	4a74      	ldr	r2, [pc, #464]	@ (8003998 <HAL_FDCAN_Init+0x2b0>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	7c1b      	ldrb	r3, [r3, #16]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d108      	bne.n	80037e8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699a      	ldr	r2, [r3, #24]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037e4:	619a      	str	r2, [r3, #24]
 80037e6:	e007      	b.n	80037f8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	7c5b      	ldrb	r3, [r3, #17]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d108      	bne.n	8003812 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800380e:	619a      	str	r2, [r3, #24]
 8003810:	e007      	b.n	8003822 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003820:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	7c9b      	ldrb	r3, [r3, #18]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d108      	bne.n	800383c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003838:	619a      	str	r2, [r3, #24]
 800383a:	e007      	b.n	800384c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800384a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003870:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0210 	bic.w	r2, r2, #16
 8003880:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d108      	bne.n	800389c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0204 	orr.w	r2, r2, #4
 8003898:	619a      	str	r2, [r3, #24]
 800389a:	e02c      	b.n	80038f6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d028      	beq.n	80038f6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d01c      	beq.n	80038e6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038ba:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0210 	orr.w	r2, r2, #16
 80038ca:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d110      	bne.n	80038f6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0220 	orr.w	r2, r2, #32
 80038e2:	619a      	str	r2, [r3, #24]
 80038e4:	e007      	b.n	80038f6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0220 	orr.w	r2, r2, #32
 80038f4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	3b01      	subs	r3, #1
 8003904:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003906:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800390e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	3b01      	subs	r3, #1
 8003918:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800391e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003920:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800392a:	d115      	bne.n	8003958 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003930:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003936:	3b01      	subs	r3, #1
 8003938:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800393a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	3b01      	subs	r3, #1
 8003942:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003944:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	3b01      	subs	r3, #1
 800394e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003954:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003956:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fc1c 	bl	80041ac <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40006400 	.word	0x40006400
 8003998:	40006500 	.word	0x40006500

0800399c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d110      	bne.n	80039d2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e006      	b.n	80039e0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d6:	f043 0204 	orr.w	r2, r3, #4
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
  }
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d12c      	bne.n	8003a5e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e023      	b.n	8003a6c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fc0c 	bl	8004258 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2101      	movs	r1, #1
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003a50:	2201      	movs	r2, #1
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	409a      	lsls	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e006      	b.n	8003a6c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a62:	f043 0208 	orr.w	r2, r3, #8
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b08b      	sub	sp, #44	@ 0x2c
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a8c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003a8e:	7efb      	ldrb	r3, [r7, #27]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	f040 80e8 	bne.w	8003c66 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b40      	cmp	r3, #64	@ 0x40
 8003a9a:	d137      	bne.n	8003b0c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d107      	bne.n	8003abc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0db      	b.n	8003c74 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003acc:	d10a      	bne.n	8003ae4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ad6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ade:	d101      	bne.n	8003ae4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	440b      	add	r3, r1
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b0a:	e036      	b.n	8003b7a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0a3      	b.n	8003c74 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b3c:	d10a      	bne.n	8003b54 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b4e:	d101      	bne.n	8003b54 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003b50:	2301      	movs	r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	4413      	add	r3, r2
 8003b66:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4413      	add	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	440b      	add	r3, r1
 8003b78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d107      	bne.n	8003b9e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	0c9b      	lsrs	r3, r3, #18
 8003b94:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e005      	b.n	8003baa <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	0c1b      	lsrs	r3, r3, #16
 8003bd8:	f003 020f 	and.w	r2, r3, #15
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0e1b      	lsrs	r3, r3, #24
 8003bfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	0fda      	lsrs	r2, r3, #31
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	3304      	adds	r3, #4
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	623b      	str	r3, [r7, #32]
 8003c1e:	e00a      	b.n	8003c36 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	441a      	add	r2, r3
 8003c26:	6839      	ldr	r1, [r7, #0]
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	440b      	add	r3, r1
 8003c2c:	7812      	ldrb	r2, [r2, #0]
 8003c2e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	3301      	adds	r3, #1
 8003c34:	623b      	str	r3, [r7, #32]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	4a11      	ldr	r2, [pc, #68]	@ (8003c80 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003c3c:	5cd3      	ldrb	r3, [r2, r3]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d3ec      	bcc.n	8003c20 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b40      	cmp	r3, #64	@ 0x40
 8003c4a:	d105      	bne.n	8003c58 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003c56:	e004      	b.n	8003c62 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e006      	b.n	8003c74 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6a:	f043 0208 	orr.w	r2, r3, #8
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
  }
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	372c      	adds	r7, #44	@ 0x2c
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	080065dc 	.word	0x080065dc

08003c84 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cba:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d003      	beq.n	8003cca <HAL_FDCAN_ActivateNotification+0x22>
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	f040 80c8 	bne.w	8003e5a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d03b      	beq.n	8003d5e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d031      	beq.n	8003d5e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d027      	beq.n	8003d5e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d004      	beq.n	8003d22 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01d      	beq.n	8003d5e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d004      	beq.n	8003d36 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d013      	beq.n	8003d5e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00c      	beq.n	8003d6e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d107      	bne.n	8003d6e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d13b      	bne.n	8003dfa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d131      	bne.n	8003dfa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d004      	beq.n	8003daa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d127      	bne.n	8003dfa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d004      	beq.n	8003dbe <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d11d      	bne.n	8003dfa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d113      	bne.n	8003dfa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00c      	beq.n	8003e0a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0202 	orr.w	r2, r2, #2
 8003e08:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d009      	beq.n	8003e28 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e006      	b.n	8003e68 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5e:	f043 0202 	orr.w	r2, r3, #2
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
  }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08c      	sub	sp, #48	@ 0x30
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e82:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e90:	4013      	ands	r3, r2
 8003e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eca:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003ece:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed6:	6a3a      	ldr	r2, [r7, #32]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003ee6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efa:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f02:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	099b      	lsrs	r3, r3, #6
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00c      	beq.n	8003f2a <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	099b      	lsrs	r3, r3, #6
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d006      	beq.n	8003f2a <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2240      	movs	r2, #64	@ 0x40
 8003f22:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f922 	bl	800416e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01a      	beq.n	8003f6c <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	0a1b      	lsrs	r3, r3, #8
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d014      	beq.n	8003f6c <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f4a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f62:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003f64:	6939      	ldr	r1, [r7, #16]
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8e2 	bl	8004130 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f78:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f8ac 	bl	80040da <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f8e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003f90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fc fbb4 	bl	8000700 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003fa6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8a1 	bl	80040f0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	0a5b      	lsrs	r3, r3, #9
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	0a5b      	lsrs	r3, r3, #9
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f898 	bl	8004106 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	09db      	lsrs	r3, r3, #7
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d019      	beq.n	8004016 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	09db      	lsrs	r3, r3, #7
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d013      	beq.n	8004016 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003ff6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4013      	ands	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2280      	movs	r2, #128	@ 0x80
 800400c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f882 	bl	800411a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	0b5b      	lsrs	r3, r3, #13
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	0b5b      	lsrs	r3, r3, #13
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004036:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f884 	bl	8004146 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	0bdb      	lsrs	r3, r3, #15
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	0bdb      	lsrs	r3, r3, #15
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800405e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f87a 	bl	800415a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	0b9b      	lsrs	r3, r3, #14
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d010      	beq.n	8004094 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	0b9b      	lsrs	r3, r3, #14
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004086:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80040a2:	69f9      	ldr	r1, [r7, #28]
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f876 	bl	8004196 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6a3a      	ldr	r2, [r7, #32]
 80040b6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f858 	bl	8004182 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80040d2:	bf00      	nop
 80040d4:	3730      	adds	r7, #48	@ 0x30
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80041b4:	4b27      	ldr	r3, [pc, #156]	@ (8004254 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80041b6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041c6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ce:	041a      	lsls	r2, r3, #16
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ec:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f4:	061a      	lsls	r2, r3, #24
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	e005      	b.n	800423a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3304      	adds	r3, #4
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	429a      	cmp	r2, r3
 8004244:	d3f3      	bcc.n	800422e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004246:	bf00      	nop
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	4000a400 	.word	0x4000a400

08004258 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004258:	b480      	push	{r7}
 800425a:	b089      	sub	sp, #36	@ 0x24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004276:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800427e:	4313      	orrs	r3, r2
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e00a      	b.n	800429a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800428c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004292:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004294:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004298:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80042a4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80042aa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80042b0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4413      	add	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	440b      	add	r3, r1
 80042cc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	3304      	adds	r3, #4
 80042d8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	3304      	adds	r3, #4
 80042e4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e020      	b.n	800432e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	3303      	adds	r3, #3
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	4413      	add	r3, r2
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	3302      	adds	r3, #2
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	440b      	add	r3, r1
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004304:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	3301      	adds	r3, #1
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	440b      	add	r3, r1
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004312:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	440a      	add	r2, r1
 800431a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800431c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	3304      	adds	r3, #4
 8004326:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3304      	adds	r3, #4
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	4a06      	ldr	r2, [pc, #24]	@ (800434c <FDCAN_CopyMessageToRAM+0xf4>)
 8004334:	5cd3      	ldrb	r3, [r2, r3]
 8004336:	461a      	mov	r2, r3
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	4293      	cmp	r3, r2
 800433c:	d3d6      	bcc.n	80042ec <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	3724      	adds	r7, #36	@ 0x24
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	080065dc 	.word	0x080065dc

08004350 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004362:	4b2f      	ldr	r3, [pc, #188]	@ (8004420 <HAL_FLASH_Program+0xd0>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_FLASH_Program+0x1e>
 800436a:	2302      	movs	r3, #2
 800436c:	e053      	b.n	8004416 <HAL_FLASH_Program+0xc6>
 800436e:	4b2c      	ldr	r3, [pc, #176]	@ (8004420 <HAL_FLASH_Program+0xd0>)
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004374:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004378:	f000 f892 	bl	80044a0 <FLASH_WaitForLastOperation>
 800437c:	4603      	mov	r3, r0
 800437e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004380:	7dfb      	ldrb	r3, [r7, #23]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d143      	bne.n	800440e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004386:	4b26      	ldr	r3, [pc, #152]	@ (8004420 <HAL_FLASH_Program+0xd0>)
 8004388:	2200      	movs	r2, #0
 800438a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800438c:	4b25      	ldr	r3, [pc, #148]	@ (8004424 <HAL_FLASH_Program+0xd4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004394:	2b00      	cmp	r3, #0
 8004396:	d009      	beq.n	80043ac <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004398:	4b22      	ldr	r3, [pc, #136]	@ (8004424 <HAL_FLASH_Program+0xd4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a21      	ldr	r2, [pc, #132]	@ (8004424 <HAL_FLASH_Program+0xd4>)
 800439e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043a2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80043a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004420 <HAL_FLASH_Program+0xd0>)
 80043a6:	2202      	movs	r2, #2
 80043a8:	771a      	strb	r2, [r3, #28]
 80043aa:	e002      	b.n	80043b2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80043ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004420 <HAL_FLASH_Program+0xd0>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d107      	bne.n	80043c8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80043b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043bc:	68b8      	ldr	r0, [r7, #8]
 80043be:	f000 f8c1 	bl	8004544 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80043c2:	2301      	movs	r3, #1
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	e010      	b.n	80043ea <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d002      	beq.n	80043d4 <HAL_FLASH_Program+0x84>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d10a      	bne.n	80043ea <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	4619      	mov	r1, r3
 80043d8:	68b8      	ldr	r0, [r7, #8]
 80043da:	f000 f8d9 	bl	8004590 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d102      	bne.n	80043ea <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80043e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80043e8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80043ee:	f000 f857 	bl	80044a0 <FLASH_WaitForLastOperation>
 80043f2:	4603      	mov	r3, r0
 80043f4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d006      	beq.n	800440a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80043fc:	4b09      	ldr	r3, [pc, #36]	@ (8004424 <HAL_FLASH_Program+0xd4>)
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	43db      	mvns	r3, r3
 8004404:	4907      	ldr	r1, [pc, #28]	@ (8004424 <HAL_FLASH_Program+0xd4>)
 8004406:	4013      	ands	r3, r2
 8004408:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800440a:	f000 f9d1 	bl	80047b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800440e:	4b04      	ldr	r3, [pc, #16]	@ (8004420 <HAL_FLASH_Program+0xd0>)
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004414:	7dfb      	ldrb	r3, [r7, #23]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000010 	.word	0x20000010
 8004424:	40022000 	.word	0x40022000

08004428 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004432:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <HAL_FLASH_Unlock+0x38>)
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	da0b      	bge.n	8004452 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800443a:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <HAL_FLASH_Unlock+0x38>)
 800443c:	4a09      	ldr	r2, [pc, #36]	@ (8004464 <HAL_FLASH_Unlock+0x3c>)
 800443e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004440:	4b07      	ldr	r3, [pc, #28]	@ (8004460 <HAL_FLASH_Unlock+0x38>)
 8004442:	4a09      	ldr	r2, [pc, #36]	@ (8004468 <HAL_FLASH_Unlock+0x40>)
 8004444:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004446:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <HAL_FLASH_Unlock+0x38>)
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	da01      	bge.n	8004452 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004452:	79fb      	ldrb	r3, [r7, #7]
}
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40022000 	.word	0x40022000
 8004464:	45670123 	.word	0x45670123
 8004468:	cdef89ab 	.word	0xcdef89ab

0800446c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004476:	4b09      	ldr	r3, [pc, #36]	@ (800449c <HAL_FLASH_Lock+0x30>)
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	4a08      	ldr	r2, [pc, #32]	@ (800449c <HAL_FLASH_Lock+0x30>)
 800447c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004480:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004482:	4b06      	ldr	r3, [pc, #24]	@ (800449c <HAL_FLASH_Lock+0x30>)
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	da01      	bge.n	800448e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800448e:	79fb      	ldrb	r3, [r7, #7]
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40022000 	.word	0x40022000

080044a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80044a8:	f7fd fb52 	bl	8001b50 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80044ae:	e009      	b.n	80044c4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80044b0:	f7fd fb4e 	bl	8001b50 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d201      	bcs.n	80044c4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e037      	b.n	8004534 <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80044c4:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <FLASH_WaitForLastOperation+0x9c>)
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d0:	d0ee      	beq.n	80044b0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80044d2:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <FLASH_WaitForLastOperation+0x9c>)
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80044da:	4013      	ands	r3, r2
 80044dc:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01d      	beq.n	8004520 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80044e4:	4b16      	ldr	r3, [pc, #88]	@ (8004540 <FLASH_WaitForLastOperation+0xa0>)
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	4a14      	ldr	r2, [pc, #80]	@ (8004540 <FLASH_WaitForLastOperation+0xa0>)
 80044ee:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f6:	d307      	bcc.n	8004508 <FLASH_WaitForLastOperation+0x68>
 80044f8:	4b10      	ldr	r3, [pc, #64]	@ (800453c <FLASH_WaitForLastOperation+0x9c>)
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004502:	490e      	ldr	r1, [pc, #56]	@ (800453c <FLASH_WaitForLastOperation+0x9c>)
 8004504:	4313      	orrs	r3, r2
 8004506:	618b      	str	r3, [r1, #24]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <FLASH_WaitForLastOperation+0x7c>
 8004512:	4a0a      	ldr	r2, [pc, #40]	@ (800453c <FLASH_WaitForLastOperation+0x9c>)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800451a:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e009      	b.n	8004534 <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004520:	4b06      	ldr	r3, [pc, #24]	@ (800453c <FLASH_WaitForLastOperation+0x9c>)
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b01      	cmp	r3, #1
 800452a:	d102      	bne.n	8004532 <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800452c:	4b03      	ldr	r3, [pc, #12]	@ (800453c <FLASH_WaitForLastOperation+0x9c>)
 800452e:	2201      	movs	r2, #1
 8004530:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40022000 	.word	0x40022000
 8004540:	20000010 	.word	0x20000010

08004544 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004550:	4b0e      	ldr	r3, [pc, #56]	@ (800458c <FLASH_Program_DoubleWord+0x48>)
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	4a0d      	ldr	r2, [pc, #52]	@ (800458c <FLASH_Program_DoubleWord+0x48>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004562:	f3bf 8f6f 	isb	sy
}
 8004566:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	000a      	movs	r2, r1
 8004576:	2300      	movs	r3, #0
 8004578:	68f9      	ldr	r1, [r7, #12]
 800457a:	3104      	adds	r1, #4
 800457c:	4613      	mov	r3, r2
 800457e:	600b      	str	r3, [r1, #0]
}
 8004580:	bf00      	nop
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	40022000 	.word	0x40022000

08004590 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8004590:	b480      	push	{r7}
 8004592:	b089      	sub	sp, #36	@ 0x24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800459a:	2340      	movs	r3, #64	@ 0x40
 800459c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80045a6:	4b14      	ldr	r3, [pc, #80]	@ (80045f8 <FLASH_Program_Fast+0x68>)
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	4a13      	ldr	r2, [pc, #76]	@ (80045f8 <FLASH_Program_Fast+0x68>)
 80045ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b2:	f3ef 8310 	mrs	r3, PRIMASK
 80045b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80045b8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80045ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80045bc:	b672      	cpsid	i
}
 80045be:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	3304      	adds	r3, #4
 80045cc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	3304      	adds	r3, #4
 80045d2:	617b      	str	r3, [r7, #20]
    row_index--;
 80045d4:	7ffb      	ldrb	r3, [r7, #31]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80045da:	7ffb      	ldrb	r3, [r7, #31]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ef      	bne.n	80045c0 <FLASH_Program_Fast+0x30>
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f383 8810 	msr	PRIMASK, r3
}
 80045ea:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80045ec:	bf00      	nop
 80045ee:	3724      	adds	r7, #36	@ 0x24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40022000 	.word	0x40022000

080045fc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004606:	4b47      	ldr	r3, [pc, #284]	@ (8004724 <HAL_FLASHEx_Erase+0x128>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_FLASHEx_Erase+0x16>
 800460e:	2302      	movs	r3, #2
 8004610:	e083      	b.n	800471a <HAL_FLASHEx_Erase+0x11e>
 8004612:	4b44      	ldr	r3, [pc, #272]	@ (8004724 <HAL_FLASHEx_Erase+0x128>)
 8004614:	2201      	movs	r2, #1
 8004616:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004618:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800461c:	f7ff ff40 	bl	80044a0 <FLASH_WaitForLastOperation>
 8004620:	4603      	mov	r3, r0
 8004622:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d173      	bne.n	8004712 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800462a:	4b3e      	ldr	r3, [pc, #248]	@ (8004724 <HAL_FLASHEx_Erase+0x128>)
 800462c:	2200      	movs	r2, #0
 800462e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004630:	4b3d      	ldr	r3, [pc, #244]	@ (8004728 <HAL_FLASHEx_Erase+0x12c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800463c:	4b3a      	ldr	r3, [pc, #232]	@ (8004728 <HAL_FLASHEx_Erase+0x12c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004648:	4b37      	ldr	r3, [pc, #220]	@ (8004728 <HAL_FLASHEx_Erase+0x12c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a36      	ldr	r2, [pc, #216]	@ (8004728 <HAL_FLASHEx_Erase+0x12c>)
 800464e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004652:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004654:	4b33      	ldr	r3, [pc, #204]	@ (8004724 <HAL_FLASHEx_Erase+0x128>)
 8004656:	2203      	movs	r2, #3
 8004658:	771a      	strb	r2, [r3, #28]
 800465a:	e016      	b.n	800468a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800465c:	4b31      	ldr	r3, [pc, #196]	@ (8004724 <HAL_FLASHEx_Erase+0x128>)
 800465e:	2201      	movs	r2, #1
 8004660:	771a      	strb	r2, [r3, #28]
 8004662:	e012      	b.n	800468a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004664:	4b30      	ldr	r3, [pc, #192]	@ (8004728 <HAL_FLASHEx_Erase+0x12c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004670:	4b2d      	ldr	r3, [pc, #180]	@ (8004728 <HAL_FLASHEx_Erase+0x12c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a2c      	ldr	r2, [pc, #176]	@ (8004728 <HAL_FLASHEx_Erase+0x12c>)
 8004676:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800467a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800467c:	4b29      	ldr	r3, [pc, #164]	@ (8004724 <HAL_FLASHEx_Erase+0x128>)
 800467e:	2202      	movs	r2, #2
 8004680:	771a      	strb	r2, [r3, #28]
 8004682:	e002      	b.n	800468a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004684:	4b27      	ldr	r3, [pc, #156]	@ (8004724 <HAL_FLASHEx_Erase+0x128>)
 8004686:	2200      	movs	r2, #0
 8004688:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d111      	bne.n	80046b6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f848 	bl	800472c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800469c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046a0:	f7ff fefe 	bl	80044a0 <FLASH_WaitForLastOperation>
 80046a4:	4603      	mov	r3, r0
 80046a6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80046a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004728 <HAL_FLASHEx_Erase+0x12c>)
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004728 <HAL_FLASHEx_Erase+0x12c>)
 80046ae:	f023 0304 	bic.w	r3, r3, #4
 80046b2:	6153      	str	r3, [r2, #20]
 80046b4:	e02b      	b.n	800470e <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	e01b      	b.n	80046fe <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4619      	mov	r1, r3
 80046cc:	68b8      	ldr	r0, [r7, #8]
 80046ce:	f000 f84b 	bl	8004768 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80046d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046d6:	f7ff fee3 	bl	80044a0 <FLASH_WaitForLastOperation>
 80046da:	4603      	mov	r3, r0
 80046dc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80046de:	4b12      	ldr	r3, [pc, #72]	@ (8004728 <HAL_FLASHEx_Erase+0x12c>)
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	4a11      	ldr	r2, [pc, #68]	@ (8004728 <HAL_FLASHEx_Erase+0x12c>)
 80046e4:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 80046e8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	601a      	str	r2, [r3, #0]
          break;
 80046f6:	e00a      	b.n	800470e <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	3301      	adds	r3, #1
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4413      	add	r3, r2
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3db      	bcc.n	80046c6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800470e:	f000 f84f 	bl	80047b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004712:	4b04      	ldr	r3, [pc, #16]	@ (8004724 <HAL_FLASHEx_Erase+0x128>)
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]

  return status;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000010 	.word	0x20000010
 8004728:	40022000 	.word	0x40022000

0800472c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800473e:	4b09      	ldr	r3, [pc, #36]	@ (8004764 <FLASH_MassErase+0x38>)
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4a08      	ldr	r2, [pc, #32]	@ (8004764 <FLASH_MassErase+0x38>)
 8004744:	f043 0304 	orr.w	r3, r3, #4
 8004748:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800474a:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <FLASH_MassErase+0x38>)
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4a05      	ldr	r2, [pc, #20]	@ (8004764 <FLASH_MassErase+0x38>)
 8004750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004754:	6153      	str	r3, [r2, #20]
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40022000 	.word	0x40022000

08004768 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004772:	4b0e      	ldr	r3, [pc, #56]	@ (80047ac <FLASH_PageErase+0x44>)
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f423 72fc 	bic.w	r2, r3, #504	@ 0x1f8
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8004782:	490a      	ldr	r1, [pc, #40]	@ (80047ac <FLASH_PageErase+0x44>)
 8004784:	4313      	orrs	r3, r2
 8004786:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004788:	4b08      	ldr	r3, [pc, #32]	@ (80047ac <FLASH_PageErase+0x44>)
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	4a07      	ldr	r2, [pc, #28]	@ (80047ac <FLASH_PageErase+0x44>)
 800478e:	f043 0302 	orr.w	r3, r3, #2
 8004792:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004794:	4b05      	ldr	r3, [pc, #20]	@ (80047ac <FLASH_PageErase+0x44>)
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	4a04      	ldr	r2, [pc, #16]	@ (80047ac <FLASH_PageErase+0x44>)
 800479a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800479e:	6153      	str	r3, [r2, #20]
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	40022000 	.word	0x40022000

080047b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80047b6:	4b21      	ldr	r3, [pc, #132]	@ (800483c <FLASH_FlushCaches+0x8c>)
 80047b8:	7f1b      	ldrb	r3, [r3, #28]
 80047ba:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d002      	beq.n	80047c8 <FLASH_FlushCaches+0x18>
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d117      	bne.n	80047f8 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80047c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004840 <FLASH_FlushCaches+0x90>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004840 <FLASH_FlushCaches+0x90>)
 80047ce:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047d2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80047d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004840 <FLASH_FlushCaches+0x90>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a19      	ldr	r2, [pc, #100]	@ (8004840 <FLASH_FlushCaches+0x90>)
 80047da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	4b17      	ldr	r3, [pc, #92]	@ (8004840 <FLASH_FlushCaches+0x90>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a16      	ldr	r2, [pc, #88]	@ (8004840 <FLASH_FlushCaches+0x90>)
 80047e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047ea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047ec:	4b14      	ldr	r3, [pc, #80]	@ (8004840 <FLASH_FlushCaches+0x90>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a13      	ldr	r2, [pc, #76]	@ (8004840 <FLASH_FlushCaches+0x90>)
 80047f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047f6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d002      	beq.n	8004804 <FLASH_FlushCaches+0x54>
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d111      	bne.n	8004828 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004804:	4b0e      	ldr	r3, [pc, #56]	@ (8004840 <FLASH_FlushCaches+0x90>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a0d      	ldr	r2, [pc, #52]	@ (8004840 <FLASH_FlushCaches+0x90>)
 800480a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <FLASH_FlushCaches+0x90>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a0a      	ldr	r2, [pc, #40]	@ (8004840 <FLASH_FlushCaches+0x90>)
 8004816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800481a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800481c:	4b08      	ldr	r3, [pc, #32]	@ (8004840 <FLASH_FlushCaches+0x90>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a07      	ldr	r2, [pc, #28]	@ (8004840 <FLASH_FlushCaches+0x90>)
 8004822:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004826:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004828:	4b04      	ldr	r3, [pc, #16]	@ (800483c <FLASH_FlushCaches+0x8c>)
 800482a:	2200      	movs	r2, #0
 800482c:	771a      	strb	r2, [r3, #28]
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000010 	.word	0x20000010
 8004840:	40022000 	.word	0x40022000

08004844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004852:	e15a      	b.n	8004b0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	2101      	movs	r1, #1
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	fa01 f303 	lsl.w	r3, r1, r3
 8004860:	4013      	ands	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 814c 	beq.w	8004b04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d005      	beq.n	8004884 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004880:	2b02      	cmp	r3, #2
 8004882:	d130      	bne.n	80048e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	2203      	movs	r2, #3
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4013      	ands	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ba:	2201      	movs	r2, #1
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f003 0201 	and.w	r2, r3, #1
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d017      	beq.n	8004922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	2203      	movs	r2, #3
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4013      	ands	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d123      	bne.n	8004976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	08da      	lsrs	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3208      	adds	r2, #8
 8004936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	220f      	movs	r2, #15
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	08da      	lsrs	r2, r3, #3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3208      	adds	r2, #8
 8004970:	6939      	ldr	r1, [r7, #16]
 8004972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	2203      	movs	r2, #3
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	43db      	mvns	r3, r3
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4013      	ands	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 0203 	and.w	r2, r3, #3
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 80a6 	beq.w	8004b04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004b28 <HAL_GPIO_Init+0x2e4>)
 80049ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049bc:	4a5a      	ldr	r2, [pc, #360]	@ (8004b28 <HAL_GPIO_Init+0x2e4>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80049c4:	4b58      	ldr	r3, [pc, #352]	@ (8004b28 <HAL_GPIO_Init+0x2e4>)
 80049c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049d0:	4a56      	ldr	r2, [pc, #344]	@ (8004b2c <HAL_GPIO_Init+0x2e8>)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	089b      	lsrs	r3, r3, #2
 80049d6:	3302      	adds	r3, #2
 80049d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	220f      	movs	r2, #15
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4013      	ands	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049fa:	d01f      	beq.n	8004a3c <HAL_GPIO_Init+0x1f8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a4c      	ldr	r2, [pc, #304]	@ (8004b30 <HAL_GPIO_Init+0x2ec>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d019      	beq.n	8004a38 <HAL_GPIO_Init+0x1f4>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a4b      	ldr	r2, [pc, #300]	@ (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <HAL_GPIO_Init+0x1f0>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a4a      	ldr	r2, [pc, #296]	@ (8004b38 <HAL_GPIO_Init+0x2f4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00d      	beq.n	8004a30 <HAL_GPIO_Init+0x1ec>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a49      	ldr	r2, [pc, #292]	@ (8004b3c <HAL_GPIO_Init+0x2f8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d007      	beq.n	8004a2c <HAL_GPIO_Init+0x1e8>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a48      	ldr	r2, [pc, #288]	@ (8004b40 <HAL_GPIO_Init+0x2fc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d101      	bne.n	8004a28 <HAL_GPIO_Init+0x1e4>
 8004a24:	2305      	movs	r3, #5
 8004a26:	e00a      	b.n	8004a3e <HAL_GPIO_Init+0x1fa>
 8004a28:	2306      	movs	r3, #6
 8004a2a:	e008      	b.n	8004a3e <HAL_GPIO_Init+0x1fa>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	e006      	b.n	8004a3e <HAL_GPIO_Init+0x1fa>
 8004a30:	2303      	movs	r3, #3
 8004a32:	e004      	b.n	8004a3e <HAL_GPIO_Init+0x1fa>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e002      	b.n	8004a3e <HAL_GPIO_Init+0x1fa>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <HAL_GPIO_Init+0x1fa>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	f002 0203 	and.w	r2, r2, #3
 8004a44:	0092      	lsls	r2, r2, #2
 8004a46:	4093      	lsls	r3, r2
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a4e:	4937      	ldr	r1, [pc, #220]	@ (8004b2c <HAL_GPIO_Init+0x2e8>)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	089b      	lsrs	r3, r3, #2
 8004a54:	3302      	adds	r3, #2
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a5c:	4b39      	ldr	r3, [pc, #228]	@ (8004b44 <HAL_GPIO_Init+0x300>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a80:	4a30      	ldr	r2, [pc, #192]	@ (8004b44 <HAL_GPIO_Init+0x300>)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a86:	4b2f      	ldr	r3, [pc, #188]	@ (8004b44 <HAL_GPIO_Init+0x300>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4013      	ands	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004aaa:	4a26      	ldr	r2, [pc, #152]	@ (8004b44 <HAL_GPIO_Init+0x300>)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004ab0:	4b24      	ldr	r3, [pc, #144]	@ (8004b44 <HAL_GPIO_Init+0x300>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4013      	ands	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b44 <HAL_GPIO_Init+0x300>)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ada:	4b1a      	ldr	r3, [pc, #104]	@ (8004b44 <HAL_GPIO_Init+0x300>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004afe:	4a11      	ldr	r2, [pc, #68]	@ (8004b44 <HAL_GPIO_Init+0x300>)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	3301      	adds	r3, #1
 8004b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f47f ae9d 	bne.w	8004854 <HAL_GPIO_Init+0x10>
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	48000400 	.word	0x48000400
 8004b34:	48000800 	.word	0x48000800
 8004b38:	48000c00 	.word	0x48000c00
 8004b3c:	48001000 	.word	0x48001000
 8004b40:	48001400 	.word	0x48001400
 8004b44:	40010400 	.word	0x40010400

08004b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
 8004b54:	4613      	mov	r3, r2
 8004b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b58:	787b      	ldrb	r3, [r7, #1]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b5e:	887a      	ldrh	r2, [r7, #2]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b64:	e002      	b.n	8004b6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b66:	887a      	ldrh	r2, [r7, #2]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b8a:	887a      	ldrh	r2, [r7, #2]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	041a      	lsls	r2, r3, #16
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	43d9      	mvns	r1, r3
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	400b      	ands	r3, r1
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	619a      	str	r2, [r3, #24]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d141      	bne.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bba:	4b4b      	ldr	r3, [pc, #300]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc6:	d131      	bne.n	8004c2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bc8:	4b47      	ldr	r3, [pc, #284]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bce:	4a46      	ldr	r2, [pc, #280]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd8:	4b43      	ldr	r3, [pc, #268]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004be0:	4a41      	ldr	r2, [pc, #260]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004be6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004be8:	4b40      	ldr	r3, [pc, #256]	@ (8004cec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2232      	movs	r2, #50	@ 0x32
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	4a3f      	ldr	r2, [pc, #252]	@ (8004cf0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	0c9b      	lsrs	r3, r3, #18
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bfe:	e002      	b.n	8004c06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c06:	4b38      	ldr	r3, [pc, #224]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c12:	d102      	bne.n	8004c1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f2      	bne.n	8004c00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c1a:	4b33      	ldr	r3, [pc, #204]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c26:	d158      	bne.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e057      	b.n	8004cdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c32:	4a2d      	ldr	r2, [pc, #180]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c3c:	e04d      	b.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c44:	d141      	bne.n	8004cca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c46:	4b28      	ldr	r3, [pc, #160]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c52:	d131      	bne.n	8004cb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c54:	4b24      	ldr	r3, [pc, #144]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c5a:	4a23      	ldr	r2, [pc, #140]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c64:	4b20      	ldr	r3, [pc, #128]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c74:	4b1d      	ldr	r3, [pc, #116]	@ (8004cec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2232      	movs	r2, #50	@ 0x32
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	0c9b      	lsrs	r3, r3, #18
 8004c86:	3301      	adds	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c8a:	e002      	b.n	8004c92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c92:	4b15      	ldr	r3, [pc, #84]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c9e:	d102      	bne.n	8004ca6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f2      	bne.n	8004c8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ca6:	4b10      	ldr	r3, [pc, #64]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb2:	d112      	bne.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e011      	b.n	8004cdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004cc8:	e007      	b.n	8004cda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cca:	4b07      	ldr	r3, [pc, #28]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cd2:	4a05      	ldr	r2, [pc, #20]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cd8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40007000 	.word	0x40007000
 8004cec:	20000004 	.word	0x20000004
 8004cf0:	431bde83 	.word	0x431bde83

08004cf4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004cf8:	4b05      	ldr	r3, [pc, #20]	@ (8004d10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4a04      	ldr	r2, [pc, #16]	@ (8004d10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d02:	6093      	str	r3, [r2, #8]
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40007000 	.word	0x40007000

08004d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e2fe      	b.n	8005324 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d075      	beq.n	8004e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d32:	4b97      	ldr	r3, [pc, #604]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d3c:	4b94      	ldr	r3, [pc, #592]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b0c      	cmp	r3, #12
 8004d4a:	d102      	bne.n	8004d52 <HAL_RCC_OscConfig+0x3e>
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d002      	beq.n	8004d58 <HAL_RCC_OscConfig+0x44>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d10b      	bne.n	8004d70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d58:	4b8d      	ldr	r3, [pc, #564]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d05b      	beq.n	8004e1c <HAL_RCC_OscConfig+0x108>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d157      	bne.n	8004e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e2d9      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d78:	d106      	bne.n	8004d88 <HAL_RCC_OscConfig+0x74>
 8004d7a:	4b85      	ldr	r3, [pc, #532]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a84      	ldr	r2, [pc, #528]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	e01d      	b.n	8004dc4 <HAL_RCC_OscConfig+0xb0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d90:	d10c      	bne.n	8004dac <HAL_RCC_OscConfig+0x98>
 8004d92:	4b7f      	ldr	r3, [pc, #508]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a7e      	ldr	r2, [pc, #504]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a7b      	ldr	r2, [pc, #492]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e00b      	b.n	8004dc4 <HAL_RCC_OscConfig+0xb0>
 8004dac:	4b78      	ldr	r3, [pc, #480]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a77      	ldr	r2, [pc, #476]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	4b75      	ldr	r3, [pc, #468]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a74      	ldr	r2, [pc, #464]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d013      	beq.n	8004df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fc fec0 	bl	8001b50 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd4:	f7fc febc 	bl	8001b50 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b64      	cmp	r3, #100	@ 0x64
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e29e      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0xc0>
 8004df2:	e014      	b.n	8004e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fc feac 	bl	8001b50 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dfc:	f7fc fea8 	bl	8001b50 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	@ 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e28a      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e0e:	4b60      	ldr	r3, [pc, #384]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0xe8>
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d075      	beq.n	8004f16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e2a:	4b59      	ldr	r3, [pc, #356]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
 8004e32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e34:	4b56      	ldr	r3, [pc, #344]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	d102      	bne.n	8004e4a <HAL_RCC_OscConfig+0x136>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d002      	beq.n	8004e50 <HAL_RCC_OscConfig+0x13c>
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d11f      	bne.n	8004e90 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e50:	4b4f      	ldr	r3, [pc, #316]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_OscConfig+0x154>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e25d      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e68:	4b49      	ldr	r3, [pc, #292]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	061b      	lsls	r3, r3, #24
 8004e76:	4946      	ldr	r1, [pc, #280]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e7c:	4b45      	ldr	r3, [pc, #276]	@ (8004f94 <HAL_RCC_OscConfig+0x280>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fc fe19 	bl	8001ab8 <HAL_InitTick>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d043      	beq.n	8004f14 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e249      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d023      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e98:	4b3d      	ldr	r3, [pc, #244]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea4:	f7fc fe54 	bl	8001b50 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eac:	f7fc fe50 	bl	8001b50 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e232      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ebe:	4b34      	ldr	r3, [pc, #208]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eca:	4b31      	ldr	r3, [pc, #196]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	492d      	ldr	r1, [pc, #180]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	604b      	str	r3, [r1, #4]
 8004ede:	e01a      	b.n	8004f16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004ee6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fc fe30 	bl	8001b50 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef4:	f7fc fe2c 	bl	8001b50 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e20e      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f06:	4b22      	ldr	r3, [pc, #136]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x1e0>
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d041      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01c      	beq.n	8004f64 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f2a:	4b19      	ldr	r3, [pc, #100]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f30:	4a17      	ldr	r2, [pc, #92]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004f32:	f043 0301 	orr.w	r3, r3, #1
 8004f36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3a:	f7fc fe09 	bl	8001b50 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f42:	f7fc fe05 	bl	8001b50 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e1e7      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f54:	4b0e      	ldr	r3, [pc, #56]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ef      	beq.n	8004f42 <HAL_RCC_OscConfig+0x22e>
 8004f62:	e020      	b.n	8004fa6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f64:	4b0a      	ldr	r3, [pc, #40]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f6a:	4a09      	ldr	r2, [pc, #36]	@ (8004f90 <HAL_RCC_OscConfig+0x27c>)
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f74:	f7fc fdec 	bl	8001b50 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f7a:	e00d      	b.n	8004f98 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7c:	f7fc fde8 	bl	8001b50 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d906      	bls.n	8004f98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e1ca      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000
 8004f94:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f98:	4b8c      	ldr	r3, [pc, #560]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8004f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1ea      	bne.n	8004f7c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80a6 	beq.w	8005100 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fb8:	4b84      	ldr	r3, [pc, #528]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x2b4>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <HAL_RCC_OscConfig+0x2b6>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00d      	beq.n	8004fea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fce:	4b7f      	ldr	r3, [pc, #508]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd2:	4a7e      	ldr	r2, [pc, #504]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8004fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fda:	4b7c      	ldr	r3, [pc, #496]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fea:	4b79      	ldr	r3, [pc, #484]	@ (80051d0 <HAL_RCC_OscConfig+0x4bc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d118      	bne.n	8005028 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff6:	4b76      	ldr	r3, [pc, #472]	@ (80051d0 <HAL_RCC_OscConfig+0x4bc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a75      	ldr	r2, [pc, #468]	@ (80051d0 <HAL_RCC_OscConfig+0x4bc>)
 8004ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005002:	f7fc fda5 	bl	8001b50 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500a:	f7fc fda1 	bl	8001b50 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e183      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800501c:	4b6c      	ldr	r3, [pc, #432]	@ (80051d0 <HAL_RCC_OscConfig+0x4bc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d108      	bne.n	8005042 <HAL_RCC_OscConfig+0x32e>
 8005030:	4b66      	ldr	r3, [pc, #408]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005036:	4a65      	ldr	r2, [pc, #404]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005040:	e024      	b.n	800508c <HAL_RCC_OscConfig+0x378>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b05      	cmp	r3, #5
 8005048:	d110      	bne.n	800506c <HAL_RCC_OscConfig+0x358>
 800504a:	4b60      	ldr	r3, [pc, #384]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 800504c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005050:	4a5e      	ldr	r2, [pc, #376]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005052:	f043 0304 	orr.w	r3, r3, #4
 8005056:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800505a:	4b5c      	ldr	r3, [pc, #368]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005060:	4a5a      	ldr	r2, [pc, #360]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800506a:	e00f      	b.n	800508c <HAL_RCC_OscConfig+0x378>
 800506c:	4b57      	ldr	r3, [pc, #348]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005072:	4a56      	ldr	r2, [pc, #344]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800507c:	4b53      	ldr	r3, [pc, #332]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005082:	4a52      	ldr	r2, [pc, #328]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005084:	f023 0304 	bic.w	r3, r3, #4
 8005088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d016      	beq.n	80050c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005094:	f7fc fd5c 	bl	8001b50 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fc fd58 	bl	8001b50 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e138      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b2:	4b46      	ldr	r3, [pc, #280]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0ed      	beq.n	800509c <HAL_RCC_OscConfig+0x388>
 80050c0:	e015      	b.n	80050ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c2:	f7fc fd45 	bl	8001b50 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fc fd41 	bl	8001b50 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e121      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050e0:	4b3a      	ldr	r3, [pc, #232]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1ed      	bne.n	80050ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050ee:	7ffb      	ldrb	r3, [r7, #31]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d105      	bne.n	8005100 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f4:	4b35      	ldr	r3, [pc, #212]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 80050f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f8:	4a34      	ldr	r2, [pc, #208]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 80050fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b00      	cmp	r3, #0
 800510a:	d03c      	beq.n	8005186 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01c      	beq.n	800514e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005114:	4b2d      	ldr	r3, [pc, #180]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005116:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800511a:	4a2c      	ldr	r2, [pc, #176]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fc fd14 	bl	8001b50 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800512c:	f7fc fd10 	bl	8001b50 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e0f2      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800513e:	4b23      	ldr	r3, [pc, #140]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005140:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ef      	beq.n	800512c <HAL_RCC_OscConfig+0x418>
 800514c:	e01b      	b.n	8005186 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800514e:	4b1f      	ldr	r3, [pc, #124]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005150:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005154:	4a1d      	ldr	r2, [pc, #116]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fc fcf7 	bl	8001b50 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005166:	f7fc fcf3 	bl	8001b50 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e0d5      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005178:	4b14      	ldr	r3, [pc, #80]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 800517a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1ef      	bne.n	8005166 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80c9 	beq.w	8005322 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005190:	4b0e      	ldr	r3, [pc, #56]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 030c 	and.w	r3, r3, #12
 8005198:	2b0c      	cmp	r3, #12
 800519a:	f000 8083 	beq.w	80052a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d15e      	bne.n	8005264 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a6:	4b09      	ldr	r3, [pc, #36]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a08      	ldr	r2, [pc, #32]	@ (80051cc <HAL_RCC_OscConfig+0x4b8>)
 80051ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b2:	f7fc fccd 	bl	8001b50 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b8:	e00c      	b.n	80051d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ba:	f7fc fcc9 	bl	8001b50 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d905      	bls.n	80051d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e0ab      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
 80051cc:	40021000 	.word	0x40021000
 80051d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d4:	4b55      	ldr	r3, [pc, #340]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1ec      	bne.n	80051ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e0:	4b52      	ldr	r3, [pc, #328]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	4b52      	ldr	r3, [pc, #328]	@ (8005330 <HAL_RCC_OscConfig+0x61c>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6a11      	ldr	r1, [r2, #32]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051f0:	3a01      	subs	r2, #1
 80051f2:	0112      	lsls	r2, r2, #4
 80051f4:	4311      	orrs	r1, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80051fa:	0212      	lsls	r2, r2, #8
 80051fc:	4311      	orrs	r1, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005202:	0852      	lsrs	r2, r2, #1
 8005204:	3a01      	subs	r2, #1
 8005206:	0552      	lsls	r2, r2, #21
 8005208:	4311      	orrs	r1, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800520e:	0852      	lsrs	r2, r2, #1
 8005210:	3a01      	subs	r2, #1
 8005212:	0652      	lsls	r2, r2, #25
 8005214:	4311      	orrs	r1, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800521a:	06d2      	lsls	r2, r2, #27
 800521c:	430a      	orrs	r2, r1
 800521e:	4943      	ldr	r1, [pc, #268]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 8005220:	4313      	orrs	r3, r2
 8005222:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005224:	4b41      	ldr	r3, [pc, #260]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a40      	ldr	r2, [pc, #256]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 800522a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800522e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005230:	4b3e      	ldr	r3, [pc, #248]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a3d      	ldr	r2, [pc, #244]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 8005236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800523a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fc fc88 	bl	8001b50 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005244:	f7fc fc84 	bl	8001b50 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e066      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005256:	4b35      	ldr	r3, [pc, #212]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0x530>
 8005262:	e05e      	b.n	8005322 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005264:	4b31      	ldr	r3, [pc, #196]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a30      	ldr	r2, [pc, #192]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 800526a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800526e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fc fc6e 	bl	8001b50 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005278:	f7fc fc6a 	bl	8001b50 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e04c      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800528a:	4b28      	ldr	r3, [pc, #160]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005296:	4b25      	ldr	r3, [pc, #148]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	4924      	ldr	r1, [pc, #144]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 800529c:	4b25      	ldr	r3, [pc, #148]	@ (8005334 <HAL_RCC_OscConfig+0x620>)
 800529e:	4013      	ands	r3, r2
 80052a0:	60cb      	str	r3, [r1, #12]
 80052a2:	e03e      	b.n	8005322 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e039      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80052b0:	4b1e      	ldr	r3, [pc, #120]	@ (800532c <HAL_RCC_OscConfig+0x618>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f003 0203 	and.w	r2, r3, #3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d12c      	bne.n	800531e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	3b01      	subs	r3, #1
 80052d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d123      	bne.n	800531e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d11b      	bne.n	800531e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d113      	bne.n	800531e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	3b01      	subs	r3, #1
 8005304:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005306:	429a      	cmp	r2, r3
 8005308:	d109      	bne.n	800531e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005314:	085b      	lsrs	r3, r3, #1
 8005316:	3b01      	subs	r3, #1
 8005318:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800531a:	429a      	cmp	r2, r3
 800531c:	d001      	beq.n	8005322 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3720      	adds	r7, #32
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40021000 	.word	0x40021000
 8005330:	019f800c 	.word	0x019f800c
 8005334:	feeefffc 	.word	0xfeeefffc

08005338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e11e      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005350:	4b91      	ldr	r3, [pc, #580]	@ (8005598 <HAL_RCC_ClockConfig+0x260>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d910      	bls.n	8005380 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b8e      	ldr	r3, [pc, #568]	@ (8005598 <HAL_RCC_ClockConfig+0x260>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 020f 	bic.w	r2, r3, #15
 8005366:	498c      	ldr	r1, [pc, #560]	@ (8005598 <HAL_RCC_ClockConfig+0x260>)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	4313      	orrs	r3, r2
 800536c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536e:	4b8a      	ldr	r3, [pc, #552]	@ (8005598 <HAL_RCC_ClockConfig+0x260>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d001      	beq.n	8005380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e106      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d073      	beq.n	8005474 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b03      	cmp	r3, #3
 8005392:	d129      	bne.n	80053e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005394:	4b81      	ldr	r3, [pc, #516]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0f4      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80053a4:	f000 f966 	bl	8005674 <RCC_GetSysClockFreqFromPLLSource>
 80053a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4a7c      	ldr	r2, [pc, #496]	@ (80055a0 <HAL_RCC_ClockConfig+0x268>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d93f      	bls.n	8005432 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053b2:	4b7a      	ldr	r3, [pc, #488]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d033      	beq.n	8005432 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d12f      	bne.n	8005432 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053d2:	4b72      	ldr	r3, [pc, #456]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053da:	4a70      	ldr	r2, [pc, #448]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 80053dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053e2:	2380      	movs	r3, #128	@ 0x80
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	e024      	b.n	8005432 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d107      	bne.n	8005400 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053f0:	4b6a      	ldr	r3, [pc, #424]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0c6      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005400:	4b66      	ldr	r3, [pc, #408]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0be      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005410:	f000 f8ce 	bl	80055b0 <HAL_RCC_GetSysClockFreq>
 8005414:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4a61      	ldr	r2, [pc, #388]	@ (80055a0 <HAL_RCC_ClockConfig+0x268>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d909      	bls.n	8005432 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800541e:	4b5f      	ldr	r3, [pc, #380]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005426:	4a5d      	ldr	r2, [pc, #372]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 8005428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800542c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800542e:	2380      	movs	r3, #128	@ 0x80
 8005430:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005432:	4b5a      	ldr	r3, [pc, #360]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 0203 	bic.w	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4957      	ldr	r1, [pc, #348]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 8005440:	4313      	orrs	r3, r2
 8005442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005444:	f7fc fb84 	bl	8001b50 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544a:	e00a      	b.n	8005462 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544c:	f7fc fb80 	bl	8001b50 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e095      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005462:	4b4e      	ldr	r3, [pc, #312]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 020c 	and.w	r2, r3, #12
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	429a      	cmp	r2, r3
 8005472:	d1eb      	bne.n	800544c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d023      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800548c:	4b43      	ldr	r3, [pc, #268]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	4a42      	ldr	r2, [pc, #264]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 8005492:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005496:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80054a4:	4b3d      	ldr	r3, [pc, #244]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054ac:	4a3b      	ldr	r2, [pc, #236]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 80054ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b4:	4b39      	ldr	r3, [pc, #228]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4936      	ldr	r1, [pc, #216]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	608b      	str	r3, [r1, #8]
 80054c6:	e008      	b.n	80054da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b80      	cmp	r3, #128	@ 0x80
 80054cc:	d105      	bne.n	80054da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054ce:	4b33      	ldr	r3, [pc, #204]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	4a32      	ldr	r2, [pc, #200]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 80054d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054da:	4b2f      	ldr	r3, [pc, #188]	@ (8005598 <HAL_RCC_ClockConfig+0x260>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d21d      	bcs.n	8005524 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005598 <HAL_RCC_ClockConfig+0x260>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f023 020f 	bic.w	r2, r3, #15
 80054f0:	4929      	ldr	r1, [pc, #164]	@ (8005598 <HAL_RCC_ClockConfig+0x260>)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054f8:	f7fc fb2a 	bl	8001b50 <HAL_GetTick>
 80054fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fe:	e00a      	b.n	8005516 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005500:	f7fc fb26 	bl	8001b50 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e03b      	b.n	800558e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005516:	4b20      	ldr	r3, [pc, #128]	@ (8005598 <HAL_RCC_ClockConfig+0x260>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d1ed      	bne.n	8005500 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005530:	4b1a      	ldr	r3, [pc, #104]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4917      	ldr	r1, [pc, #92]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 800553e:	4313      	orrs	r3, r2
 8005540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800554e:	4b13      	ldr	r3, [pc, #76]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	490f      	ldr	r1, [pc, #60]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 800555e:	4313      	orrs	r3, r2
 8005560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005562:	f000 f825 	bl	80055b0 <HAL_RCC_GetSysClockFreq>
 8005566:	4602      	mov	r2, r0
 8005568:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <HAL_RCC_ClockConfig+0x264>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	490c      	ldr	r1, [pc, #48]	@ (80055a4 <HAL_RCC_ClockConfig+0x26c>)
 8005574:	5ccb      	ldrb	r3, [r1, r3]
 8005576:	f003 031f 	and.w	r3, r3, #31
 800557a:	fa22 f303 	lsr.w	r3, r2, r3
 800557e:	4a0a      	ldr	r2, [pc, #40]	@ (80055a8 <HAL_RCC_ClockConfig+0x270>)
 8005580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005582:	4b0a      	ldr	r3, [pc, #40]	@ (80055ac <HAL_RCC_ClockConfig+0x274>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fc fa96 	bl	8001ab8 <HAL_InitTick>
 800558c:	4603      	mov	r3, r0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	40022000 	.word	0x40022000
 800559c:	40021000 	.word	0x40021000
 80055a0:	04c4b400 	.word	0x04c4b400
 80055a4:	080065cc 	.word	0x080065cc
 80055a8:	20000004 	.word	0x20000004
 80055ac:	20000008 	.word	0x20000008

080055b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 030c 	and.w	r3, r3, #12
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d102      	bne.n	80055c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055c2:	4b2a      	ldr	r3, [pc, #168]	@ (800566c <HAL_RCC_GetSysClockFreq+0xbc>)
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	e047      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055c8:	4b27      	ldr	r3, [pc, #156]	@ (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 030c 	and.w	r3, r3, #12
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d102      	bne.n	80055da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055d4:	4b26      	ldr	r3, [pc, #152]	@ (8005670 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	e03e      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055da:	4b23      	ldr	r3, [pc, #140]	@ (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b0c      	cmp	r3, #12
 80055e4:	d136      	bne.n	8005654 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055e6:	4b20      	ldr	r3, [pc, #128]	@ (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	3301      	adds	r3, #1
 80055fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b03      	cmp	r3, #3
 8005602:	d10c      	bne.n	800561e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005604:	4a1a      	ldr	r2, [pc, #104]	@ (8005670 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	4a16      	ldr	r2, [pc, #88]	@ (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800560e:	68d2      	ldr	r2, [r2, #12]
 8005610:	0a12      	lsrs	r2, r2, #8
 8005612:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005616:	fb02 f303 	mul.w	r3, r2, r3
 800561a:	617b      	str	r3, [r7, #20]
      break;
 800561c:	e00c      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800561e:	4a13      	ldr	r2, [pc, #76]	@ (800566c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	4a10      	ldr	r2, [pc, #64]	@ (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005628:	68d2      	ldr	r2, [r2, #12]
 800562a:	0a12      	lsrs	r2, r2, #8
 800562c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005630:	fb02 f303 	mul.w	r3, r2, r3
 8005634:	617b      	str	r3, [r7, #20]
      break;
 8005636:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005638:	4b0b      	ldr	r3, [pc, #44]	@ (8005668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	0e5b      	lsrs	r3, r3, #25
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	3301      	adds	r3, #1
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	e001      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005658:	693b      	ldr	r3, [r7, #16]
}
 800565a:	4618      	mov	r0, r3
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40021000 	.word	0x40021000
 800566c:	00f42400 	.word	0x00f42400
 8005670:	007a1200 	.word	0x007a1200

08005674 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800567a:	4b1e      	ldr	r3, [pc, #120]	@ (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005684:	4b1b      	ldr	r3, [pc, #108]	@ (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	091b      	lsrs	r3, r3, #4
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	3301      	adds	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d10c      	bne.n	80056b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005698:	4a17      	ldr	r2, [pc, #92]	@ (80056f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	4a14      	ldr	r2, [pc, #80]	@ (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056a2:	68d2      	ldr	r2, [r2, #12]
 80056a4:	0a12      	lsrs	r2, r2, #8
 80056a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	617b      	str	r3, [r7, #20]
    break;
 80056b0:	e00c      	b.n	80056cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056b2:	4a12      	ldr	r2, [pc, #72]	@ (80056fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ba:	4a0e      	ldr	r2, [pc, #56]	@ (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056bc:	68d2      	ldr	r2, [r2, #12]
 80056be:	0a12      	lsrs	r2, r2, #8
 80056c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056c4:	fb02 f303 	mul.w	r3, r2, r3
 80056c8:	617b      	str	r3, [r7, #20]
    break;
 80056ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056cc:	4b09      	ldr	r3, [pc, #36]	@ (80056f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	0e5b      	lsrs	r3, r3, #25
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	3301      	adds	r3, #1
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056e6:	687b      	ldr	r3, [r7, #4]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40021000 	.word	0x40021000
 80056f8:	007a1200 	.word	0x007a1200
 80056fc:	00f42400 	.word	0x00f42400

08005700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005708:	2300      	movs	r3, #0
 800570a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800570c:	2300      	movs	r3, #0
 800570e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8098 	beq.w	800584e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800571e:	2300      	movs	r3, #0
 8005720:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005722:	4b43      	ldr	r3, [pc, #268]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800572e:	4b40      	ldr	r3, [pc, #256]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005732:	4a3f      	ldr	r2, [pc, #252]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005738:	6593      	str	r3, [r2, #88]	@ 0x58
 800573a:	4b3d      	ldr	r3, [pc, #244]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800573c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800573e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005746:	2301      	movs	r3, #1
 8005748:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800574a:	4b3a      	ldr	r3, [pc, #232]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a39      	ldr	r2, [pc, #228]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005754:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005756:	f7fc f9fb 	bl	8001b50 <HAL_GetTick>
 800575a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800575c:	e009      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800575e:	f7fc f9f7 	bl	8001b50 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d902      	bls.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	74fb      	strb	r3, [r7, #19]
        break;
 8005770:	e005      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005772:	4b30      	ldr	r3, [pc, #192]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0ef      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800577e:	7cfb      	ldrb	r3, [r7, #19]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d159      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005784:	4b2a      	ldr	r3, [pc, #168]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800578a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800578e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01e      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	429a      	cmp	r2, r3
 800579e:	d019      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057a0:	4b23      	ldr	r3, [pc, #140]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057ac:	4b20      	ldr	r3, [pc, #128]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057cc:	4a18      	ldr	r2, [pc, #96]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d016      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057de:	f7fc f9b7 	bl	8001b50 <HAL_GetTick>
 80057e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057e4:	e00b      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e6:	f7fc f9b3 	bl	8001b50 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d902      	bls.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	74fb      	strb	r3, [r7, #19]
            break;
 80057fc:	e006      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0ec      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10b      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005812:	4b07      	ldr	r3, [pc, #28]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005818:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	4903      	ldr	r1, [pc, #12]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005828:	e008      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800582a:	7cfb      	ldrb	r3, [r7, #19]
 800582c:	74bb      	strb	r3, [r7, #18]
 800582e:	e005      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005830:	40021000 	.word	0x40021000
 8005834:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	7cfb      	ldrb	r3, [r7, #19]
 800583a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800583c:	7c7b      	ldrb	r3, [r7, #17]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d105      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005842:	4ba6      	ldr	r3, [pc, #664]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005846:	4aa5      	ldr	r2, [pc, #660]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800584c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800585a:	4ba0      	ldr	r3, [pc, #640]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005860:	f023 0203 	bic.w	r2, r3, #3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	499c      	ldr	r1, [pc, #624]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800587c:	4b97      	ldr	r3, [pc, #604]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005882:	f023 020c 	bic.w	r2, r3, #12
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	4994      	ldr	r1, [pc, #592]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800589e:	4b8f      	ldr	r3, [pc, #572]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	498b      	ldr	r1, [pc, #556]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058c0:	4b86      	ldr	r3, [pc, #536]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	4983      	ldr	r1, [pc, #524]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058e2:	4b7e      	ldr	r3, [pc, #504]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	497a      	ldr	r1, [pc, #488]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005904:	4b75      	ldr	r3, [pc, #468]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	4972      	ldr	r1, [pc, #456]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005926:	4b6d      	ldr	r3, [pc, #436]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800592c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	4969      	ldr	r1, [pc, #420]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005948:	4b64      	ldr	r3, [pc, #400]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	4961      	ldr	r1, [pc, #388]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800596a:	4b5c      	ldr	r3, [pc, #368]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005970:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	4958      	ldr	r1, [pc, #352]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005988:	2b00      	cmp	r3, #0
 800598a:	d015      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800598c:	4b53      	ldr	r3, [pc, #332]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800598e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005992:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599a:	4950      	ldr	r1, [pc, #320]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059aa:	d105      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ac:	4b4b      	ldr	r3, [pc, #300]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	4a4a      	ldr	r2, [pc, #296]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059b6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d015      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059c4:	4b45      	ldr	r3, [pc, #276]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d2:	4942      	ldr	r1, [pc, #264]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059e2:	d105      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059e4:	4b3d      	ldr	r3, [pc, #244]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4a3c      	ldr	r2, [pc, #240]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059ee:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d015      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059fc:	4b37      	ldr	r3, [pc, #220]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a02:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0a:	4934      	ldr	r1, [pc, #208]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a1a:	d105      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4a2e      	ldr	r2, [pc, #184]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d015      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a34:	4b29      	ldr	r3, [pc, #164]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a42:	4926      	ldr	r1, [pc, #152]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a52:	d105      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a54:	4b21      	ldr	r3, [pc, #132]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4a20      	ldr	r2, [pc, #128]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d015      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7a:	4918      	ldr	r1, [pc, #96]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a8a:	d105      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a8c:	4b13      	ldr	r3, [pc, #76]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4a12      	ldr	r2, [pc, #72]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d015      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aaa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab2:	490a      	ldr	r1, [pc, #40]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005abe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ac2:	d105      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ac4:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	4a04      	ldr	r2, [pc, #16]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ace:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ad0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40021000 	.word	0x40021000

08005ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e049      	b.n	8005b86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fb fd96 	bl	8001638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f000 fb1c 	bl	800615c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d001      	beq.n	8005ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e04a      	b.n	8005c3e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a21      	ldr	r2, [pc, #132]	@ (8005c4c <HAL_TIM_Base_Start_IT+0xbc>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d018      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x6c>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd2:	d013      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x6c>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c50 <HAL_TIM_Base_Start_IT+0xc0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00e      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x6c>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c54 <HAL_TIM_Base_Start_IT+0xc4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d009      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x6c>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a1a      	ldr	r2, [pc, #104]	@ (8005c58 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x6c>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a19      	ldr	r2, [pc, #100]	@ (8005c5c <HAL_TIM_Base_Start_IT+0xcc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d115      	bne.n	8005c28 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	4b17      	ldr	r3, [pc, #92]	@ (8005c60 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b06      	cmp	r3, #6
 8005c0c:	d015      	beq.n	8005c3a <HAL_TIM_Base_Start_IT+0xaa>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c14:	d011      	beq.n	8005c3a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0201 	orr.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c26:	e008      	b.n	8005c3a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	e000      	b.n	8005c3c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40000400 	.word	0x40000400
 8005c54:	40000800 	.word	0x40000800
 8005c58:	40013400 	.word	0x40013400
 8005c5c:	40014000 	.word	0x40014000
 8005c60:	00010007 	.word	0x00010007

08005c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d020      	beq.n	8005cc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01b      	beq.n	8005cc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f06f 0202 	mvn.w	r2, #2
 8005c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fa36 	bl	8006120 <HAL_TIM_IC_CaptureCallback>
 8005cb4:	e005      	b.n	8005cc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa28 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fa39 	bl	8006134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d020      	beq.n	8005d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01b      	beq.n	8005d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0204 	mvn.w	r2, #4
 8005ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa10 	bl	8006120 <HAL_TIM_IC_CaptureCallback>
 8005d00:	e005      	b.n	8005d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa02 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fa13 	bl	8006134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d020      	beq.n	8005d60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01b      	beq.n	8005d60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0208 	mvn.w	r2, #8
 8005d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2204      	movs	r2, #4
 8005d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f9ea 	bl	8006120 <HAL_TIM_IC_CaptureCallback>
 8005d4c:	e005      	b.n	8005d5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9dc 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f9ed 	bl	8006134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 0310 	and.w	r3, r3, #16
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d020      	beq.n	8005dac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01b      	beq.n	8005dac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0210 	mvn.w	r2, #16
 8005d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2208      	movs	r2, #8
 8005d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f9c4 	bl	8006120 <HAL_TIM_IC_CaptureCallback>
 8005d98:	e005      	b.n	8005da6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f9b6 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f9c7 	bl	8006134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00c      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0201 	mvn.w	r2, #1
 8005dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f994 	bl	80060f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d104      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00c      	beq.n	8005dfe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fb73 	bl	80064e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00c      	beq.n	8005e22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fb6b 	bl	80064f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00c      	beq.n	8005e46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f981 	bl	8006148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00c      	beq.n	8005e6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f06f 0220 	mvn.w	r2, #32
 8005e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fb33 	bl	80064d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00c      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fb3f 	bl	800650c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00c      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fb37 	bl	8006520 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00c      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fb2f 	bl	8006534 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00c      	beq.n	8005efa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fb27 	bl	8006548 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_TIM_ConfigClockSource+0x1c>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e0de      	b.n	80060de <HAL_TIM_ConfigClockSource+0x1da>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005f3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a63      	ldr	r2, [pc, #396]	@ (80060e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	f000 80a9 	beq.w	80060b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f60:	4a61      	ldr	r2, [pc, #388]	@ (80060e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	f200 80ae 	bhi.w	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f68:	4a60      	ldr	r2, [pc, #384]	@ (80060ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	f000 80a1 	beq.w	80060b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f70:	4a5e      	ldr	r2, [pc, #376]	@ (80060ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	f200 80a6 	bhi.w	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f78:	4a5d      	ldr	r2, [pc, #372]	@ (80060f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	f000 8099 	beq.w	80060b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f80:	4a5b      	ldr	r2, [pc, #364]	@ (80060f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	f200 809e 	bhi.w	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f88:	4a5a      	ldr	r2, [pc, #360]	@ (80060f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	f000 8091 	beq.w	80060b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f90:	4a58      	ldr	r2, [pc, #352]	@ (80060f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	f200 8096 	bhi.w	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f9c:	f000 8089 	beq.w	80060b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005fa0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005fa4:	f200 808e 	bhi.w	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fac:	d03e      	beq.n	800602c <HAL_TIM_ConfigClockSource+0x128>
 8005fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb2:	f200 8087 	bhi.w	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fba:	f000 8086 	beq.w	80060ca <HAL_TIM_ConfigClockSource+0x1c6>
 8005fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc2:	d87f      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fc4:	2b70      	cmp	r3, #112	@ 0x70
 8005fc6:	d01a      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0xfa>
 8005fc8:	2b70      	cmp	r3, #112	@ 0x70
 8005fca:	d87b      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fcc:	2b60      	cmp	r3, #96	@ 0x60
 8005fce:	d050      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x16e>
 8005fd0:	2b60      	cmp	r3, #96	@ 0x60
 8005fd2:	d877      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fd4:	2b50      	cmp	r3, #80	@ 0x50
 8005fd6:	d03c      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0x14e>
 8005fd8:	2b50      	cmp	r3, #80	@ 0x50
 8005fda:	d873      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fdc:	2b40      	cmp	r3, #64	@ 0x40
 8005fde:	d058      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0x18e>
 8005fe0:	2b40      	cmp	r3, #64	@ 0x40
 8005fe2:	d86f      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fe4:	2b30      	cmp	r3, #48	@ 0x30
 8005fe6:	d064      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005fe8:	2b30      	cmp	r3, #48	@ 0x30
 8005fea:	d86b      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d060      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ff0:	2b20      	cmp	r3, #32
 8005ff2:	d867      	bhi.n	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d05c      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ff8:	2b10      	cmp	r3, #16
 8005ffa:	d05a      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ffc:	e062      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800600e:	f000 f9bd 	bl	800638c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	609a      	str	r2, [r3, #8]
      break;
 800602a:	e04f      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800603c:	f000 f9a6 	bl	800638c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800604e:	609a      	str	r2, [r3, #8]
      break;
 8006050:	e03c      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800605e:	461a      	mov	r2, r3
 8006060:	f000 f918 	bl	8006294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2150      	movs	r1, #80	@ 0x50
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f971 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 8006070:	e02c      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800607e:	461a      	mov	r2, r3
 8006080:	f000 f937 	bl	80062f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2160      	movs	r1, #96	@ 0x60
 800608a:	4618      	mov	r0, r3
 800608c:	f000 f961 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 8006090:	e01c      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800609e:	461a      	mov	r2, r3
 80060a0:	f000 f8f8 	bl	8006294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2140      	movs	r1, #64	@ 0x40
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f951 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 80060b0:	e00c      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4619      	mov	r1, r3
 80060bc:	4610      	mov	r0, r2
 80060be:	f000 f948 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 80060c2:	e003      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
      break;
 80060c8:	e000      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80060ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	00100070 	.word	0x00100070
 80060ec:	00100040 	.word	0x00100040
 80060f0:	00100030 	.word	0x00100030
 80060f4:	00100020 	.word	0x00100020

080060f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a42      	ldr	r2, [pc, #264]	@ (8006278 <TIM_Base_SetConfig+0x11c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00f      	beq.n	8006194 <TIM_Base_SetConfig+0x38>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617a:	d00b      	beq.n	8006194 <TIM_Base_SetConfig+0x38>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a3f      	ldr	r2, [pc, #252]	@ (800627c <TIM_Base_SetConfig+0x120>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d007      	beq.n	8006194 <TIM_Base_SetConfig+0x38>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a3e      	ldr	r2, [pc, #248]	@ (8006280 <TIM_Base_SetConfig+0x124>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_Base_SetConfig+0x38>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a3d      	ldr	r2, [pc, #244]	@ (8006284 <TIM_Base_SetConfig+0x128>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d108      	bne.n	80061a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a33      	ldr	r2, [pc, #204]	@ (8006278 <TIM_Base_SetConfig+0x11c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d01b      	beq.n	80061e6 <TIM_Base_SetConfig+0x8a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b4:	d017      	beq.n	80061e6 <TIM_Base_SetConfig+0x8a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a30      	ldr	r2, [pc, #192]	@ (800627c <TIM_Base_SetConfig+0x120>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d013      	beq.n	80061e6 <TIM_Base_SetConfig+0x8a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006280 <TIM_Base_SetConfig+0x124>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00f      	beq.n	80061e6 <TIM_Base_SetConfig+0x8a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006284 <TIM_Base_SetConfig+0x128>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00b      	beq.n	80061e6 <TIM_Base_SetConfig+0x8a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006288 <TIM_Base_SetConfig+0x12c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d007      	beq.n	80061e6 <TIM_Base_SetConfig+0x8a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2c      	ldr	r2, [pc, #176]	@ (800628c <TIM_Base_SetConfig+0x130>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <TIM_Base_SetConfig+0x8a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006290 <TIM_Base_SetConfig+0x134>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d108      	bne.n	80061f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a16      	ldr	r2, [pc, #88]	@ (8006278 <TIM_Base_SetConfig+0x11c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00f      	beq.n	8006244 <TIM_Base_SetConfig+0xe8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a17      	ldr	r2, [pc, #92]	@ (8006284 <TIM_Base_SetConfig+0x128>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00b      	beq.n	8006244 <TIM_Base_SetConfig+0xe8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a16      	ldr	r2, [pc, #88]	@ (8006288 <TIM_Base_SetConfig+0x12c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d007      	beq.n	8006244 <TIM_Base_SetConfig+0xe8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a15      	ldr	r2, [pc, #84]	@ (800628c <TIM_Base_SetConfig+0x130>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_Base_SetConfig+0xe8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a14      	ldr	r2, [pc, #80]	@ (8006290 <TIM_Base_SetConfig+0x134>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d103      	bne.n	800624c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d105      	bne.n	800626a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f023 0201 	bic.w	r2, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	611a      	str	r2, [r3, #16]
  }
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40012c00 	.word	0x40012c00
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800

08006294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0201 	bic.w	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f023 030a 	bic.w	r3, r3, #10
 80062d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b087      	sub	sp, #28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	f023 0210 	bic.w	r2, r3, #16
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800631c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	031b      	lsls	r3, r3, #12
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800632e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006352:	b480      	push	{r7}
 8006354:	b085      	sub	sp, #20
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800636c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	f043 0307 	orr.w	r3, r3, #7
 8006378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	609a      	str	r2, [r3, #8]
}
 8006380:	bf00      	nop
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	021a      	lsls	r2, r3, #8
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	609a      	str	r2, [r3, #8]
}
 80063c0:	bf00      	nop
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063e0:	2302      	movs	r3, #2
 80063e2:	e065      	b.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a2c      	ldr	r2, [pc, #176]	@ (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d004      	beq.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a2b      	ldr	r2, [pc, #172]	@ (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d108      	bne.n	800642a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800641e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006434:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1b      	ldr	r2, [pc, #108]	@ (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d018      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800645a:	d013      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a18      	ldr	r2, [pc, #96]	@ (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00e      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a17      	ldr	r2, [pc, #92]	@ (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d009      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a12      	ldr	r2, [pc, #72]	@ (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d004      	beq.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a13      	ldr	r2, [pc, #76]	@ (80064cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d10c      	bne.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800648a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	4313      	orrs	r3, r2
 8006494:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40013400 	.word	0x40013400
 80064c4:	40000400 	.word	0x40000400
 80064c8:	40000800 	.word	0x40000800
 80064cc:	40014000 	.word	0x40014000

080064d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <memset>:
 800655c:	4402      	add	r2, r0
 800655e:	4603      	mov	r3, r0
 8006560:	4293      	cmp	r3, r2
 8006562:	d100      	bne.n	8006566 <memset+0xa>
 8006564:	4770      	bx	lr
 8006566:	f803 1b01 	strb.w	r1, [r3], #1
 800656a:	e7f9      	b.n	8006560 <memset+0x4>

0800656c <__libc_init_array>:
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	4d0d      	ldr	r5, [pc, #52]	@ (80065a4 <__libc_init_array+0x38>)
 8006570:	4c0d      	ldr	r4, [pc, #52]	@ (80065a8 <__libc_init_array+0x3c>)
 8006572:	1b64      	subs	r4, r4, r5
 8006574:	10a4      	asrs	r4, r4, #2
 8006576:	2600      	movs	r6, #0
 8006578:	42a6      	cmp	r6, r4
 800657a:	d109      	bne.n	8006590 <__libc_init_array+0x24>
 800657c:	4d0b      	ldr	r5, [pc, #44]	@ (80065ac <__libc_init_array+0x40>)
 800657e:	4c0c      	ldr	r4, [pc, #48]	@ (80065b0 <__libc_init_array+0x44>)
 8006580:	f000 f818 	bl	80065b4 <_init>
 8006584:	1b64      	subs	r4, r4, r5
 8006586:	10a4      	asrs	r4, r4, #2
 8006588:	2600      	movs	r6, #0
 800658a:	42a6      	cmp	r6, r4
 800658c:	d105      	bne.n	800659a <__libc_init_array+0x2e>
 800658e:	bd70      	pop	{r4, r5, r6, pc}
 8006590:	f855 3b04 	ldr.w	r3, [r5], #4
 8006594:	4798      	blx	r3
 8006596:	3601      	adds	r6, #1
 8006598:	e7ee      	b.n	8006578 <__libc_init_array+0xc>
 800659a:	f855 3b04 	ldr.w	r3, [r5], #4
 800659e:	4798      	blx	r3
 80065a0:	3601      	adds	r6, #1
 80065a2:	e7f2      	b.n	800658a <__libc_init_array+0x1e>
 80065a4:	080065ec 	.word	0x080065ec
 80065a8:	080065ec 	.word	0x080065ec
 80065ac:	080065ec 	.word	0x080065ec
 80065b0:	080065f0 	.word	0x080065f0

080065b4 <_init>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	bf00      	nop
 80065b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ba:	bc08      	pop	{r3}
 80065bc:	469e      	mov	lr, r3
 80065be:	4770      	bx	lr

080065c0 <_fini>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr
