
AnalogNodeG4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000594c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005b24  08005b24  00006b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b44  08005b44  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005b44  08005b44  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b44  08005b44  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b44  08005b44  00006b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b48  08005b48  00006b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005b4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  20000010  08005b5c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  08005b5c  000076fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fb8  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c09  00000000  00000000  0001bff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0001ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff5  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020888  00000000  00000000  000210c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b09  00000000  00000000  0004194d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da97e  00000000  00000000  00057456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131dd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000599c  00000000  00000000  00131e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001377b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005b0c 	.word	0x08005b0c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005b0c 	.word	0x08005b0c

08000218 <init_sensors>:
#define FLASH_ADDRESS 0x0801F800

#define ID 3


void init_sensors(void){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
	//initialize the sensors
		for (int i = 0; i < SENSOR_NUM; i++) {
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e04b      	b.n	80002bc <init_sensors+0xa4>
			sensors[i].transfer_function = TF_3V3;
 8000224:	492a      	ldr	r1, [pc, #168]	@ (80002d0 <init_sensors+0xb8>)
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	4613      	mov	r3, r2
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	4413      	add	r3, r2
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	440b      	add	r3, r1
 8000232:	4a28      	ldr	r2, [pc, #160]	@ (80002d4 <init_sensors+0xbc>)
 8000234:	601a      	str	r2, [r3, #0]
			sensors[i].CAN_ID = 0;
 8000236:	4926      	ldr	r1, [pc, #152]	@ (80002d0 <init_sensors+0xb8>)
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	4613      	mov	r3, r2
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	4413      	add	r3, r2
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	440b      	add	r3, r1
 8000244:	3304      	adds	r3, #4
 8000246:	2200      	movs	r2, #0
 8000248:	801a      	strh	r2, [r3, #0]
			sensors[i].CAN_interval = 20;
 800024a:	4921      	ldr	r1, [pc, #132]	@ (80002d0 <init_sensors+0xb8>)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4613      	mov	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4413      	add	r3, r2
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	440b      	add	r3, r1
 8000258:	3306      	adds	r3, #6
 800025a:	2214      	movs	r2, #20
 800025c:	801a      	strh	r2, [r3, #0]
			sensors[i].averages = 0;
 800025e:	491c      	ldr	r1, [pc, #112]	@ (80002d0 <init_sensors+0xb8>)
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4613      	mov	r3, r2
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	4413      	add	r3, r2
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	440b      	add	r3, r1
 800026c:	3308      	adds	r3, #8
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
			sensors[i].pin = i;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	b2d8      	uxtb	r0, r3
 8000276:	4916      	ldr	r1, [pc, #88]	@ (80002d0 <init_sensors+0xb8>)
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	4613      	mov	r3, r2
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	4413      	add	r3, r2
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	440b      	add	r3, r1
 8000284:	330c      	adds	r3, #12
 8000286:	4602      	mov	r2, r0
 8000288:	701a      	strb	r2, [r3, #0]
			sensors[i].high_adc = 0xFFFF;
 800028a:	4911      	ldr	r1, [pc, #68]	@ (80002d0 <init_sensors+0xb8>)
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	4613      	mov	r3, r2
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	4413      	add	r3, r2
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	440b      	add	r3, r1
 8000298:	3312      	adds	r3, #18
 800029a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800029e:	801a      	strh	r2, [r3, #0]
			sensors[i].low_adc = 0xFFFF;
 80002a0:	490b      	ldr	r1, [pc, #44]	@ (80002d0 <init_sensors+0xb8>)
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	4613      	mov	r3, r2
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	4413      	add	r3, r2
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	440b      	add	r3, r1
 80002ae:	3310      	adds	r3, #16
 80002b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002b4:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < SENSOR_NUM; i++) {
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	3301      	adds	r3, #1
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b0b      	cmp	r3, #11
 80002c0:	ddb0      	ble.n	8000224 <init_sensors+0xc>
		}
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	20000290 	.word	0x20000290
 80002d4:	08001405 	.word	0x08001405

080002d8 <Config_Setup>:

void Config_Setup(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	//initialize the sensors
	init_sensors();
 80002dc:	f7ff ff9c 	bl	8000218 <init_sensors>

	read_all_calib_values();
 80002e0:	f000 f828 	bl	8000334 <read_all_calib_values>
#if ID == 1
    Config_1();
#elif ID == 2
    Config_2();
#elif ID == 3
    Config_3();
 80002e4:	f000 f864 	bl	80003b0 <Config_3>
#endif
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <check_calib_status>:
    HAL_FLASH_Lock();
    // Enable interrupts after the operation
    __enable_irq();
}

void check_calib_status(Sensor *sensor){
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]

	uint16_t default_value = 0xFFFF;
 80002f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80002f8:	81bb      	strh	r3, [r7, #12]
	int8_t code = 3;
 80002fa:	2303      	movs	r3, #3
 80002fc:	73fb      	strb	r3, [r7, #15]
	if(sensor->low_adc == default_value )
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	8a1b      	ldrh	r3, [r3, #16]
 8000302:	89ba      	ldrh	r2, [r7, #12]
 8000304:	429a      	cmp	r2, r3
 8000306:	d103      	bne.n	8000310 <check_calib_status+0x24>
		code -= 1;
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	3b01      	subs	r3, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	73fb      	strb	r3, [r7, #15]
	if(sensor->high_adc == default_value )
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	8a5b      	ldrh	r3, [r3, #18]
 8000314:	89ba      	ldrh	r2, [r7, #12]
 8000316:	429a      	cmp	r2, r3
 8000318:	d103      	bne.n	8000322 <check_calib_status+0x36>
		code -= 2;
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	3b02      	subs	r3, #2
 800031e:	b2db      	uxtb	r3, r3
 8000320:	73fb      	strb	r3, [r7, #15]

	sensor->calib_code = code;
 8000322:	7bfa      	ldrb	r2, [r7, #15]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	735a      	strb	r2, [r3, #13]

}
 8000328:	bf00      	nop
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <read_all_calib_values>:

void read_all_calib_values(){
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0

	for(int i = 0; i < SENSOR_NUM; i++){
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	e02d      	b.n	800039c <read_all_calib_values+0x68>

		uint32_t value = *(__IO uint32_t*)(FLASH_ADDRESS + i * 8);
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8000346:	f503 537c 	add.w	r3, r3, #16128	@ 0x3f00
 800034a:	00db      	lsls	r3, r3, #3
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	60bb      	str	r3, [r7, #8]

		uint16_t low = value;
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	80fb      	strh	r3, [r7, #6]
		uint16_t high = value >> 16;
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	0c1b      	lsrs	r3, r3, #16
 8000358:	80bb      	strh	r3, [r7, #4]

		sensors[i].low_adc = low;
 800035a:	4914      	ldr	r1, [pc, #80]	@ (80003ac <read_all_calib_values+0x78>)
 800035c:	68fa      	ldr	r2, [r7, #12]
 800035e:	4613      	mov	r3, r2
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	4413      	add	r3, r2
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	440b      	add	r3, r1
 8000368:	3310      	adds	r3, #16
 800036a:	88fa      	ldrh	r2, [r7, #6]
 800036c:	801a      	strh	r2, [r3, #0]
		sensors[i].high_adc = high;
 800036e:	490f      	ldr	r1, [pc, #60]	@ (80003ac <read_all_calib_values+0x78>)
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	4613      	mov	r3, r2
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	4413      	add	r3, r2
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	440b      	add	r3, r1
 800037c:	3312      	adds	r3, #18
 800037e:	88ba      	ldrh	r2, [r7, #4]
 8000380:	801a      	strh	r2, [r3, #0]

		check_calib_status(&sensors[i]);
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	4613      	mov	r3, r2
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	4413      	add	r3, r2
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	4a07      	ldr	r2, [pc, #28]	@ (80003ac <read_all_calib_values+0x78>)
 800038e:	4413      	add	r3, r2
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ffab 	bl	80002ec <check_calib_status>
	for(int i = 0; i < SENSOR_NUM; i++){
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	3301      	adds	r3, #1
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	2b0b      	cmp	r3, #11
 80003a0:	ddce      	ble.n	8000340 <read_all_calib_values+0xc>
	}
}
 80003a2:	bf00      	nop
 80003a4:	bf00      	nop
 80003a6:	3710      	adds	r7, #16
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000290 	.word	0x20000290

080003b0 <Config_3>:
	
	CAN_interval = 100;
}


void Config_3(void){
 80003b0:	b4b0      	push	{r4, r5, r7}
 80003b2:	b087      	sub	sp, #28
 80003b4:	af00      	add	r7, sp, #0

	Sensor APPS2 = {TF_APPS2, 2, 100, 0, V5_in1};
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
 80003c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000400 <Config_3+0x50>)
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	2302      	movs	r3, #2
 80003ca:	813b      	strh	r3, [r7, #8]
 80003cc:	2364      	movs	r3, #100	@ 0x64
 80003ce:	817b      	strh	r3, [r7, #10]
 80003d0:	2303      	movs	r3, #3
 80003d2:	743b      	strb	r3, [r7, #16]
	sensors[APPS2.pin] = APPS2;
 80003d4:	7c3b      	ldrb	r3, [r7, #16]
 80003d6:	4619      	mov	r1, r3
 80003d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000404 <Config_3+0x54>)
 80003da:	460b      	mov	r3, r1
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	440b      	add	r3, r1
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	4413      	add	r3, r2
 80003e4:	461d      	mov	r5, r3
 80003e6:	1d3c      	adds	r4, r7, #4
 80003e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ec:	6823      	ldr	r3, [r4, #0]
 80003ee:	602b      	str	r3, [r5, #0]

	CAN_interval = 100;
 80003f0:	4b05      	ldr	r3, [pc, #20]	@ (8000408 <Config_3+0x58>)
 80003f2:	2264      	movs	r2, #100	@ 0x64
 80003f4:	801a      	strh	r2, [r3, #0]

}
 80003f6:	bf00      	nop
 80003f8:	371c      	adds	r7, #28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bcb0      	pop	{r4, r5, r7}
 80003fe:	4770      	bx	lr
 8000400:	08001445 	.word	0x08001445
 8000404:	20000290 	.word	0x20000290
 8000408:	2000069a 	.word	0x2000069a

0800040c <CanSend>:
CAN_Message TxMessage;

uint8_t sensor_for_calib; //Sensor calibration number
int8_t calib_select = -1; //Upper or lower calibration

void CanSend(uint8_t *TxData){
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000414:	e001      	b.n	800041a <CanSend+0xe>
		Error_Handler();
 8000416:	f000 fd91 	bl	8000f3c <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 800041a:	4809      	ldr	r0, [pc, #36]	@ (8000440 <CanSend+0x34>)
 800041c:	f003 f966 	bl	80036ec <HAL_FDCAN_GetTxFifoFreeLevel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d007      	beq.n	8000436 <CanSend+0x2a>
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	4906      	ldr	r1, [pc, #24]	@ (8000444 <CanSend+0x38>)
 800042a:	4805      	ldr	r0, [pc, #20]	@ (8000440 <CanSend+0x34>)
 800042c:	f003 f812 	bl	8003454 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1ef      	bne.n	8000416 <CanSend+0xa>
	}
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	200001e0 	.word	0x200001e0
 8000444:	200006a4 	.word	0x200006a4

08000448 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	2b00      	cmp	r3, #0
 800045a:	d024      	beq.n	80004a6 <HAL_FDCAN_RxFifo0Callback+0x5e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxMessage.Bytes) != HAL_OK)
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <HAL_FDCAN_RxFifo0Callback+0x68>)
 800045e:	4a15      	ldr	r2, [pc, #84]	@ (80004b4 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000460:	2140      	movs	r1, #64	@ 0x40
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f003 f83a 	bl	80034dc <HAL_FDCAN_GetRxMessage>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d002      	beq.n	8000474 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 800046e:	f000 fd65 	bl	8000f3c <Error_Handler>
 8000472:	e00e      	b.n	8000492 <HAL_FDCAN_RxFifo0Callback+0x4a>
		}else{

			RxMessage.Id = RxHeader.Identifier;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	b29a      	uxth	r2, r3
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <HAL_FDCAN_RxFifo0Callback+0x70>)
 800047c:	801a      	strh	r2, [r3, #0]
			RxMessage.DLC = RxHeader.DataLength;
 800047e:	4b0d      	ldr	r3, [pc, #52]	@ (80004b4 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	b2da      	uxtb	r2, r3
 8000484:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000486:	709a      	strb	r2, [r3, #2]

			decode(RxMessage);
 8000488:	4b0b      	ldr	r3, [pc, #44]	@ (80004b8 <HAL_FDCAN_RxFifo0Callback+0x70>)
 800048a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800048e:	f000 f8fd 	bl	800068c <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000492:	2200      	movs	r2, #0
 8000494:	2101      	movs	r1, #1
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f003 f93a 	bl	8003710 <HAL_FDCAN_ActivateNotification>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <HAL_FDCAN_RxFifo0Callback+0x5e>
		{
			/* Notification Error */
			Error_Handler();
 80004a2:	f000 fd4b 	bl	8000f3c <Error_Handler>
		}
	}
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	2000002f 	.word	0x2000002f
 80004b4:	200006c8 	.word	0x200006c8
 80004b8:	2000002c 	.word	0x2000002c

080004bc <print>:



void print(uint16_t select){
 80004bc:	b5b0      	push	{r4, r5, r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	80fb      	strh	r3, [r7, #6]

		if(sensors[select].CAN_ID){
 80004c6:	88fa      	ldrh	r2, [r7, #6]
 80004c8:	492e      	ldr	r1, [pc, #184]	@ (8000584 <print+0xc8>)
 80004ca:	4613      	mov	r3, r2
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4413      	add	r3, r2
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	440b      	add	r3, r1
 80004d4:	3304      	adds	r3, #4
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d04f      	beq.n	800057c <print+0xc0>

			sensors[select].data = sensors[select].transfer_function(1,sensors[select].averages, &sensors[select]);
 80004dc:	88fa      	ldrh	r2, [r7, #6]
 80004de:	4929      	ldr	r1, [pc, #164]	@ (8000584 <print+0xc8>)
 80004e0:	4613      	mov	r3, r2
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	4413      	add	r3, r2
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	440b      	add	r3, r1
 80004ea:	681d      	ldr	r5, [r3, #0]
 80004ec:	88fa      	ldrh	r2, [r7, #6]
 80004ee:	4925      	ldr	r1, [pc, #148]	@ (8000584 <print+0xc8>)
 80004f0:	4613      	mov	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	4413      	add	r3, r2
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	440b      	add	r3, r1
 80004fa:	3308      	adds	r3, #8
 80004fc:	6819      	ldr	r1, [r3, #0]
 80004fe:	88fa      	ldrh	r2, [r7, #6]
 8000500:	4613      	mov	r3, r2
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	4413      	add	r3, r2
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	4a1e      	ldr	r2, [pc, #120]	@ (8000584 <print+0xc8>)
 800050a:	4413      	add	r3, r2
 800050c:	88fc      	ldrh	r4, [r7, #6]
 800050e:	461a      	mov	r2, r3
 8000510:	2001      	movs	r0, #1
 8000512:	47a8      	blx	r5
 8000514:	4603      	mov	r3, r0
 8000516:	4619      	mov	r1, r3
 8000518:	4a1a      	ldr	r2, [pc, #104]	@ (8000584 <print+0xc8>)
 800051a:	4623      	mov	r3, r4
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	4423      	add	r3, r4
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	4413      	add	r3, r2
 8000524:	330e      	adds	r3, #14
 8000526:	460a      	mov	r2, r1
 8000528:	801a      	strh	r2, [r3, #0]
			TxMessage.Bytes[0] = sensors[select].data;
 800052a:	88fa      	ldrh	r2, [r7, #6]
 800052c:	4915      	ldr	r1, [pc, #84]	@ (8000584 <print+0xc8>)
 800052e:	4613      	mov	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	4413      	add	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	330e      	adds	r3, #14
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b12      	ldr	r3, [pc, #72]	@ (8000588 <print+0xcc>)
 8000540:	70da      	strb	r2, [r3, #3]
			TxMessage.Bytes[1] = sensors[select].data >> 8;
 8000542:	88fa      	ldrh	r2, [r7, #6]
 8000544:	490f      	ldr	r1, [pc, #60]	@ (8000584 <print+0xc8>)
 8000546:	4613      	mov	r3, r2
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	4413      	add	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	440b      	add	r3, r1
 8000550:	330e      	adds	r3, #14
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	0a1b      	lsrs	r3, r3, #8
 8000556:	b29b      	uxth	r3, r3
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <print+0xcc>)
 800055c:	711a      	strb	r2, [r3, #4]
			TxHeader.Identifier = sensors[select].CAN_ID;
 800055e:	88fa      	ldrh	r2, [r7, #6]
 8000560:	4908      	ldr	r1, [pc, #32]	@ (8000584 <print+0xc8>)
 8000562:	4613      	mov	r3, r2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	4413      	add	r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	440b      	add	r3, r1
 800056c:	3304      	adds	r3, #4
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b06      	ldr	r3, [pc, #24]	@ (800058c <print+0xd0>)
 8000574:	601a      	str	r2, [r3, #0]

			CanSend(TxMessage.Bytes);
 8000576:	4806      	ldr	r0, [pc, #24]	@ (8000590 <print+0xd4>)
 8000578:	f7ff ff48 	bl	800040c <CanSend>
		}

}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bdb0      	pop	{r4, r5, r7, pc}
 8000584:	20000290 	.word	0x20000290
 8000588:	20000038 	.word	0x20000038
 800058c:	200006a4 	.word	0x200006a4
 8000590:	2000003b 	.word	0x2000003b

08000594 <calibration>:

}

uint8_t calibration_counter = 0;
uint16_t calibration_value = 0;
void calibration(){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

	if(calib_select == -1){
 8000598:	4b36      	ldr	r3, [pc, #216]	@ (8000674 <calibration+0xe0>)
 800059a:	f993 3000 	ldrsb.w	r3, [r3]
 800059e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005a2:	d061      	beq.n	8000668 <calibration+0xd4>
		return;
	}
	else{

		calibration_counter++;
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <calibration+0xe4>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b32      	ldr	r3, [pc, #200]	@ (8000678 <calibration+0xe4>)
 80005ae:	701a      	strb	r2, [r3, #0]
		calibration_value += (sensors[sensor_for_calib].averages - calibration_value) / calibration_counter;
 80005b0:	4b32      	ldr	r3, [pc, #200]	@ (800067c <calibration+0xe8>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	4a32      	ldr	r2, [pc, #200]	@ (8000680 <calibration+0xec>)
 80005b8:	460b      	mov	r3, r1
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	440b      	add	r3, r1
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	3308      	adds	r3, #8
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000684 <calibration+0xf0>)
 80005c8:	8812      	ldrh	r2, [r2, #0]
 80005ca:	1a9b      	subs	r3, r3, r2
 80005cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000678 <calibration+0xe4>)
 80005ce:	7812      	ldrb	r2, [r2, #0]
 80005d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000684 <calibration+0xf0>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4b29      	ldr	r3, [pc, #164]	@ (8000684 <calibration+0xf0>)
 80005e0:	801a      	strh	r2, [r3, #0]

		if(calibration_counter > 3000 / CAN_interval){
 80005e2:	4b25      	ldr	r3, [pc, #148]	@ (8000678 <calibration+0xe4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <calibration+0xf4>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80005f2:	fb93 f3f1 	sdiv	r3, r3, r1
 80005f6:	429a      	cmp	r2, r3
 80005f8:	dd37      	ble.n	800066a <calibration+0xd6>

			calibration_value = calibration_value / calibration_counter;
 80005fa:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <calibration+0xf0>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <calibration+0xe4>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	fb92 f3f3 	sdiv	r3, r2, r3
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <calibration+0xf0>)
 800060c:	801a      	strh	r2, [r3, #0]

			if(calib_select == 0)
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <calibration+0xe0>)
 8000610:	f993 3000 	ldrsb.w	r3, [r3]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d10d      	bne.n	8000634 <calibration+0xa0>
				sensors[sensor_for_calib].low_adc = calibration_value;
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <calibration+0xe8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <calibration+0xf0>)
 8000620:	8818      	ldrh	r0, [r3, #0]
 8000622:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <calibration+0xec>)
 8000624:	460b      	mov	r3, r1
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	440b      	add	r3, r1
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4413      	add	r3, r2
 800062e:	3310      	adds	r3, #16
 8000630:	4602      	mov	r2, r0
 8000632:	801a      	strh	r2, [r3, #0]
			if(calib_select == 1)
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <calibration+0xe0>)
 8000636:	f993 3000 	ldrsb.w	r3, [r3]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d10d      	bne.n	800065a <calibration+0xc6>
				sensors[sensor_for_calib].high_adc = calibration_value;
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <calibration+0xe8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4619      	mov	r1, r3
 8000644:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <calibration+0xf0>)
 8000646:	8818      	ldrh	r0, [r3, #0]
 8000648:	4a0d      	ldr	r2, [pc, #52]	@ (8000680 <calibration+0xec>)
 800064a:	460b      	mov	r3, r1
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	440b      	add	r3, r1
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	3312      	adds	r3, #18
 8000656:	4602      	mov	r2, r0
 8000658:	801a      	strh	r2, [r3, #0]


			calib_select = -1;
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <calibration+0xe0>)
 800065c:	22ff      	movs	r2, #255	@ 0xff
 800065e:	701a      	strb	r2, [r3, #0]
			calibration_counter = 0;
 8000660:	4b05      	ldr	r3, [pc, #20]	@ (8000678 <calibration+0xe4>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e000      	b.n	800066a <calibration+0xd6>
		return;
 8000668:	bf00      	nop
		}

	}
}
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000
 8000678:	20000045 	.word	0x20000045
 800067c:	20000044 	.word	0x20000044
 8000680:	20000290 	.word	0x20000290
 8000684:	20000046 	.word	0x20000046
 8000688:	2000069a 	.word	0x2000069a

0800068c <decode>:

void decode(CAN_Message msg){
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	switch(msg.Id){
 8000698:	88bb      	ldrh	r3, [r7, #4]
 800069a:	2b1f      	cmp	r3, #31
 800069c:	d107      	bne.n	80006ae <decode+0x22>
		case CAN_CALIB_ID:
			sensor_for_calib = msg.Bytes[0];
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <decode+0x30>)
 80006a2:	701a      	strb	r2, [r3, #0]
			calib_select = msg.Bytes[1];
 80006a4:	7a3b      	ldrb	r3, [r7, #8]
 80006a6:	b25a      	sxtb	r2, r3
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <decode+0x34>)
 80006aa:	701a      	strb	r2, [r3, #0]
			break;
 80006ac:	bf00      	nop
	}
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000044 	.word	0x20000044
 80006c0:	20000000 	.word	0x20000000

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 ff10 	bl	80014ee <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 80006ce:	f7ff fe03 	bl	80002d8 <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f863 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f000 fb23 	bl	8000d20 <MX_GPIO_Init>
  MX_DMA_Init();
 80006da:	f000 faef 	bl	8000cbc <MX_DMA_Init>
  MX_ADC1_Init();
 80006de:	f000 f89d 	bl	800081c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 80006e2:	f000 fa1d 	bl	8000b20 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 80006e6:	f000 fa9b 	bl	8000c20 <MX_TIM3_Init>
  MX_ADC2_Init();
 80006ea:	f000 f961 	bl	80009b0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
 80006ee:	4822      	ldr	r0, [pc, #136]	@ (8000778 <main+0xb4>)
 80006f0:	f004 fcfa 	bl	80050e8 <HAL_TIM_Base_Start_IT>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <main+0x3a>
 80006fa:	f000 fc1f 	bl	8000f3c <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 80006fe:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <main+0xb8>)
 8000700:	6a1b      	ldr	r3, [r3, #32]
 8000702:	461a      	mov	r2, r3
 8000704:	491e      	ldr	r1, [pc, #120]	@ (8000780 <main+0xbc>)
 8000706:	481d      	ldr	r0, [pc, #116]	@ (800077c <main+0xb8>)
 8000708:	f001 fb04 	bl	8001d14 <HAL_ADC_Start_DMA>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <main+0x52>
 8000712:	f000 fc13 	bl	8000f3c <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADC2Data, hadc2.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000716:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <main+0xc0>)
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	461a      	mov	r2, r3
 800071c:	491a      	ldr	r1, [pc, #104]	@ (8000788 <main+0xc4>)
 800071e:	4819      	ldr	r0, [pc, #100]	@ (8000784 <main+0xc0>)
 8000720:	f001 faf8 	bl	8001d14 <HAL_ADC_Start_DMA>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <main+0x6a>
 800072a:	f000 fc07 	bl	8000f3c <Error_Handler>

  uint8_t counter = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <main+0xc8>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d1fb      	bne.n	8000732 <main+0x6e>
		  if(millis % CAN_interval == 0){
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <main+0xcc>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a15      	ldr	r2, [pc, #84]	@ (8000794 <main+0xd0>)
 8000740:	8812      	ldrh	r2, [r2, #0]
 8000742:	fbb3 f1f2 	udiv	r1, r3, r2
 8000746:	fb01 f202 	mul.w	r2, r1, r2
 800074a:	1a9b      	subs	r3, r3, r2
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1f0      	bne.n	8000732 <main+0x6e>
			print(counter);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	b29b      	uxth	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff feb1 	bl	80004bc <print>
			  calibration();
 800075a:	f7ff ff1b 	bl	8000594 <calibration>
			  counter++;
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	3301      	adds	r3, #1
 8000762:	71fb      	strb	r3, [r7, #7]
			  if(counter == SENSOR_NUM){
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b0c      	cmp	r3, #12
 8000768:	d1e3      	bne.n	8000732 <main+0x6e>
				  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 800076a:	2140      	movs	r1, #64	@ 0x40
 800076c:	480a      	ldr	r0, [pc, #40]	@ (8000798 <main+0xd4>)
 800076e:	f003 fcaf 	bl	80040d0 <HAL_GPIO_TogglePin>
				  counter = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
	  if(CAN_enable == 1){
 8000776:	e7dc      	b.n	8000732 <main+0x6e>
 8000778:	20000244 	.word	0x20000244
 800077c:	20000048 	.word	0x20000048
 8000780:	20000380 	.word	0x20000380
 8000784:	200000b4 	.word	0x200000b4
 8000788:	2000038c 	.word	0x2000038c
 800078c:	200006a0 	.word	0x200006a0
 8000790:	2000069c 	.word	0x2000069c
 8000794:	2000069a 	.word	0x2000069a
 8000798:	48000800 	.word	0x48000800

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	@ 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	2238      	movs	r2, #56	@ 0x38
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f005 f982 	bl	8005ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007c2:	f003 fc9f 	bl	8004104 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d0:	2340      	movs	r3, #64	@ 0x40
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0318 	add.w	r3, r7, #24
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fd45 	bl	800426c <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007e8:	f000 fba8 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f0:	2301      	movs	r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f004 f843 	bl	8004890 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000810:	f000 fb94 	bl	8000f3c <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	@ 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	@ 0x30
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2220      	movs	r2, #32
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f005 f93d 	bl	8005ab4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800083a:	4b56      	ldr	r3, [pc, #344]	@ (8000994 <MX_ADC1_Init+0x178>)
 800083c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000840:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000842:	4b54      	ldr	r3, [pc, #336]	@ (8000994 <MX_ADC1_Init+0x178>)
 8000844:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000848:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800084a:	4b52      	ldr	r3, [pc, #328]	@ (8000994 <MX_ADC1_Init+0x178>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000850:	4b50      	ldr	r3, [pc, #320]	@ (8000994 <MX_ADC1_Init+0x178>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000856:	4b4f      	ldr	r3, [pc, #316]	@ (8000994 <MX_ADC1_Init+0x178>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800085c:	4b4d      	ldr	r3, [pc, #308]	@ (8000994 <MX_ADC1_Init+0x178>)
 800085e:	2201      	movs	r2, #1
 8000860:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000862:	4b4c      	ldr	r3, [pc, #304]	@ (8000994 <MX_ADC1_Init+0x178>)
 8000864:	2204      	movs	r2, #4
 8000866:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000868:	4b4a      	ldr	r3, [pc, #296]	@ (8000994 <MX_ADC1_Init+0x178>)
 800086a:	2200      	movs	r2, #0
 800086c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800086e:	4b49      	ldr	r3, [pc, #292]	@ (8000994 <MX_ADC1_Init+0x178>)
 8000870:	2201      	movs	r2, #1
 8000872:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8000874:	4b47      	ldr	r3, [pc, #284]	@ (8000994 <MX_ADC1_Init+0x178>)
 8000876:	2206      	movs	r2, #6
 8000878:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800087a:	4b46      	ldr	r3, [pc, #280]	@ (8000994 <MX_ADC1_Init+0x178>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000882:	4b44      	ldr	r3, [pc, #272]	@ (8000994 <MX_ADC1_Init+0x178>)
 8000884:	2200      	movs	r2, #0
 8000886:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000888:	4b42      	ldr	r3, [pc, #264]	@ (8000994 <MX_ADC1_Init+0x178>)
 800088a:	2200      	movs	r2, #0
 800088c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800088e:	4b41      	ldr	r3, [pc, #260]	@ (8000994 <MX_ADC1_Init+0x178>)
 8000890:	2201      	movs	r2, #1
 8000892:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000896:	4b3f      	ldr	r3, [pc, #252]	@ (8000994 <MX_ADC1_Init+0x178>)
 8000898:	2200      	movs	r2, #0
 800089a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800089c:	4b3d      	ldr	r3, [pc, #244]	@ (8000994 <MX_ADC1_Init+0x178>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008a4:	483b      	ldr	r0, [pc, #236]	@ (8000994 <MX_ADC1_Init+0x178>)
 80008a6:	f001 f8b1 	bl	8001a0c <HAL_ADC_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008b0:	f000 fb44 	bl	8000f3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008bc:	4619      	mov	r1, r3
 80008be:	4835      	ldr	r0, [pc, #212]	@ (8000994 <MX_ADC1_Init+0x178>)
 80008c0:	f002 f820 	bl	8002904 <HAL_ADCEx_MultiModeConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008ca:	f000 fb37 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008ce:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <MX_ADC1_Init+0x17c>)
 80008d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d2:	2306      	movs	r3, #6
 80008d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008da:	237f      	movs	r3, #127	@ 0x7f
 80008dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008de:	2304      	movs	r3, #4
 80008e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	482a      	ldr	r0, [pc, #168]	@ (8000994 <MX_ADC1_Init+0x178>)
 80008ec:	f001 fada 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008f6:	f000 fb21 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <MX_ADC1_Init+0x180>)
 80008fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008fe:	230c      	movs	r3, #12
 8000900:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	4619      	mov	r1, r3
 8000906:	4823      	ldr	r0, [pc, #140]	@ (8000994 <MX_ADC1_Init+0x178>)
 8000908:	f001 facc 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000912:	f000 fb13 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <MX_ADC1_Init+0x184>)
 8000918:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800091a:	2312      	movs	r3, #18
 800091c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	481c      	ldr	r0, [pc, #112]	@ (8000994 <MX_ADC1_Init+0x178>)
 8000924:	f001 fabe 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800092e:	f000 fb05 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <MX_ADC1_Init+0x188>)
 8000934:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000936:	2318      	movs	r3, #24
 8000938:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	4815      	ldr	r0, [pc, #84]	@ (8000994 <MX_ADC1_Init+0x178>)
 8000940:	f001 fab0 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800094a:	f000 faf7 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_ADC1_Init+0x18c>)
 8000950:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000952:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000956:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	480d      	ldr	r0, [pc, #52]	@ (8000994 <MX_ADC1_Init+0x178>)
 800095e:	f001 faa1 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000968:	f000 fae8 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_ADC1_Init+0x190>)
 800096e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000970:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000974:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4619      	mov	r1, r3
 800097a:	4806      	ldr	r0, [pc, #24]	@ (8000994 <MX_ADC1_Init+0x178>)
 800097c:	f001 fa92 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000986:	f000 fad9 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	3730      	adds	r7, #48	@ 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000048 	.word	0x20000048
 8000998:	04300002 	.word	0x04300002
 800099c:	08600004 	.word	0x08600004
 80009a0:	0c900008 	.word	0x0c900008
 80009a4:	10c00010 	.word	0x10c00010
 80009a8:	32601000 	.word	0x32601000
 80009ac:	3ef08000 	.word	0x3ef08000

080009b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b6:	463b      	mov	r3, r7
 80009b8:	2220      	movs	r2, #32
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f005 f879 	bl	8005ab4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009c2:	4b4f      	ldr	r3, [pc, #316]	@ (8000b00 <MX_ADC2_Init+0x150>)
 80009c4:	4a4f      	ldr	r2, [pc, #316]	@ (8000b04 <MX_ADC2_Init+0x154>)
 80009c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80009c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000b00 <MX_ADC2_Init+0x150>)
 80009ca:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80009ce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009d0:	4b4b      	ldr	r3, [pc, #300]	@ (8000b00 <MX_ADC2_Init+0x150>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d6:	4b4a      	ldr	r3, [pc, #296]	@ (8000b00 <MX_ADC2_Init+0x150>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80009dc:	4b48      	ldr	r3, [pc, #288]	@ (8000b00 <MX_ADC2_Init+0x150>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009e2:	4b47      	ldr	r3, [pc, #284]	@ (8000b00 <MX_ADC2_Init+0x150>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e8:	4b45      	ldr	r3, [pc, #276]	@ (8000b00 <MX_ADC2_Init+0x150>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009ee:	4b44      	ldr	r3, [pc, #272]	@ (8000b00 <MX_ADC2_Init+0x150>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80009f4:	4b42      	ldr	r3, [pc, #264]	@ (8000b00 <MX_ADC2_Init+0x150>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 6;
 80009fa:	4b41      	ldr	r3, [pc, #260]	@ (8000b00 <MX_ADC2_Init+0x150>)
 80009fc:	2206      	movs	r2, #6
 80009fe:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a00:	4b3f      	ldr	r3, [pc, #252]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a08:	4b3d      	ldr	r3, [pc, #244]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000a14:	4b3a      	ldr	r3, [pc, #232]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a1c:	4b38      	ldr	r3, [pc, #224]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000a22:	4b37      	ldr	r3, [pc, #220]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a2a:	4835      	ldr	r0, [pc, #212]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000a2c:	f000 ffee 	bl	8001a0c <HAL_ADC_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000a36:	f000 fa81 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a3a:	4b33      	ldr	r3, [pc, #204]	@ (8000b08 <MX_ADC2_Init+0x158>)
 8000a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a46:	237f      	movs	r3, #127	@ 0x7f
 8000a48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a52:	463b      	mov	r3, r7
 8000a54:	4619      	mov	r1, r3
 8000a56:	482a      	ldr	r0, [pc, #168]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000a58:	f001 fa24 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000a62:	f000 fa6b 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a66:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <MX_ADC2_Init+0x15c>)
 8000a68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4619      	mov	r1, r3
 8000a72:	4823      	ldr	r0, [pc, #140]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000a74:	f001 fa16 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000a7e:	f000 fa5d 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a82:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <MX_ADC2_Init+0x160>)
 8000a84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a86:	2312      	movs	r3, #18
 8000a88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	481c      	ldr	r0, [pc, #112]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000a90:	f001 fa08 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8000a9a:	f000 fa4f 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <MX_ADC2_Init+0x164>)
 8000aa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000aa2:	2318      	movs	r3, #24
 8000aa4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4815      	ldr	r0, [pc, #84]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000aac:	f001 f9fa 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8000ab6:	f000 fa41 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <MX_ADC2_Init+0x168>)
 8000abc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000abe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ac2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000aca:	f001 f9eb 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8000ad4:	f000 fa32 	bl	8000f3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000ad8:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <MX_ADC2_Init+0x16c>)
 8000ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000adc:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000ae0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <MX_ADC2_Init+0x150>)
 8000ae8:	f001 f9dc 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 8000af2:	f000 fa23 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000b4 	.word	0x200000b4
 8000b04:	50000100 	.word	0x50000100
 8000b08:	0c900008 	.word	0x0c900008
 8000b0c:	10c00010 	.word	0x10c00010
 8000b10:	14f00020 	.word	0x14f00020
 8000b14:	2e300800 	.word	0x2e300800
 8000b18:	36902000 	.word	0x36902000
 8000b1c:	47520000 	.word	0x47520000

08000b20 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b24:	4b39      	ldr	r3, [pc, #228]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b26:	4a3a      	ldr	r2, [pc, #232]	@ (8000c10 <MX_FDCAN1_Init+0xf0>)
 8000b28:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000b2a:	4b38      	ldr	r3, [pc, #224]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b30:	4b36      	ldr	r3, [pc, #216]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b36:	4b35      	ldr	r3, [pc, #212]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000b3c:	4b33      	ldr	r3, [pc, #204]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b42:	4b32      	ldr	r3, [pc, #200]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b48:	4b30      	ldr	r3, [pc, #192]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b54:	4b2d      	ldr	r3, [pc, #180]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b5c:	220d      	movs	r2, #13
 8000b5e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b60:	4b2a      	ldr	r3, [pc, #168]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b66:	4b29      	ldr	r3, [pc, #164]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b6c:	4b27      	ldr	r3, [pc, #156]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b72:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b78:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 8000b7e:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b80:	221c      	movs	r2, #28
 8000b82:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b84:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b8a:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b90:	481e      	ldr	r0, [pc, #120]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000b92:	f002 fadd 	bl	8003150 <HAL_FDCAN_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000b9c:	f000 f9ce 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET); CAN_enable = 1;}
 8000ba0:	481a      	ldr	r0, [pc, #104]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000ba2:	f002 fc2f 	bl	8003404 <HAL_FDCAN_Start>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <MX_FDCAN1_Init+0x92>
 8000bac:	f000 f9c6 	bl	8000f3c <Error_Handler>
 8000bb0:	e008      	b.n	8000bc4 <MX_FDCAN1_Init+0xa4>
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bb8:	4816      	ldr	r0, [pc, #88]	@ (8000c14 <MX_FDCAN1_Init+0xf4>)
 8000bba:	f003 fa71 	bl	80040a0 <HAL_GPIO_WritePin>
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_FDCAN1_Init+0xf8>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <MX_FDCAN1_Init+0xec>)
 8000bca:	f002 fda1 	bl	8003710 <HAL_FDCAN_ActivateNotification>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_FDCAN1_Init+0xb8>
 8000bd4:	f000 f9b2 	bl	8000f3c <Error_Handler>



  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_FDCAN1_Init+0xfc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_FDCAN1_Init+0xfc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <MX_FDCAN1_Init+0xfc>)
 8000be6:	2202      	movs	r2, #2
 8000be8:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_FDCAN1_Init+0xfc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <MX_FDCAN1_Init+0xfc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_FDCAN1_Init+0xfc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <MX_FDCAN1_Init+0xfc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_FDCAN1_Init+0xfc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200001e0 	.word	0x200001e0
 8000c10:	40006400 	.word	0x40006400
 8000c14:	48000400 	.word	0x48000400
 8000c18:	200006a0 	.word	0x200006a0
 8000c1c:	200006a4 	.word	0x200006a4

08000c20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c40:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb8 <MX_TIM3_Init+0x98>)
 8000c42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c46:	220f      	movs	r2, #15
 8000c48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c64:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c66:	f004 f9e7 	bl	8005038 <HAL_TIM_Base_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c70:	f000 f964 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480c      	ldr	r0, [pc, #48]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c82:	f004 fbeb 	bl	800545c <HAL_TIM_ConfigClockSource>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c8c:	f000 f956 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_TIM3_Init+0x94>)
 8000c9e:	f004 fe41 	bl	8005924 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ca8:	f000 f948 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000244 	.word	0x20000244
 8000cb8:	40000400 	.word	0x40000400

08000cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <MX_DMA_Init+0x60>)
 8000cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cc6:	4a15      	ldr	r2, [pc, #84]	@ (8000d1c <MX_DMA_Init+0x60>)
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <MX_DMA_Init+0x60>)
 8000cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <MX_DMA_Init+0x60>)
 8000cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cde:	4a0f      	ldr	r2, [pc, #60]	@ (8000d1c <MX_DMA_Init+0x60>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <MX_DMA_Init+0x60>)
 8000ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	200b      	movs	r0, #11
 8000cf8:	f001 ff83 	bl	8002c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cfc:	200b      	movs	r0, #11
 8000cfe:	f001 ff9a 	bl	8002c36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	200c      	movs	r0, #12
 8000d08:	f001 ff7b 	bl	8002c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d0c:	200c      	movs	r0, #12
 8000d0e:	f001 ff92 	bl	8002c36 <HAL_NVIC_EnableIRQ>

}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000

08000d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d36:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <MX_GPIO_Init+0xd0>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000df0 <MX_GPIO_Init+0xd0>)
 8000d3c:	f043 0320 	orr.w	r3, r3, #32
 8000d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d42:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <MX_GPIO_Init+0xd0>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <MX_GPIO_Init+0xd0>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d52:	4a27      	ldr	r2, [pc, #156]	@ (8000df0 <MX_GPIO_Init+0xd0>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5a:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <MX_GPIO_Init+0xd0>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <MX_GPIO_Init+0xd0>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	4a21      	ldr	r2, [pc, #132]	@ (8000df0 <MX_GPIO_Init+0xd0>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d72:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_GPIO_Init+0xd0>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <MX_GPIO_Init+0xd0>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	4a1b      	ldr	r2, [pc, #108]	@ (8000df0 <MX_GPIO_Init+0xd0>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <MX_GPIO_Init+0xd0>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d9c:	4815      	ldr	r0, [pc, #84]	@ (8000df4 <MX_GPIO_Init+0xd4>)
 8000d9e:	f003 f97f 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2140      	movs	r1, #64	@ 0x40
 8000da6:	4814      	ldr	r0, [pc, #80]	@ (8000df8 <MX_GPIO_Init+0xd8>)
 8000da8:	f003 f97a 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000dac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480b      	ldr	r0, [pc, #44]	@ (8000df4 <MX_GPIO_Init+0xd4>)
 8000dc6:	f002 ffe9 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000dca:	2340      	movs	r3, #64	@ 0x40
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <MX_GPIO_Init+0xd8>)
 8000de2:	f002 ffdb 	bl	8003d9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	@ 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000
 8000df4:	48000400 	.word	0x48000400
 8000df8:	48000800 	.word	0x48000800

08000dfc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	@ 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
    // Use a static flag to ensure both ADCs have finished a conversion cycle.
    // Bit 0 for ADC1, Bit 1 for ADC2.
    static uint8_t adc_done = 0;

    if (hadc->Instance == ADC1) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e0c:	d11f      	bne.n	8000e4e <HAL_ADC_ConvCpltCallback+0x52>
        // Store ADC1 conversion results into sensors[0..5]
        for (int j = 0; j < hadc->Init.NbrOfConversion; j++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	e00f      	b.n	8000e34 <HAL_ADC_ConvCpltCallback+0x38>
            all_raw_data[j][AVE_POS] = ADC1Data[j];
 8000e14:	4b42      	ldr	r3, [pc, #264]	@ (8000f20 <HAL_ADC_ConvCpltCallback+0x124>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	4a42      	ldr	r2, [pc, #264]	@ (8000f24 <HAL_ADC_ConvCpltCallback+0x128>)
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000e22:	4a41      	ldr	r2, [pc, #260]	@ (8000f28 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	015b      	lsls	r3, r3, #5
 8000e28:	4403      	add	r3, r0
 8000e2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 0; j < hadc->Init.NbrOfConversion; j++) {
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3301      	adds	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a1a      	ldr	r2, [r3, #32]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d8ea      	bhi.n	8000e14 <HAL_ADC_ConvCpltCallback+0x18>
        }
        adc_done |= 0x01; // Mark ADC1 as done for this cycle.
 8000e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0x130>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b38      	ldr	r3, [pc, #224]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0x130>)
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e024      	b.n	8000e98 <HAL_ADC_ConvCpltCallback+0x9c>
    }
    else if (hadc->Instance == ADC2) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a37      	ldr	r2, [pc, #220]	@ (8000f30 <HAL_ADC_ConvCpltCallback+0x134>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d11f      	bne.n	8000e98 <HAL_ADC_ConvCpltCallback+0x9c>
        // Store ADC2 conversion results into sensors[6..11]
        for (int j = 0; j < hadc->Init.NbrOfConversion; j++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	e010      	b.n	8000e80 <HAL_ADC_ConvCpltCallback+0x84>
            all_raw_data[j + 6][AVE_POS] = ADC2Data[j];
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	3306      	adds	r3, #6
 8000e62:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <HAL_ADC_ConvCpltCallback+0x124>)
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	4610      	mov	r0, r2
 8000e68:	4932      	ldr	r1, [pc, #200]	@ (8000f34 <HAL_ADC_ConvCpltCallback+0x138>)
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000e70:	4a2d      	ldr	r2, [pc, #180]	@ (8000f28 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000e72:	015b      	lsls	r3, r3, #5
 8000e74:	4403      	add	r3, r0
 8000e76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 0; j < hadc->Init.NbrOfConversion; j++) {
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a1a      	ldr	r2, [r3, #32]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d8e9      	bhi.n	8000e5e <HAL_ADC_ConvCpltCallback+0x62>
        }
        adc_done |= 0x02; // Mark ADC2 as done for this cycle.
 8000e8a:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0x130>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0x130>)
 8000e96:	701a      	strb	r2, [r3, #0]
    }

    // Once both ADC1 and ADC2 have provided data:
    if (adc_done == 0x03) {
 8000e98:	4b24      	ldr	r3, [pc, #144]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0x130>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d139      	bne.n	8000f14 <HAL_ADC_ConvCpltCallback+0x118>
        adc_done = 0;  // Reset the flag for the next conversion cycle.
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0x130>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
        AVE_POS++;     // Advance the sample index.
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <HAL_ADC_ConvCpltCallback+0x124>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <HAL_ADC_ConvCpltCallback+0x124>)
 8000eb0:	701a      	strb	r2, [r3, #0]

        // When we have collected enough samples for a rolling average...
        if (AVE_POS >= ROLLING_AVE) {
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <HAL_ADC_ConvCpltCallback+0x124>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b1f      	cmp	r3, #31
 8000eb8:	d92c      	bls.n	8000f14 <HAL_ADC_ConvCpltCallback+0x118>
            // For each sensor (total SENSOR_NUM = 12 sensors)
            for (int i = 0; i < SENSOR_NUM; i++) {
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	e023      	b.n	8000f08 <HAL_ADC_ConvCpltCallback+0x10c>
                uint32_t sum = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
                for (int z = 0; z < ROLLING_AVE; z++) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e00d      	b.n	8000ee6 <HAL_ADC_ConvCpltCallback+0xea>
                    sum += all_raw_data[i][z];
 8000eca:	4917      	ldr	r1, [pc, #92]	@ (8000f28 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	015a      	lsls	r2, r3, #5
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4413      	add	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
                for (int z = 0; z < ROLLING_AVE; z++) {
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2b1f      	cmp	r3, #31
 8000eea:	ddee      	ble.n	8000eca <HAL_ADC_ConvCpltCallback+0xce>
                }
                // Store the average in the sensor structure.
                sensors[i].averages = sum / ROLLING_AVE;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	0959      	lsrs	r1, r3, #5
 8000ef0:	4811      	ldr	r0, [pc, #68]	@ (8000f38 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4403      	add	r3, r0
 8000efe:	3308      	adds	r3, #8
 8000f00:	6019      	str	r1, [r3, #0]
            for (int i = 0; i < SENSOR_NUM; i++) {
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b0b      	cmp	r3, #11
 8000f0c:	ddd8      	ble.n	8000ec0 <HAL_ADC_ConvCpltCallback+0xc4>
            }
            AVE_POS = 0;  // Reset the sample index for the next averaging period.
 8000f0e:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <HAL_ADC_ConvCpltCallback+0x124>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000f14:	bf00      	nop
 8000f16:	3724      	adds	r7, #36	@ 0x24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	20000698 	.word	0x20000698
 8000f24:	20000380 	.word	0x20000380
 8000f28:	20000398 	.word	0x20000398
 8000f2c:	200006f0 	.word	0x200006f0
 8000f30:	50000100 	.word	0x50000100
 8000f34:	2000038c 	.word	0x2000038c
 8000f38:	20000290 	.word	0x20000290

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <Error_Handler+0x8>

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f52:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6a:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f7e:	f003 f965 	bl	800424c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09e      	sub	sp, #120	@ 0x78
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	f107 0320 	add.w	r3, r7, #32
 8000fac:	2244      	movs	r2, #68	@ 0x44
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 fd7f 	bl	8005ab4 <memset>
  if(hadc->Instance==ADC1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fbe:	f040 8082 	bne.w	80010c6 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fc6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fc8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 fe40 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000fde:	f7ff ffad 	bl	8000f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fe2:	4b7e      	ldr	r3, [pc, #504]	@ (80011dc <HAL_ADC_MspInit+0x24c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4a7c      	ldr	r2, [pc, #496]	@ (80011dc <HAL_ADC_MspInit+0x24c>)
 8000fea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fec:	4b7b      	ldr	r3, [pc, #492]	@ (80011dc <HAL_ADC_MspInit+0x24c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d10b      	bne.n	800100c <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ff4:	4b7a      	ldr	r3, [pc, #488]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff8:	4a79      	ldr	r2, [pc, #484]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 8000ffa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001000:	4b77      	ldr	r3, [pc, #476]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001004:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	4b74      	ldr	r3, [pc, #464]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001010:	4a73      	ldr	r2, [pc, #460]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001018:	4b71      	ldr	r3, [pc, #452]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	61bb      	str	r3, [r7, #24]
 8001022:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001024:	4b6e      	ldr	r3, [pc, #440]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001028:	4a6d      	ldr	r2, [pc, #436]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001030:	4b6b      	ldr	r3, [pc, #428]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697b      	ldr	r3, [r7, #20]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_in0_Pin|ADC2_in1_Pin|ADC1_in2_Pin|ADC1_in3_Pin;
 800103c:	230f      	movs	r3, #15
 800103e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001040:	2303      	movs	r3, #3
 8001042:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800104c:	4619      	mov	r1, r3
 800104e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001052:	f002 fea3 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_in14_Pin|ADC1_in13_Pin;
 8001056:	2303      	movs	r3, #3
 8001058:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105a:	2303      	movs	r3, #3
 800105c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001066:	4619      	mov	r1, r3
 8001068:	485e      	ldr	r0, [pc, #376]	@ (80011e4 <HAL_ADC_MspInit+0x254>)
 800106a:	f002 fe97 	bl	8003d9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800106e:	4b5e      	ldr	r3, [pc, #376]	@ (80011e8 <HAL_ADC_MspInit+0x258>)
 8001070:	4a5e      	ldr	r2, [pc, #376]	@ (80011ec <HAL_ADC_MspInit+0x25c>)
 8001072:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001074:	4b5c      	ldr	r3, [pc, #368]	@ (80011e8 <HAL_ADC_MspInit+0x258>)
 8001076:	2205      	movs	r2, #5
 8001078:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107a:	4b5b      	ldr	r3, [pc, #364]	@ (80011e8 <HAL_ADC_MspInit+0x258>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001080:	4b59      	ldr	r3, [pc, #356]	@ (80011e8 <HAL_ADC_MspInit+0x258>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001086:	4b58      	ldr	r3, [pc, #352]	@ (80011e8 <HAL_ADC_MspInit+0x258>)
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800108c:	4b56      	ldr	r3, [pc, #344]	@ (80011e8 <HAL_ADC_MspInit+0x258>)
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001094:	4b54      	ldr	r3, [pc, #336]	@ (80011e8 <HAL_ADC_MspInit+0x258>)
 8001096:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800109a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800109c:	4b52      	ldr	r3, [pc, #328]	@ (80011e8 <HAL_ADC_MspInit+0x258>)
 800109e:	2220      	movs	r2, #32
 80010a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010a2:	4b51      	ldr	r3, [pc, #324]	@ (80011e8 <HAL_ADC_MspInit+0x258>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010a8:	484f      	ldr	r0, [pc, #316]	@ (80011e8 <HAL_ADC_MspInit+0x258>)
 80010aa:	f001 fddf 	bl	8002c6c <HAL_DMA_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 80010b4:	f7ff ff42 	bl	8000f3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a4b      	ldr	r2, [pc, #300]	@ (80011e8 <HAL_ADC_MspInit+0x258>)
 80010bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80010be:	4a4a      	ldr	r2, [pc, #296]	@ (80011e8 <HAL_ADC_MspInit+0x258>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010c4:	e086      	b.n	80011d4 <HAL_ADC_MspInit+0x244>
  else if(hadc->Instance==ADC2)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a49      	ldr	r2, [pc, #292]	@ (80011f0 <HAL_ADC_MspInit+0x260>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	f040 8081 	bne.w	80011d4 <HAL_ADC_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fdb8 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_ADC_MspInit+0x162>
      Error_Handler();
 80010ee:	f7ff ff25 	bl	8000f3c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80010f2:	4b3a      	ldr	r3, [pc, #232]	@ (80011dc <HAL_ADC_MspInit+0x24c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a38      	ldr	r2, [pc, #224]	@ (80011dc <HAL_ADC_MspInit+0x24c>)
 80010fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80010fc:	4b37      	ldr	r3, [pc, #220]	@ (80011dc <HAL_ADC_MspInit+0x24c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d10b      	bne.n	800111c <HAL_ADC_MspInit+0x18c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001104:	4b36      	ldr	r3, [pc, #216]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001108:	4a35      	ldr	r2, [pc, #212]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 800110a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800110e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001110:	4b33      	ldr	r3, [pc, #204]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001114:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b30      	ldr	r3, [pc, #192]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001120:	4a2f      	ldr	r2, [pc, #188]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001128:	4b2d      	ldr	r3, [pc, #180]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001134:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001138:	4a29      	ldr	r2, [pc, #164]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001140:	4b27      	ldr	r3, [pc, #156]	@ (80011e0 <HAL_ADC_MspInit+0x250>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC1_in0_Pin|ADC2_in1_Pin|ADC2_in4_Pin|ADC2_in5_Pin
 800114c:	23f3      	movs	r3, #243	@ 0xf3
 800114e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001150:	2303      	movs	r3, #3
 8001152:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001162:	f002 fe1b 	bl	8003d9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_in8_Pin|ADC2_in15_Pin;
 8001166:	2330      	movs	r3, #48	@ 0x30
 8001168:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116a:	2303      	movs	r3, #3
 800116c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001172:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001176:	4619      	mov	r1, r3
 8001178:	481e      	ldr	r0, [pc, #120]	@ (80011f4 <HAL_ADC_MspInit+0x264>)
 800117a:	f002 fe0f 	bl	8003d9c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800117e:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <HAL_ADC_MspInit+0x268>)
 8001180:	4a1e      	ldr	r2, [pc, #120]	@ (80011fc <HAL_ADC_MspInit+0x26c>)
 8001182:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001184:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <HAL_ADC_MspInit+0x268>)
 8001186:	2224      	movs	r2, #36	@ 0x24
 8001188:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800118a:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <HAL_ADC_MspInit+0x268>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001190:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <HAL_ADC_MspInit+0x268>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <HAL_ADC_MspInit+0x268>)
 8001198:	2280      	movs	r2, #128	@ 0x80
 800119a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <HAL_ADC_MspInit+0x268>)
 800119e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011a2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_ADC_MspInit+0x268>)
 80011a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011aa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_ADC_MspInit+0x268>)
 80011ae:	2220      	movs	r2, #32
 80011b0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <HAL_ADC_MspInit+0x268>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80011b8:	480f      	ldr	r0, [pc, #60]	@ (80011f8 <HAL_ADC_MspInit+0x268>)
 80011ba:	f001 fd57 	bl	8002c6c <HAL_DMA_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_ADC_MspInit+0x238>
      Error_Handler();
 80011c4:	f7ff feba 	bl	8000f3c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a0b      	ldr	r2, [pc, #44]	@ (80011f8 <HAL_ADC_MspInit+0x268>)
 80011cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80011ce:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <HAL_ADC_MspInit+0x268>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80011d4:	bf00      	nop
 80011d6:	3778      	adds	r7, #120	@ 0x78
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200006f4 	.word	0x200006f4
 80011e0:	40021000 	.word	0x40021000
 80011e4:	48000400 	.word	0x48000400
 80011e8:	20000120 	.word	0x20000120
 80011ec:	40020008 	.word	0x40020008
 80011f0:	50000100 	.word	0x50000100
 80011f4:	48000800 	.word	0x48000800
 80011f8:	20000180 	.word	0x20000180
 80011fc:	4002001c 	.word	0x4002001c

08001200 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b09a      	sub	sp, #104	@ 0x68
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	2244      	movs	r2, #68	@ 0x44
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f004 fc47 	bl	8005ab4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a24      	ldr	r2, [pc, #144]	@ (80012bc <HAL_FDCAN_MspInit+0xbc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d141      	bne.n	80012b4 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001234:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001236:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800123a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fd09 	bl	8004c58 <HAL_RCCEx_PeriphCLKConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800124c:	f7ff fe76 	bl	8000f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <HAL_FDCAN_MspInit+0xc0>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001254:	4a1a      	ldr	r2, [pc, #104]	@ (80012c0 <HAL_FDCAN_MspInit+0xc0>)
 8001256:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800125a:	6593      	str	r3, [r2, #88]	@ 0x58
 800125c:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <HAL_FDCAN_MspInit+0xc0>)
 800125e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_FDCAN_MspInit+0xc0>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126c:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <HAL_FDCAN_MspInit+0xc0>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_FDCAN_MspInit+0xc0>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001280:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001284:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001292:	2309      	movs	r3, #9
 8001294:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800129a:	4619      	mov	r1, r3
 800129c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a0:	f002 fd7c 	bl	8003d9c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2015      	movs	r0, #21
 80012aa:	f001 fcaa 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80012ae:	2015      	movs	r0, #21
 80012b0:	f001 fcc1 	bl	8002c36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80012b4:	bf00      	nop
 80012b6:	3768      	adds	r7, #104	@ 0x68
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40006400 	.word	0x40006400
 80012c0:	40021000 	.word	0x40021000

080012c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001308 <HAL_TIM_Base_MspInit+0x44>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d113      	bne.n	80012fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_TIM_Base_MspInit+0x48>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	4a0c      	ldr	r2, [pc, #48]	@ (800130c <HAL_TIM_Base_MspInit+0x48>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_TIM_Base_MspInit+0x48>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	201d      	movs	r0, #29
 80012f4:	f001 fc85 	bl	8002c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012f8:	201d      	movs	r0, #29
 80012fa:	f001 fc9c 	bl	8002c36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40000400 	.word	0x40000400
 800130c:	40021000 	.word	0x40021000

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <NMI_Handler+0x4>

08001318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <MemManage_Handler+0x4>

08001328 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <UsageFault_Handler+0x4>

08001338 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001366:	f000 f915 	bl	8001594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001374:	4802      	ldr	r0, [pc, #8]	@ (8001380 <DMA1_Channel1_IRQHandler+0x10>)
 8001376:	f001 fd9c 	bl	8002eb2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000120 	.word	0x20000120

08001384 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001388:	4802      	ldr	r0, [pc, #8]	@ (8001394 <DMA1_Channel2_IRQHandler+0x10>)
 800138a:	f001 fd92 	bl	8002eb2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000180 	.word	0x20000180

08001398 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <FDCAN1_IT0_IRQHandler+0x10>)
 800139e:	f002 fa9d 	bl	80038dc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001e0 	.word	0x200001e0

080013ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
		millis++;
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <TIM3_IRQHandler+0x28>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a07      	ldr	r2, [pc, #28]	@ (80013d4 <TIM3_IRQHandler+0x28>)
 80013b8:	6013      	str	r3, [r2, #0]
		if(millis == 1000){
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <TIM3_IRQHandler+0x28>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013c2:	d102      	bne.n	80013ca <TIM3_IRQHandler+0x1e>
			CAN_enable = 1;
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <TIM3_IRQHandler+0x2c>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013ca:	4804      	ldr	r0, [pc, #16]	@ (80013dc <TIM3_IRQHandler+0x30>)
 80013cc:	f003 fef6 	bl	80051bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000069c 	.word	0x2000069c
 80013d8:	200006a0 	.word	0x200006a0
 80013dc:	20000244 	.word	0x20000244

080013e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <SystemInit+0x20>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <SystemInit+0x20>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <TF_3V3>:
#include "transfer_functions.h"
#include "functions.h"
#include "main.h"
#include "config.h"

uint16_t TF_3V3(uint8_t bytes, uint32_t raw, Sensor *sensor){
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	73fb      	strb	r3, [r7, #15]


	uint16_t max_volt = 3300;
 8001412:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001416:	82fb      	strh	r3, [r7, #22]

	uint16_t voltage = raw*max_volt / 4095;
 8001418:	8afb      	ldrh	r3, [r7, #22]
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	fb03 f202 	mul.w	r2, r3, r2
 8001420:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <TF_3V3+0x3c>)
 8001422:	fba3 1302 	umull	r1, r3, r3, r2
 8001426:	1ad2      	subs	r2, r2, r3
 8001428:	0852      	lsrs	r2, r2, #1
 800142a:	4413      	add	r3, r2
 800142c:	0adb      	lsrs	r3, r3, #11
 800142e:	82bb      	strh	r3, [r7, #20]
	return voltage;
 8001430:	8abb      	ldrh	r3, [r7, #20]
}
 8001432:	4618      	mov	r0, r3
 8001434:	371c      	adds	r7, #28
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	00100101 	.word	0x00100101

08001444 <TF_APPS2>:
		return 100 - apps;
	}
	return 0;
}

uint16_t TF_APPS2(uint8_t bytes, uint32_t raw, Sensor *sensor){
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	73fb      	strb	r3, [r7, #15]
	uint16_t max_pos = 100; //in percent
 8001452:	2364      	movs	r3, #100	@ 0x64
 8001454:	82fb      	strh	r3, [r7, #22]
#if CALIB_WORKING
	uint16_t min_raw = (sensor->calib_code % 2 == 1) ? 690 : sensor->low_adc;
	uint16_t max_raw = (sensor->calib_code > 2) ? 2130 : sensor->high_adc;
#else
	uint16_t min_raw = 690;
 8001456:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800145a:	82bb      	strh	r3, [r7, #20]
	uint16_t max_raw = 2130;
 800145c:	f640 0352 	movw	r3, #2130	@ 0x852
 8001460:	827b      	strh	r3, [r7, #18]
#endif


	if(raw > min_raw){
 8001462:	8abb      	ldrh	r3, [r7, #20]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	429a      	cmp	r2, r3
 8001468:	d910      	bls.n	800148c <TF_APPS2+0x48>
		uint16_t apps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 800146a:	8abb      	ldrh	r3, [r7, #20]
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	8afa      	ldrh	r2, [r7, #22]
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	8a79      	ldrh	r1, [r7, #18]
 8001478:	8aba      	ldrh	r2, [r7, #20]
 800147a:	1a8a      	subs	r2, r1, r2
 800147c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001480:	823b      	strh	r3, [r7, #16]
		return 100 - apps;
 8001482:	8a3b      	ldrh	r3, [r7, #16]
 8001484:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001488:	b29b      	uxth	r3, r3
 800148a:	e000      	b.n	800148e <TF_APPS2+0x4a>
	}
	return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800149c:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800149e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a0:	f7ff ff9e 	bl	80013e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014a6:	490d      	ldr	r1, [pc, #52]	@ (80014dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a8:	4a0d      	ldr	r2, [pc, #52]	@ (80014e0 <LoopForever+0xe>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014bc:	4c0a      	ldr	r4, [pc, #40]	@ (80014e8 <LoopForever+0x16>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80014ca:	f004 fafb 	bl	8005ac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ce:	f7ff f8f9 	bl	80006c4 <main>

080014d2 <LoopForever>:

LoopForever:
    b LoopForever
 80014d2:	e7fe      	b.n	80014d2 <LoopForever>
  ldr   r0, =_estack
 80014d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014e0:	08005b4c 	.word	0x08005b4c
  ldr r2, =_sbss
 80014e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014e8:	200006fc 	.word	0x200006fc

080014ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC1_2_IRQHandler>

080014ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f8:	2003      	movs	r0, #3
 80014fa:	f001 fb77 	bl	8002bec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014fe:	200f      	movs	r0, #15
 8001500:	f000 f80e 	bl	8001520 <HAL_InitTick>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	71fb      	strb	r3, [r7, #7]
 800150e:	e001      	b.n	8001514 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001510:	f7ff fd1a 	bl	8000f48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001514:	79fb      	ldrb	r3, [r7, #7]

}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800152c:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <HAL_InitTick+0x68>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d022      	beq.n	800157a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001534:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_InitTick+0x6c>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <HAL_InitTick+0x68>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001540:	fbb1 f3f3 	udiv	r3, r1, r3
 8001544:	fbb2 f3f3 	udiv	r3, r2, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fb82 	bl	8002c52 <HAL_SYSTICK_Config>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10f      	bne.n	8001574 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b0f      	cmp	r3, #15
 8001558:	d809      	bhi.n	800156e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155a:	2200      	movs	r2, #0
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	f04f 30ff 	mov.w	r0, #4294967295
 8001562:	f001 fb4e 	bl	8002c02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <HAL_InitTick+0x70>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	e007      	b.n	800157e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e004      	b.n	800157e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e001      	b.n	800157e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000000c 	.word	0x2000000c
 800158c:	20000004 	.word	0x20000004
 8001590:	20000008 	.word	0x20000008

08001594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001598:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <HAL_IncTick+0x1c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <HAL_IncTick+0x20>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a03      	ldr	r2, [pc, #12]	@ (80015b0 <HAL_IncTick+0x1c>)
 80015a4:	6013      	str	r3, [r2, #0]
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	200006f8 	.word	0x200006f8
 80015b4:	2000000c 	.word	0x2000000c

080015b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b03      	ldr	r3, [pc, #12]	@ (80015cc <HAL_GetTick+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	200006f8 	.word	0x200006f8

080015d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	609a      	str	r2, [r3, #8]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3360      	adds	r3, #96	@ 0x60
 800164a:	461a      	mov	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <LL_ADC_SetOffset+0x44>)
 800165a:	4013      	ands	r3, r2
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	4313      	orrs	r3, r2
 8001668:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001670:	bf00      	nop
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	03fff000 	.word	0x03fff000

08001680 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3360      	adds	r3, #96	@ 0x60
 800168e:	461a      	mov	r2, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3360      	adds	r3, #96	@ 0x60
 80016bc:	461a      	mov	r2, r3
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016d6:	bf00      	nop
 80016d8:	371c      	adds	r7, #28
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b087      	sub	sp, #28
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3360      	adds	r3, #96	@ 0x60
 80016f2:	461a      	mov	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	431a      	orrs	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3360      	adds	r3, #96	@ 0x60
 8001728:	461a      	mov	r2, r3
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	431a      	orrs	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	615a      	str	r2, [r3, #20]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800179a:	b480      	push	{r7}
 800179c:	b087      	sub	sp, #28
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3330      	adds	r3, #48	@ 0x30
 80017aa:	461a      	mov	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	4413      	add	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	211f      	movs	r1, #31
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	401a      	ands	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	0e9b      	lsrs	r3, r3, #26
 80017d2:	f003 011f 	and.w	r1, r3, #31
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017e6:	bf00      	nop
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b087      	sub	sp, #28
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3314      	adds	r3, #20
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	0e5b      	lsrs	r3, r3, #25
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	4413      	add	r3, r2
 8001810:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	0d1b      	lsrs	r3, r3, #20
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2107      	movs	r1, #7
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	401a      	ands	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	0d1b      	lsrs	r3, r3, #20
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	431a      	orrs	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800183c:	bf00      	nop
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001860:	43db      	mvns	r3, r3
 8001862:	401a      	ands	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0318 	and.w	r3, r3, #24
 800186a:	4908      	ldr	r1, [pc, #32]	@ (800188c <LL_ADC_SetChannelSingleDiff+0x44>)
 800186c:	40d9      	lsrs	r1, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	400b      	ands	r3, r1
 8001872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001876:	431a      	orrs	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	0007ffff 	.word	0x0007ffff

08001890 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 031f 	and.w	r3, r3, #31
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80018bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6093      	str	r3, [r2, #8]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018e4:	d101      	bne.n	80018ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001908:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800190c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001930:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001934:	d101      	bne.n	800193a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001958:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <LL_ADC_IsEnabled+0x18>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <LL_ADC_IsEnabled+0x1a>
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019aa:	f043 0204 	orr.w	r2, r3, #4
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d101      	bne.n	80019d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d101      	bne.n	80019fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b089      	sub	sp, #36	@ 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e167      	b.n	8001cf6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff faab 	bl	8000f90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff3f 	bl	80018d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff25 	bl	80018ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff5a 	bl	8001920 <LL_ADC_IsInternalRegulatorEnabled>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d115      	bne.n	8001a9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff3e 	bl	80018f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a7c:	4ba0      	ldr	r3, [pc, #640]	@ (8001d00 <HAL_ADC_Init+0x2f4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	4aa0      	ldr	r2, [pc, #640]	@ (8001d04 <HAL_ADC_Init+0x2f8>)
 8001a84:	fba2 2303 	umull	r2, r3, r2, r3
 8001a88:	099b      	lsrs	r3, r3, #6
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a90:	e002      	b.n	8001a98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f9      	bne.n	8001a92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff3c 	bl	8001920 <LL_ADC_IsInternalRegulatorEnabled>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10d      	bne.n	8001aca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab2:	f043 0210 	orr.w	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff75 	bl	80019be <LL_ADC_REG_IsConversionOngoing>
 8001ad4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 8100 	bne.w	8001ce4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 80fc 	bne.w	8001ce4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001af4:	f043 0202 	orr.w	r2, r3, #2
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff35 	bl	8001970 <LL_ADC_IsEnabled>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d111      	bne.n	8001b30 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b0c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001b10:	f7ff ff2e 	bl	8001970 <LL_ADC_IsEnabled>
 8001b14:	4604      	mov	r4, r0
 8001b16:	487c      	ldr	r0, [pc, #496]	@ (8001d08 <HAL_ADC_Init+0x2fc>)
 8001b18:	f7ff ff2a 	bl	8001970 <LL_ADC_IsEnabled>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4323      	orrs	r3, r4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4878      	ldr	r0, [pc, #480]	@ (8001d0c <HAL_ADC_Init+0x300>)
 8001b2c:	f7ff fd50 	bl	80015d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7f5b      	ldrb	r3, [r3, #29]
 8001b34:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b3a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b40:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b46:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b4e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d106      	bne.n	8001b6c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b62:	3b01      	subs	r3, #1
 8001b64:	045b      	lsls	r3, r3, #17
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d009      	beq.n	8001b88 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b78:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b80:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	4b60      	ldr	r3, [pc, #384]	@ (8001d10 <HAL_ADC_Init+0x304>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	69b9      	ldr	r1, [r7, #24]
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff14 	bl	80019e4 <LL_ADC_INJ_IsConversionOngoing>
 8001bbc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d16d      	bne.n	8001ca0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d16a      	bne.n	8001ca0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bd6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001be6:	f023 0302 	bic.w	r3, r3, #2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	69b9      	ldr	r1, [r7, #24]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d017      	beq.n	8001c2c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6911      	ldr	r1, [r2, #16]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001c2a:	e013      	b.n	8001c54 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c50:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d118      	bne.n	8001c90 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c68:	f023 0304 	bic.w	r3, r3, #4
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c74:	4311      	orrs	r1, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c80:	430a      	orrs	r2, r1
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	611a      	str	r2, [r3, #16]
 8001c8e:	e007      	b.n	8001ca0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f023 010f 	bic.w	r1, r3, #15
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cc0:	e007      	b.n	8001cd2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 020f 	bic.w	r2, r2, #15
 8001cd0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd6:	f023 0303 	bic.w	r3, r3, #3
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ce2:	e007      	b.n	8001cf4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce8:	f043 0210 	orr.w	r2, r3, #16
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	@ 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd90      	pop	{r4, r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000004 	.word	0x20000004
 8001d04:	053e2d63 	.word	0x053e2d63
 8001d08:	50000100 	.word	0x50000100
 8001d0c:	50000300 	.word	0x50000300
 8001d10:	fff04007 	.word	0xfff04007

08001d14 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d20:	4851      	ldr	r0, [pc, #324]	@ (8001e68 <HAL_ADC_Start_DMA+0x154>)
 8001d22:	f7ff fdb5 	bl	8001890 <LL_ADC_GetMultimode>
 8001d26:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fe46 	bl	80019be <LL_ADC_REG_IsConversionOngoing>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f040 808f 	bne.w	8001e58 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_Start_DMA+0x34>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e08a      	b.n	8001e5e <HAL_ADC_Start_DMA+0x14a>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d002      	beq.n	8001d62 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b09      	cmp	r3, #9
 8001d60:	d173      	bne.n	8001e4a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fc8e 	bl	8002684 <ADC_Enable>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d166      	bne.n	8001e40 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a38      	ldr	r2, [pc, #224]	@ (8001e6c <HAL_ADC_Start_DMA+0x158>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d002      	beq.n	8001d96 <HAL_ADC_Start_DMA+0x82>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	e001      	b.n	8001d9a <HAL_ADC_Start_DMA+0x86>
 8001d96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d002      	beq.n	8001da8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc4:	f023 0206 	bic.w	r2, r3, #6
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	661a      	str	r2, [r3, #96]	@ 0x60
 8001dcc:	e002      	b.n	8001dd4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd8:	4a25      	ldr	r2, [pc, #148]	@ (8001e70 <HAL_ADC_Start_DMA+0x15c>)
 8001dda:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de0:	4a24      	ldr	r2, [pc, #144]	@ (8001e74 <HAL_ADC_Start_DMA+0x160>)
 8001de2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de8:	4a23      	ldr	r2, [pc, #140]	@ (8001e78 <HAL_ADC_Start_DMA+0x164>)
 8001dea:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	221c      	movs	r2, #28
 8001df2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0210 	orr.w	r2, r2, #16
 8001e0a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3340      	adds	r3, #64	@ 0x40
 8001e26:	4619      	mov	r1, r3
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f000 ffc6 	bl	8002dbc <HAL_DMA_Start_IT>
 8001e30:	4603      	mov	r3, r0
 8001e32:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fdac 	bl	8001996 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e3e:	e00d      	b.n	8001e5c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001e48:	e008      	b.n	8001e5c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001e56:	e001      	b.n	8001e5c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	50000300 	.word	0x50000300
 8001e6c:	50000100 	.word	0x50000100
 8001e70:	08002791 	.word	0x08002791
 8001e74:	08002869 	.word	0x08002869
 8001e78:	08002885 	.word	0x08002885

08001e7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0b6      	sub	sp, #216	@ 0xd8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x22>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e3c8      	b.n	8002658 <HAL_ADC_ConfigChannel+0x7b4>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fd73 	bl	80019be <LL_ADC_REG_IsConversionOngoing>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 83ad 	bne.w	800263a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	f7ff fc54 	bl	800179a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fd61 	bl	80019be <LL_ADC_REG_IsConversionOngoing>
 8001efc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fd6d 	bl	80019e4 <LL_ADC_INJ_IsConversionOngoing>
 8001f0a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 81d9 	bne.w	80022ca <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f040 81d4 	bne.w	80022ca <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f2a:	d10f      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2200      	movs	r2, #0
 8001f36:	4619      	mov	r1, r3
 8001f38:	f7ff fc5b 	bl	80017f2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fc02 	bl	800174e <LL_ADC_SetSamplingTimeCommonConfig>
 8001f4a:	e00e      	b.n	8001f6a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	6819      	ldr	r1, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f7ff fc4a 	bl	80017f2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fbf2 	bl	800174e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	08db      	lsrs	r3, r3, #3
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d022      	beq.n	8001fd2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6919      	ldr	r1, [r3, #16]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f9c:	f7ff fb4c 	bl	8001638 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6919      	ldr	r1, [r3, #16]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	461a      	mov	r2, r3
 8001fae:	f7ff fb98 	bl	80016e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d102      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x124>
 8001fc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fc6:	e000      	b.n	8001fca <HAL_ADC_ConfigChannel+0x126>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f7ff fba4 	bl	8001718 <LL_ADC_SetOffsetSaturation>
 8001fd0:	e17b      	b.n	80022ca <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fb51 	bl	8001680 <LL_ADC_GetOffsetChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10a      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x15a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fb46 	bl	8001680 <LL_ADC_GetOffsetChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	0e9b      	lsrs	r3, r3, #26
 8001ff8:	f003 021f 	and.w	r2, r3, #31
 8001ffc:	e01e      	b.n	800203c <HAL_ADC_ConfigChannel+0x198>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fb3b 	bl	8001680 <LL_ADC_GetOffsetChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800201c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002020:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002024:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800202c:	2320      	movs	r3, #32
 800202e:	e004      	b.n	800203a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002030:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1b0>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0e9b      	lsrs	r3, r3, #26
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	e018      	b.n	8002086 <HAL_ADC_ConfigChannel+0x1e2>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800206c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002070:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002078:	2320      	movs	r3, #32
 800207a:	e004      	b.n	8002086 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800207c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002086:	429a      	cmp	r2, r3
 8002088:	d106      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fb0a 	bl	80016ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2101      	movs	r1, #1
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff faee 	bl	8001680 <LL_ADC_GetOffsetChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10a      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x220>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2101      	movs	r1, #1
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fae3 	bl	8001680 <LL_ADC_GetOffsetChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	0e9b      	lsrs	r3, r3, #26
 80020be:	f003 021f 	and.w	r2, r3, #31
 80020c2:	e01e      	b.n	8002102 <HAL_ADC_ConfigChannel+0x25e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fad8 	bl	8001680 <LL_ADC_GetOffsetChannel>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80020e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80020ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e004      	b.n	8002100 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80020f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <HAL_ADC_ConfigChannel+0x276>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0e9b      	lsrs	r3, r3, #26
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	e018      	b.n	800214c <HAL_ADC_ConfigChannel+0x2a8>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800212e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002136:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800213e:	2320      	movs	r3, #32
 8002140:	e004      	b.n	800214c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002142:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800214c:	429a      	cmp	r2, r3
 800214e:	d106      	bne.n	800215e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2200      	movs	r2, #0
 8002156:	2101      	movs	r1, #1
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff faa7 	bl	80016ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2102      	movs	r1, #2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fa8b 	bl	8001680 <LL_ADC_GetOffsetChannel>
 800216a:	4603      	mov	r3, r0
 800216c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10a      	bne.n	800218a <HAL_ADC_ConfigChannel+0x2e6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2102      	movs	r1, #2
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fa80 	bl	8001680 <LL_ADC_GetOffsetChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	0e9b      	lsrs	r3, r3, #26
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	e01e      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x324>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2102      	movs	r1, #2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fa75 	bl	8001680 <LL_ADC_GetOffsetChannel>
 8002196:	4603      	mov	r3, r0
 8002198:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80021a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80021b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e004      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80021bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d105      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x33c>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	e016      	b.n	800220e <HAL_ADC_ConfigChannel+0x36a>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80021f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80021f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002200:	2320      	movs	r3, #32
 8002202:	e004      	b.n	800220e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002204:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800220e:	429a      	cmp	r2, r3
 8002210:	d106      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	2102      	movs	r1, #2
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fa46 	bl	80016ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2103      	movs	r1, #3
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fa2a 	bl	8001680 <LL_ADC_GetOffsetChannel>
 800222c:	4603      	mov	r3, r0
 800222e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10a      	bne.n	800224c <HAL_ADC_ConfigChannel+0x3a8>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2103      	movs	r1, #3
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fa1f 	bl	8001680 <LL_ADC_GetOffsetChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	0e9b      	lsrs	r3, r3, #26
 8002246:	f003 021f 	and.w	r2, r3, #31
 800224a:	e017      	b.n	800227c <HAL_ADC_ConfigChannel+0x3d8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2103      	movs	r1, #3
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fa14 	bl	8001680 <LL_ADC_GetOffsetChannel>
 8002258:	4603      	mov	r3, r0
 800225a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002264:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002266:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800226e:	2320      	movs	r3, #32
 8002270:	e003      	b.n	800227a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002272:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x3f0>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	e011      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x414>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80022a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80022a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80022ac:	2320      	movs	r3, #32
 80022ae:	e003      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80022b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d106      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2200      	movs	r2, #0
 80022c2:	2103      	movs	r1, #3
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff f9f1 	bl	80016ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fb4e 	bl	8001970 <LL_ADC_IsEnabled>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 8140 	bne.w	800255c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	461a      	mov	r2, r3
 80022ea:	f7ff faad 	bl	8001848 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	4a8f      	ldr	r2, [pc, #572]	@ (8002530 <HAL_ADC_ConfigChannel+0x68c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	f040 8131 	bne.w	800255c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10b      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x47e>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	3301      	adds	r3, #1
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2b09      	cmp	r3, #9
 8002318:	bf94      	ite	ls
 800231a:	2301      	movls	r3, #1
 800231c:	2300      	movhi	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	e019      	b.n	8002356 <HAL_ADC_ConfigChannel+0x4b2>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002332:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002334:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800233a:	2320      	movs	r3, #32
 800233c:	e003      	b.n	8002346 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800233e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	3301      	adds	r3, #1
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	2b09      	cmp	r3, #9
 800234e:	bf94      	ite	ls
 8002350:	2301      	movls	r3, #1
 8002352:	2300      	movhi	r3, #0
 8002354:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002356:	2b00      	cmp	r3, #0
 8002358:	d079      	beq.n	800244e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x4d2>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0e9b      	lsrs	r3, r3, #26
 800236c:	3301      	adds	r3, #1
 800236e:	069b      	lsls	r3, r3, #26
 8002370:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002374:	e015      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x4fe>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002386:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e003      	b.n	800239a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3301      	adds	r3, #1
 800239c:	069b      	lsls	r3, r3, #26
 800239e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x51e>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	3301      	adds	r3, #1
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2101      	movs	r1, #1
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	e017      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x54e>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80023d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80023d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80023da:	2320      	movs	r3, #32
 80023dc:	e003      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80023de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	ea42 0103 	orr.w	r1, r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x574>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0e9b      	lsrs	r3, r3, #26
 8002408:	3301      	adds	r3, #1
 800240a:	f003 021f 	and.w	r2, r3, #31
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	051b      	lsls	r3, r3, #20
 8002416:	e018      	b.n	800244a <HAL_ADC_ConfigChannel+0x5a6>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002428:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800242a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002430:	2320      	movs	r3, #32
 8002432:	e003      	b.n	800243c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f003 021f 	and.w	r2, r3, #31
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244a:	430b      	orrs	r3, r1
 800244c:	e081      	b.n	8002552 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <HAL_ADC_ConfigChannel+0x5c6>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0e9b      	lsrs	r3, r3, #26
 8002460:	3301      	adds	r3, #1
 8002462:	069b      	lsls	r3, r3, #26
 8002464:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002468:	e015      	b.n	8002496 <HAL_ADC_ConfigChannel+0x5f2>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002482:	2320      	movs	r3, #32
 8002484:	e003      	b.n	800248e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3301      	adds	r3, #1
 8002490:	069b      	lsls	r3, r3, #26
 8002492:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x612>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0e9b      	lsrs	r3, r3, #26
 80024a8:	3301      	adds	r3, #1
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	e017      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x642>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	61fb      	str	r3, [r7, #28]
  return result;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80024ce:	2320      	movs	r3, #32
 80024d0:	e003      	b.n	80024da <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	ea42 0103 	orr.w	r1, r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x66e>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	0e9b      	lsrs	r3, r3, #26
 80024fc:	3301      	adds	r3, #1
 80024fe:	f003 021f 	and.w	r2, r3, #31
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	3b1e      	subs	r3, #30
 800250a:	051b      	lsls	r3, r3, #20
 800250c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002510:	e01e      	b.n	8002550 <HAL_ADC_ConfigChannel+0x6ac>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	613b      	str	r3, [r7, #16]
  return result;
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d104      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800252a:	2320      	movs	r3, #32
 800252c:	e006      	b.n	800253c <HAL_ADC_ConfigChannel+0x698>
 800252e:	bf00      	nop
 8002530:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	3301      	adds	r3, #1
 800253e:	f003 021f 	and.w	r2, r3, #31
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	3b1e      	subs	r3, #30
 800254a:	051b      	lsls	r3, r3, #20
 800254c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002550:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002556:	4619      	mov	r1, r3
 8002558:	f7ff f94b 	bl	80017f2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b3f      	ldr	r3, [pc, #252]	@ (8002660 <HAL_ADC_ConfigChannel+0x7bc>)
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d071      	beq.n	800264c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002568:	483e      	ldr	r0, [pc, #248]	@ (8002664 <HAL_ADC_ConfigChannel+0x7c0>)
 800256a:	f7ff f857 	bl	800161c <LL_ADC_GetCommonPathInternalCh>
 800256e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a3c      	ldr	r2, [pc, #240]	@ (8002668 <HAL_ADC_ConfigChannel+0x7c4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d004      	beq.n	8002586 <HAL_ADC_ConfigChannel+0x6e2>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a3a      	ldr	r2, [pc, #232]	@ (800266c <HAL_ADC_ConfigChannel+0x7c8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d127      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800258a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d121      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800259a:	d157      	bne.n	800264c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800259c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025a4:	4619      	mov	r1, r3
 80025a6:	482f      	ldr	r0, [pc, #188]	@ (8002664 <HAL_ADC_ConfigChannel+0x7c0>)
 80025a8:	f7ff f825 	bl	80015f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025ac:	4b30      	ldr	r3, [pc, #192]	@ (8002670 <HAL_ADC_ConfigChannel+0x7cc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	099b      	lsrs	r3, r3, #6
 80025b2:	4a30      	ldr	r2, [pc, #192]	@ (8002674 <HAL_ADC_ConfigChannel+0x7d0>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025c6:	e002      	b.n	80025ce <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f9      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025d4:	e03a      	b.n	800264c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a27      	ldr	r2, [pc, #156]	@ (8002678 <HAL_ADC_ConfigChannel+0x7d4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d113      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10d      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a22      	ldr	r2, [pc, #136]	@ (800267c <HAL_ADC_ConfigChannel+0x7d8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d02a      	beq.n	800264c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025fe:	4619      	mov	r1, r3
 8002600:	4818      	ldr	r0, [pc, #96]	@ (8002664 <HAL_ADC_ConfigChannel+0x7c0>)
 8002602:	f7fe fff8 	bl	80015f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002606:	e021      	b.n	800264c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1c      	ldr	r2, [pc, #112]	@ (8002680 <HAL_ADC_ConfigChannel+0x7dc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d11c      	bne.n	800264c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002612:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d116      	bne.n	800264c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a16      	ldr	r2, [pc, #88]	@ (800267c <HAL_ADC_ConfigChannel+0x7d8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d011      	beq.n	800264c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800262c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002630:	4619      	mov	r1, r3
 8002632:	480c      	ldr	r0, [pc, #48]	@ (8002664 <HAL_ADC_ConfigChannel+0x7c0>)
 8002634:	f7fe ffdf 	bl	80015f6 <LL_ADC_SetCommonPathInternalCh>
 8002638:	e008      	b.n	800264c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263e:	f043 0220 	orr.w	r2, r3, #32
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002654:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002658:	4618      	mov	r0, r3
 800265a:	37d8      	adds	r7, #216	@ 0xd8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	80080000 	.word	0x80080000
 8002664:	50000300 	.word	0x50000300
 8002668:	c3210000 	.word	0xc3210000
 800266c:	90c00010 	.word	0x90c00010
 8002670:	20000004 	.word	0x20000004
 8002674:	053e2d63 	.word	0x053e2d63
 8002678:	c7520000 	.word	0xc7520000
 800267c:	50000100 	.word	0x50000100
 8002680:	cb840000 	.word	0xcb840000

08002684 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f96b 	bl	8001970 <LL_ADC_IsEnabled>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d169      	bne.n	8002774 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	4b36      	ldr	r3, [pc, #216]	@ (8002780 <ADC_Enable+0xfc>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00d      	beq.n	80026ca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	f043 0210 	orr.w	r2, r3, #16
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e055      	b.n	8002776 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f93a 	bl	8001948 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026d4:	482b      	ldr	r0, [pc, #172]	@ (8002784 <ADC_Enable+0x100>)
 80026d6:	f7fe ffa1 	bl	800161c <LL_ADC_GetCommonPathInternalCh>
 80026da:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026e4:	4b28      	ldr	r3, [pc, #160]	@ (8002788 <ADC_Enable+0x104>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	099b      	lsrs	r3, r3, #6
 80026ea:	4a28      	ldr	r2, [pc, #160]	@ (800278c <ADC_Enable+0x108>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	099b      	lsrs	r3, r3, #6
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026fe:	e002      	b.n	8002706 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	3b01      	subs	r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f9      	bne.n	8002700 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800270c:	f7fe ff54 	bl	80015b8 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002712:	e028      	b.n	8002766 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff f929 	bl	8001970 <LL_ADC_IsEnabled>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d104      	bne.n	800272e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff f90d 	bl	8001948 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800272e:	f7fe ff43 	bl	80015b8 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d914      	bls.n	8002766 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d00d      	beq.n	8002766 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	f043 0210 	orr.w	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e007      	b.n	8002776 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d1cf      	bne.n	8002714 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	8000003f 	.word	0x8000003f
 8002784:	50000300 	.word	0x50000300
 8002788:	20000004 	.word	0x20000004
 800278c:	053e2d63 	.word	0x053e2d63

08002790 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d14b      	bne.n	8002842 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d021      	beq.n	8002808 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe ffd3 	bl	8001774 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d032      	beq.n	800283a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d12b      	bne.n	800283a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11f      	bne.n	800283a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fe:	f043 0201 	orr.w	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002806:	e018      	b.n	800283a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d111      	bne.n	800283a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002826:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7fe fade 	bl	8000dfc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002840:	e00e      	b.n	8002860 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff fb1e 	bl	8001e90 <HAL_ADC_ErrorCallback>
}
 8002854:	e004      	b.n	8002860 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff fb00 	bl	8001e7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002896:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a2:	f043 0204 	orr.w	r2, r3, #4
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7ff faf0 	bl	8001e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028b0:	bf00      	nop
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <LL_ADC_IsEnabled>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <LL_ADC_IsEnabled+0x18>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <LL_ADC_IsEnabled+0x1a>
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_REG_IsConversionOngoing>:
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d101      	bne.n	80028f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b0a1      	sub	sp, #132	@ 0x84
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800291e:	2302      	movs	r3, #2
 8002920:	e08b      	b.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800292a:	2300      	movs	r3, #0
 800292c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800292e:	2300      	movs	r3, #0
 8002930:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800293a:	d102      	bne.n	8002942 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800293c:	4b41      	ldr	r3, [pc, #260]	@ (8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	e001      	b.n	8002946 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e06a      	b.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff ffb9 	bl	80028de <LL_ADC_REG_IsConversionOngoing>
 800296c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff ffb3 	bl	80028de <LL_ADC_REG_IsConversionOngoing>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d14c      	bne.n	8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800297e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002980:	2b00      	cmp	r3, #0
 8002982:	d149      	bne.n	8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002984:	4b30      	ldr	r3, [pc, #192]	@ (8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002986:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d028      	beq.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002990:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029a2:	035b      	lsls	r3, r3, #13
 80029a4:	430b      	orrs	r3, r1
 80029a6:	431a      	orrs	r2, r3
 80029a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029b0:	f7ff ff82 	bl	80028b8 <LL_ADC_IsEnabled>
 80029b4:	4604      	mov	r4, r0
 80029b6:	4823      	ldr	r0, [pc, #140]	@ (8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80029b8:	f7ff ff7e 	bl	80028b8 <LL_ADC_IsEnabled>
 80029bc:	4603      	mov	r3, r0
 80029be:	4323      	orrs	r3, r4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d133      	bne.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029cc:	f023 030f 	bic.w	r3, r3, #15
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	6811      	ldr	r1, [r2, #0]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	6892      	ldr	r2, [r2, #8]
 80029d8:	430a      	orrs	r2, r1
 80029da:	431a      	orrs	r2, r3
 80029dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029de:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029e0:	e024      	b.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029ee:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029f2:	f7ff ff61 	bl	80028b8 <LL_ADC_IsEnabled>
 80029f6:	4604      	mov	r4, r0
 80029f8:	4812      	ldr	r0, [pc, #72]	@ (8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80029fa:	f7ff ff5d 	bl	80028b8 <LL_ADC_IsEnabled>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4323      	orrs	r3, r4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d112      	bne.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a0e:	f023 030f 	bic.w	r3, r3, #15
 8002a12:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a14:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a16:	e009      	b.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a2a:	e000      	b.n	8002a2e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a36:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3784      	adds	r7, #132	@ 0x84
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd90      	pop	{r4, r7, pc}
 8002a42:	bf00      	nop
 8002a44:	50000100 	.word	0x50000100
 8002a48:	50000300 	.word	0x50000300

08002a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <__NVIC_SetPriorityGrouping+0x44>)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	60d3      	str	r3, [r2, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a98:	4b04      	ldr	r3, [pc, #16]	@ (8002aac <__NVIC_GetPriorityGrouping+0x18>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 0307 	and.w	r3, r3, #7
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	db0b      	blt.n	8002ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	4907      	ldr	r1, [pc, #28]	@ (8002ae8 <__NVIC_EnableIRQ+0x38>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	6039      	str	r1, [r7, #0]
 8002af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	490c      	ldr	r1, [pc, #48]	@ (8002b38 <__NVIC_SetPriority+0x4c>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	0112      	lsls	r2, r2, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b14:	e00a      	b.n	8002b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4908      	ldr	r1, [pc, #32]	@ (8002b3c <__NVIC_SetPriority+0x50>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	3b04      	subs	r3, #4
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	440b      	add	r3, r1
 8002b2a:	761a      	strb	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000e100 	.word	0xe000e100
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b089      	sub	sp, #36	@ 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f1c3 0307 	rsb	r3, r3, #7
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	bf28      	it	cs
 8002b5e:	2304      	movcs	r3, #4
 8002b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d902      	bls.n	8002b70 <NVIC_EncodePriority+0x30>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3b03      	subs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <NVIC_EncodePriority+0x32>
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b88:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	4313      	orrs	r3, r2
         );
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	@ 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bb8:	d301      	bcc.n	8002bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00f      	b.n	8002bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002be8 <SysTick_Config+0x40>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc6:	210f      	movs	r1, #15
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	f7ff ff8e 	bl	8002aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd0:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <SysTick_Config+0x40>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd6:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <SysTick_Config+0x40>)
 8002bd8:	2207      	movs	r2, #7
 8002bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	e000e010 	.word	0xe000e010

08002bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff29 	bl	8002a4c <__NVIC_SetPriorityGrouping>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c10:	f7ff ff40 	bl	8002a94 <__NVIC_GetPriorityGrouping>
 8002c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f7ff ff90 	bl	8002b40 <NVIC_EncodePriority>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff5f 	bl	8002aec <__NVIC_SetPriority>
}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff33 	bl	8002ab0 <__NVIC_EnableIRQ>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ffa4 	bl	8002ba8 <SysTick_Config>
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e08d      	b.n	8002d9a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b47      	ldr	r3, [pc, #284]	@ (8002da4 <HAL_DMA_Init+0x138>)
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d80f      	bhi.n	8002caa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4b45      	ldr	r3, [pc, #276]	@ (8002da8 <HAL_DMA_Init+0x13c>)
 8002c92:	4413      	add	r3, r2
 8002c94:	4a45      	ldr	r2, [pc, #276]	@ (8002dac <HAL_DMA_Init+0x140>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	009a      	lsls	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a42      	ldr	r2, [pc, #264]	@ (8002db0 <HAL_DMA_Init+0x144>)
 8002ca6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ca8:	e00e      	b.n	8002cc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b40      	ldr	r3, [pc, #256]	@ (8002db4 <HAL_DMA_Init+0x148>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a3d      	ldr	r2, [pc, #244]	@ (8002dac <HAL_DMA_Init+0x140>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	009a      	lsls	r2, r3, #2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8002db8 <HAL_DMA_Init+0x14c>)
 8002cc6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f9b6 	bl	800308c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d28:	d102      	bne.n	8002d30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d44:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_DMA_Init+0x104>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d80c      	bhi.n	8002d70 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f9d6 	bl	8003108 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e008      	b.n	8002d82 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40020407 	.word	0x40020407
 8002da8:	bffdfff8 	.word	0xbffdfff8
 8002dac:	cccccccd 	.word	0xcccccccd
 8002db0:	40020000 	.word	0x40020000
 8002db4:	bffdfbf8 	.word	0xbffdfbf8
 8002db8:	40020400 	.word	0x40020400

08002dbc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_DMA_Start_IT+0x20>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e066      	b.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d155      	bne.n	8002e9c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f8fb 	bl	8003010 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 020e 	orr.w	r2, r2, #14
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e00f      	b.n	8002e54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0204 	bic.w	r2, r2, #4
 8002e42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 020a 	orr.w	r2, r2, #10
 8002e52:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e70:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e88:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0201 	orr.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e005      	b.n	8002ea8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d026      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x7a>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d021      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d107      	bne.n	8002f06 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0204 	bic.w	r2, r2, #4
 8002f04:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f003 021f 	and.w	r2, r3, #31
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	2104      	movs	r1, #4
 8002f14:	fa01 f202 	lsl.w	r2, r1, r2
 8002f18:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d071      	beq.n	8003006 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f2a:	e06c      	b.n	8003006 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	2202      	movs	r2, #2
 8002f36:	409a      	lsls	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d02e      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d029      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10b      	bne.n	8002f70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 020a 	bic.w	r2, r2, #10
 8002f66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d038      	beq.n	8003006 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f9c:	e033      	b.n	8003006 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d02a      	beq.n	8003008 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d025      	beq.n	8003008 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 020e 	bic.w	r2, r2, #14
 8002fca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd0:	f003 021f 	and.w	r2, r3, #31
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f202 	lsl.w	r2, r1, r2
 8002fde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003006:	bf00      	nop
 8003008:	bf00      	nop
}
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003026:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003038:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	f003 021f 	and.w	r2, r3, #31
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	2101      	movs	r1, #1
 8003048:	fa01 f202 	lsl.w	r2, r1, r2
 800304c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b10      	cmp	r3, #16
 800305c:	d108      	bne.n	8003070 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800306e:	e007      	b.n	8003080 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	60da      	str	r2, [r3, #12]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	4b16      	ldr	r3, [pc, #88]	@ (80030f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800309c:	429a      	cmp	r2, r3
 800309e:	d802      	bhi.n	80030a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80030a0:	4b15      	ldr	r3, [pc, #84]	@ (80030f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	e001      	b.n	80030aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80030a6:	4b15      	ldr	r3, [pc, #84]	@ (80030fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80030a8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3b08      	subs	r3, #8
 80030b6:	4a12      	ldr	r2, [pc, #72]	@ (8003100 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c4:	089b      	lsrs	r3, r3, #2
 80030c6:	009a      	lsls	r2, r3, #2
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003104 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80030d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	2201      	movs	r2, #1
 80030e0:	409a      	lsls	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40020407 	.word	0x40020407
 80030f8:	40020800 	.word	0x40020800
 80030fc:	40020820 	.word	0x40020820
 8003100:	cccccccd 	.word	0xcccccccd
 8003104:	40020880 	.word	0x40020880

08003108 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4b0b      	ldr	r3, [pc, #44]	@ (8003148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	461a      	mov	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a08      	ldr	r2, [pc, #32]	@ (800314c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800312a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3b01      	subs	r3, #1
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	2201      	movs	r2, #1
 8003136:	409a      	lsls	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	1000823f 	.word	0x1000823f
 800314c:	40020940 	.word	0x40020940

08003150 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e147      	b.n	80033f2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe f842 	bl	8001200 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0210 	bic.w	r2, r2, #16
 800318a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800318c:	f7fe fa14 	bl	80015b8 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003192:	e012      	b.n	80031ba <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003194:	f7fe fa10 	bl	80015b8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b0a      	cmp	r3, #10
 80031a0:	d90b      	bls.n	80031ba <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2203      	movs	r2, #3
 80031b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e11b      	b.n	80033f2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d0e5      	beq.n	8003194 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031d8:	f7fe f9ee 	bl	80015b8 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031de:	e012      	b.n	8003206 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031e0:	f7fe f9ea 	bl	80015b8 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b0a      	cmp	r3, #10
 80031ec:	d90b      	bls.n	8003206 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f2:	f043 0201 	orr.w	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2203      	movs	r2, #3
 80031fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0f5      	b.n	80033f2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0e5      	beq.n	80031e0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0202 	orr.w	r2, r2, #2
 8003222:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a74      	ldr	r2, [pc, #464]	@ (80033fc <HAL_FDCAN_Init+0x2ac>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d103      	bne.n	8003236 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800322e:	4a74      	ldr	r2, [pc, #464]	@ (8003400 <HAL_FDCAN_Init+0x2b0>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	7c1b      	ldrb	r3, [r3, #16]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d108      	bne.n	8003250 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699a      	ldr	r2, [r3, #24]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800324c:	619a      	str	r2, [r3, #24]
 800324e:	e007      	b.n	8003260 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800325e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7c5b      	ldrb	r3, [r3, #17]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d108      	bne.n	800327a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003276:	619a      	str	r2, [r3, #24]
 8003278:	e007      	b.n	800328a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699a      	ldr	r2, [r3, #24]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003288:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	7c9b      	ldrb	r3, [r3, #18]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d108      	bne.n	80032a4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032a0:	619a      	str	r2, [r3, #24]
 80032a2:	e007      	b.n	80032b4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032b2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80032d8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0210 	bic.w	r2, r2, #16
 80032e8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d108      	bne.n	8003304 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0204 	orr.w	r2, r2, #4
 8003300:	619a      	str	r2, [r3, #24]
 8003302:	e02c      	b.n	800335e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d028      	beq.n	800335e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d01c      	beq.n	800334e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003322:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0210 	orr.w	r2, r2, #16
 8003332:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d110      	bne.n	800335e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0220 	orr.w	r2, r2, #32
 800334a:	619a      	str	r2, [r3, #24]
 800334c:	e007      	b.n	800335e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0220 	orr.w	r2, r2, #32
 800335c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	3b01      	subs	r3, #1
 8003364:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	3b01      	subs	r3, #1
 800336c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800336e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003376:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	3b01      	subs	r3, #1
 8003380:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003386:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003388:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003392:	d115      	bne.n	80033c0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339e:	3b01      	subs	r3, #1
 80033a0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033a2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	3b01      	subs	r3, #1
 80033aa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80033ac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	3b01      	subs	r3, #1
 80033b6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80033bc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033be:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fc0e 	bl	8003bf8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40006400 	.word	0x40006400
 8003400:	40006500 	.word	0x40006500

08003404 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d110      	bne.n	800343a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e006      	b.n	8003448 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343e:	f043 0204 	orr.w	r2, r3, #4
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
  }
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d12c      	bne.n	80034c6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003480:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e023      	b.n	80034d4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fbfe 	bl	8003ca4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2101      	movs	r1, #1
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	fa01 f202 	lsl.w	r2, r1, r2
 80034b4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80034b8:	2201      	movs	r2, #1
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	409a      	lsls	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e006      	b.n	80034d4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ca:	f043 0208 	orr.w	r2, r3, #8
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80034dc:	b480      	push	{r7}
 80034de:	b08b      	sub	sp, #44	@ 0x2c
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034f4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80034f6:	7efb      	ldrb	r3, [r7, #27]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	f040 80e8 	bne.w	80036ce <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b40      	cmp	r3, #64	@ 0x40
 8003502:	d137      	bne.n	8003574 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	2b00      	cmp	r3, #0
 8003512:	d107      	bne.n	8003524 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003518:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0db      	b.n	80036dc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352c:	0e1b      	lsrs	r3, r3, #24
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d10a      	bne.n	800354c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800353e:	0a5b      	lsrs	r3, r3, #9
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003548:	2301      	movs	r3, #1
 800354a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003554:	0a1b      	lsrs	r3, r3, #8
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	440b      	add	r3, r1
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
 8003572:	e036      	b.n	80035e2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003588:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0a3      	b.n	80036dc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800359c:	0e1b      	lsrs	r3, r3, #24
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10a      	bne.n	80035bc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80035b8:	2301      	movs	r3, #1
 80035ba:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	440b      	add	r3, r1
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d107      	bne.n	8003606 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	0c9b      	lsrs	r3, r3, #18
 80035fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e005      	b.n	8003612 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	3304      	adds	r3, #4
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	b29a      	uxth	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	0c1b      	lsrs	r3, r3, #16
 8003640:	f003 020f 	and.w	r2, r3, #15
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	0e1b      	lsrs	r3, r3, #24
 8003666:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	0fda      	lsrs	r2, r3, #31
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	3304      	adds	r3, #4
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003682:	2300      	movs	r3, #0
 8003684:	623b      	str	r3, [r7, #32]
 8003686:	e00a      	b.n	800369e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	441a      	add	r2, r3
 800368e:	6839      	ldr	r1, [r7, #0]
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	440b      	add	r3, r1
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	3301      	adds	r3, #1
 800369c:	623b      	str	r3, [r7, #32]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	4a11      	ldr	r2, [pc, #68]	@ (80036e8 <HAL_FDCAN_GetRxMessage+0x20c>)
 80036a4:	5cd3      	ldrb	r3, [r2, r3]
 80036a6:	461a      	mov	r2, r3
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d3ec      	bcc.n	8003688 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b40      	cmp	r3, #64	@ 0x40
 80036b2:	d105      	bne.n	80036c0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80036be:	e004      	b.n	80036ca <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e006      	b.n	80036dc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d2:	f043 0208 	orr.w	r2, r3, #8
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
  }
}
 80036dc:	4618      	mov	r0, r3
 80036de:	372c      	adds	r7, #44	@ 0x2c
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	08005b34 	.word	0x08005b34

080036ec <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8003702:	68fb      	ldr	r3, [r7, #12]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003722:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d003      	beq.n	8003732 <HAL_FDCAN_ActivateNotification+0x22>
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b02      	cmp	r3, #2
 800372e:	f040 80c8 	bne.w	80038c2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d03b      	beq.n	80037c6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003754:	2b00      	cmp	r3, #0
 8003756:	d004      	beq.n	8003762 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d031      	beq.n	80037c6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003768:	2b00      	cmp	r3, #0
 800376a:	d004      	beq.n	8003776 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d027      	beq.n	80037c6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d01d      	beq.n	80037c6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	d013      	beq.n	80037c6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d004      	beq.n	80037b2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00c      	beq.n	80037d6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d107      	bne.n	80037d6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d004      	beq.n	80037ea <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d13b      	bne.n	8003862 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d131      	bne.n	8003862 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003804:	2b00      	cmp	r3, #0
 8003806:	d004      	beq.n	8003812 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b00      	cmp	r3, #0
 8003810:	d127      	bne.n	8003862 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d11d      	bne.n	8003862 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d113      	bne.n	8003862 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00c      	beq.n	8003872 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0202 	orr.w	r2, r2, #2
 8003870:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	430a      	orrs	r2, r1
 800388c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e006      	b.n	80038d0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c6:	f043 0202 	orr.w	r2, r3, #2
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	@ 0x30
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ea:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80038ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f8:	4013      	ands	r3, r2
 80038fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003910:	4013      	ands	r3, r2
 8003912:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003928:	4013      	ands	r3, r2
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003932:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003936:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	6a3a      	ldr	r2, [r7, #32]
 8003940:	4013      	ands	r3, r2
 8003942:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800394e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	4013      	ands	r3, r2
 800395a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003962:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2240      	movs	r2, #64	@ 0x40
 8003986:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f916 	bl	8003bba <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d019      	beq.n	80039cc <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d014      	beq.n	80039cc <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039aa:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4013      	ands	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80039c4:	6939      	ldr	r1, [r7, #16]
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f8d8 	bl	8003b7c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80039cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039d8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80039da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8a2 	bl	8003b26 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80039f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fc fd28 	bl	8000448 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a04:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003a06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f897 	bl	8003b3c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00c      	beq.n	8003a32 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a2a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f890 	bl	8003b52 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d018      	beq.n	8003a6e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d013      	beq.n	8003a6e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003a4e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2280      	movs	r2, #128	@ 0x80
 8003a64:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f87c 	bl	8003b66 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00c      	beq.n	8003a92 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a8a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f880 	bl	8003b92 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003aae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f878 	bl	8003ba6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00f      	beq.n	8003ae0 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ad2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003aee:	69f9      	ldr	r1, [r7, #28]
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f876 	bl	8003be2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d009      	beq.n	8003b10 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6a3a      	ldr	r2, [r7, #32]
 8003b02:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f858 	bl	8003bce <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003b1e:	bf00      	nop
 8003b20:	3730      	adds	r7, #48	@ 0x30
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003c00:	4b27      	ldr	r3, [pc, #156]	@ (8003ca0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003c02:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c12:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1a:	041a      	lsls	r2, r3, #16
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c38:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c40:	061a      	lsls	r2, r3, #24
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e005      	b.n	8003c86 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3304      	adds	r3, #4
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d3f3      	bcc.n	8003c7a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	4000a400 	.word	0x4000a400

08003ca4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	@ 0x24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003cc2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	e00a      	b.n	8003ce6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003cd8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003cde:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003ce0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ce4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003cf0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003cf6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003cfc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	440b      	add	r3, r1
 8003d18:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	3304      	adds	r3, #4
 8003d24:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e020      	b.n	8003d7a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	3303      	adds	r3, #3
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	4413      	add	r3, r2
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	3302      	adds	r3, #2
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	440b      	add	r3, r1
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d50:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	3301      	adds	r3, #1
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	440b      	add	r3, r1
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003d5e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	440a      	add	r2, r1
 8003d66:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003d68:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	3304      	adds	r3, #4
 8003d72:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3304      	adds	r3, #4
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4a06      	ldr	r2, [pc, #24]	@ (8003d98 <FDCAN_CopyMessageToRAM+0xf4>)
 8003d80:	5cd3      	ldrb	r3, [r2, r3]
 8003d82:	461a      	mov	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d3d6      	bcc.n	8003d38 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	3724      	adds	r7, #36	@ 0x24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	08005b34 	.word	0x08005b34

08003d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003daa:	e15a      	b.n	8004062 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	fa01 f303 	lsl.w	r3, r1, r3
 8003db8:	4013      	ands	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 814c 	beq.w	800405c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d005      	beq.n	8003ddc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d130      	bne.n	8003e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2203      	movs	r2, #3
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e12:	2201      	movs	r2, #1
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	f003 0201 	and.w	r2, r3, #1
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d017      	beq.n	8003e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	2203      	movs	r2, #3
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d123      	bne.n	8003ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	08da      	lsrs	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3208      	adds	r2, #8
 8003e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	220f      	movs	r2, #15
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	08da      	lsrs	r2, r3, #3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3208      	adds	r2, #8
 8003ec8:	6939      	ldr	r1, [r7, #16]
 8003eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0203 	and.w	r2, r3, #3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80a6 	beq.w	800405c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f10:	4b5b      	ldr	r3, [pc, #364]	@ (8004080 <HAL_GPIO_Init+0x2e4>)
 8003f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f14:	4a5a      	ldr	r2, [pc, #360]	@ (8004080 <HAL_GPIO_Init+0x2e4>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f1c:	4b58      	ldr	r3, [pc, #352]	@ (8004080 <HAL_GPIO_Init+0x2e4>)
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f28:	4a56      	ldr	r2, [pc, #344]	@ (8004084 <HAL_GPIO_Init+0x2e8>)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	3302      	adds	r3, #2
 8003f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	220f      	movs	r2, #15
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f52:	d01f      	beq.n	8003f94 <HAL_GPIO_Init+0x1f8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a4c      	ldr	r2, [pc, #304]	@ (8004088 <HAL_GPIO_Init+0x2ec>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d019      	beq.n	8003f90 <HAL_GPIO_Init+0x1f4>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a4b      	ldr	r2, [pc, #300]	@ (800408c <HAL_GPIO_Init+0x2f0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <HAL_GPIO_Init+0x1f0>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a4a      	ldr	r2, [pc, #296]	@ (8004090 <HAL_GPIO_Init+0x2f4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00d      	beq.n	8003f88 <HAL_GPIO_Init+0x1ec>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a49      	ldr	r2, [pc, #292]	@ (8004094 <HAL_GPIO_Init+0x2f8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <HAL_GPIO_Init+0x1e8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a48      	ldr	r2, [pc, #288]	@ (8004098 <HAL_GPIO_Init+0x2fc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <HAL_GPIO_Init+0x1e4>
 8003f7c:	2305      	movs	r3, #5
 8003f7e:	e00a      	b.n	8003f96 <HAL_GPIO_Init+0x1fa>
 8003f80:	2306      	movs	r3, #6
 8003f82:	e008      	b.n	8003f96 <HAL_GPIO_Init+0x1fa>
 8003f84:	2304      	movs	r3, #4
 8003f86:	e006      	b.n	8003f96 <HAL_GPIO_Init+0x1fa>
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e004      	b.n	8003f96 <HAL_GPIO_Init+0x1fa>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e002      	b.n	8003f96 <HAL_GPIO_Init+0x1fa>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_GPIO_Init+0x1fa>
 8003f94:	2300      	movs	r3, #0
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	f002 0203 	and.w	r2, r2, #3
 8003f9c:	0092      	lsls	r2, r2, #2
 8003f9e:	4093      	lsls	r3, r2
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fa6:	4937      	ldr	r1, [pc, #220]	@ (8004084 <HAL_GPIO_Init+0x2e8>)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	3302      	adds	r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fb4:	4b39      	ldr	r3, [pc, #228]	@ (800409c <HAL_GPIO_Init+0x300>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fd8:	4a30      	ldr	r2, [pc, #192]	@ (800409c <HAL_GPIO_Init+0x300>)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fde:	4b2f      	ldr	r3, [pc, #188]	@ (800409c <HAL_GPIO_Init+0x300>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4013      	ands	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004002:	4a26      	ldr	r2, [pc, #152]	@ (800409c <HAL_GPIO_Init+0x300>)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004008:	4b24      	ldr	r3, [pc, #144]	@ (800409c <HAL_GPIO_Init+0x300>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	43db      	mvns	r3, r3
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4013      	ands	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800402c:	4a1b      	ldr	r2, [pc, #108]	@ (800409c <HAL_GPIO_Init+0x300>)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004032:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <HAL_GPIO_Init+0x300>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	43db      	mvns	r3, r3
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4013      	ands	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004056:	4a11      	ldr	r2, [pc, #68]	@ (800409c <HAL_GPIO_Init+0x300>)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	3301      	adds	r3, #1
 8004060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	f47f ae9d 	bne.w	8003dac <HAL_GPIO_Init+0x10>
  }
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40021000 	.word	0x40021000
 8004084:	40010000 	.word	0x40010000
 8004088:	48000400 	.word	0x48000400
 800408c:	48000800 	.word	0x48000800
 8004090:	48000c00 	.word	0x48000c00
 8004094:	48001000 	.word	0x48001000
 8004098:	48001400 	.word	0x48001400
 800409c:	40010400 	.word	0x40010400

080040a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
 80040ac:	4613      	mov	r3, r2
 80040ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040b0:	787b      	ldrb	r3, [r7, #1]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040bc:	e002      	b.n	80040c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4013      	ands	r3, r2
 80040e8:	041a      	lsls	r2, r3, #16
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	43d9      	mvns	r1, r3
 80040ee:	887b      	ldrh	r3, [r7, #2]
 80040f0:	400b      	ands	r3, r1
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	619a      	str	r2, [r3, #24]
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d141      	bne.n	8004196 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004112:	4b4b      	ldr	r3, [pc, #300]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800411a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800411e:	d131      	bne.n	8004184 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004120:	4b47      	ldr	r3, [pc, #284]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004126:	4a46      	ldr	r2, [pc, #280]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800412c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004130:	4b43      	ldr	r3, [pc, #268]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004138:	4a41      	ldr	r2, [pc, #260]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800413e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004140:	4b40      	ldr	r3, [pc, #256]	@ (8004244 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2232      	movs	r2, #50	@ 0x32
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	4a3f      	ldr	r2, [pc, #252]	@ (8004248 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	0c9b      	lsrs	r3, r3, #18
 8004152:	3301      	adds	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004156:	e002      	b.n	800415e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3b01      	subs	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800415e:	4b38      	ldr	r3, [pc, #224]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416a:	d102      	bne.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f2      	bne.n	8004158 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004172:	4b33      	ldr	r3, [pc, #204]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800417a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800417e:	d158      	bne.n	8004232 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e057      	b.n	8004234 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004184:	4b2e      	ldr	r3, [pc, #184]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800418a:	4a2d      	ldr	r2, [pc, #180]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004190:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004194:	e04d      	b.n	8004232 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800419c:	d141      	bne.n	8004222 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800419e:	4b28      	ldr	r3, [pc, #160]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041aa:	d131      	bne.n	8004210 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041ac:	4b24      	ldr	r3, [pc, #144]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041b2:	4a23      	ldr	r2, [pc, #140]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041bc:	4b20      	ldr	r3, [pc, #128]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004244 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2232      	movs	r2, #50	@ 0x32
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004248 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041d8:	fba2 2303 	umull	r2, r3, r2, r3
 80041dc:	0c9b      	lsrs	r3, r3, #18
 80041de:	3301      	adds	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041e2:	e002      	b.n	80041ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ea:	4b15      	ldr	r3, [pc, #84]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f6:	d102      	bne.n	80041fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f2      	bne.n	80041e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041fe:	4b10      	ldr	r3, [pc, #64]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800420a:	d112      	bne.n	8004232 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e011      	b.n	8004234 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004210:	4b0b      	ldr	r3, [pc, #44]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004216:	4a0a      	ldr	r2, [pc, #40]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004220:	e007      	b.n	8004232 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004222:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800422a:	4a05      	ldr	r2, [pc, #20]	@ (8004240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800422c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004230:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	40007000 	.word	0x40007000
 8004244:	20000004 	.word	0x20000004
 8004248:	431bde83 	.word	0x431bde83

0800424c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004250:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a04      	ldr	r2, [pc, #16]	@ (8004268 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800425a:	6093      	str	r3, [r2, #8]
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40007000 	.word	0x40007000

0800426c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e2fe      	b.n	800487c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d075      	beq.n	8004376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800428a:	4b97      	ldr	r3, [pc, #604]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004294:	4b94      	ldr	r3, [pc, #592]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	2b0c      	cmp	r3, #12
 80042a2:	d102      	bne.n	80042aa <HAL_RCC_OscConfig+0x3e>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d002      	beq.n	80042b0 <HAL_RCC_OscConfig+0x44>
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d10b      	bne.n	80042c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	4b8d      	ldr	r3, [pc, #564]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d05b      	beq.n	8004374 <HAL_RCC_OscConfig+0x108>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d157      	bne.n	8004374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e2d9      	b.n	800487c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d0:	d106      	bne.n	80042e0 <HAL_RCC_OscConfig+0x74>
 80042d2:	4b85      	ldr	r3, [pc, #532]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a84      	ldr	r2, [pc, #528]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80042d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e01d      	b.n	800431c <HAL_RCC_OscConfig+0xb0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0x98>
 80042ea:	4b7f      	ldr	r3, [pc, #508]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7e      	ldr	r2, [pc, #504]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80042f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b7c      	ldr	r3, [pc, #496]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a7b      	ldr	r2, [pc, #492]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	e00b      	b.n	800431c <HAL_RCC_OscConfig+0xb0>
 8004304:	4b78      	ldr	r3, [pc, #480]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a77      	ldr	r2, [pc, #476]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 800430a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	4b75      	ldr	r3, [pc, #468]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a74      	ldr	r2, [pc, #464]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800431a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d013      	beq.n	800434c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd f948 	bl	80015b8 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800432c:	f7fd f944 	bl	80015b8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	@ 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e29e      	b.n	800487c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800433e:	4b6a      	ldr	r3, [pc, #424]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0xc0>
 800434a:	e014      	b.n	8004376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd f934 	bl	80015b8 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004354:	f7fd f930 	bl	80015b8 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	@ 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e28a      	b.n	800487c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004366:	4b60      	ldr	r3, [pc, #384]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0xe8>
 8004372:	e000      	b.n	8004376 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d075      	beq.n	800446e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004382:	4b59      	ldr	r3, [pc, #356]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800438c:	4b56      	ldr	r3, [pc, #344]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b0c      	cmp	r3, #12
 800439a:	d102      	bne.n	80043a2 <HAL_RCC_OscConfig+0x136>
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d002      	beq.n	80043a8 <HAL_RCC_OscConfig+0x13c>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d11f      	bne.n	80043e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043a8:	4b4f      	ldr	r3, [pc, #316]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_OscConfig+0x154>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e25d      	b.n	800487c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c0:	4b49      	ldr	r3, [pc, #292]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	061b      	lsls	r3, r3, #24
 80043ce:	4946      	ldr	r1, [pc, #280]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043d4:	4b45      	ldr	r3, [pc, #276]	@ (80044ec <HAL_RCC_OscConfig+0x280>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fd f8a1 	bl	8001520 <HAL_InitTick>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d043      	beq.n	800446c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e249      	b.n	800487c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d023      	beq.n	8004438 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f0:	4b3d      	ldr	r3, [pc, #244]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a3c      	ldr	r2, [pc, #240]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80043f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fd f8dc 	bl	80015b8 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004404:	f7fd f8d8 	bl	80015b8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e232      	b.n	800487c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004416:	4b34      	ldr	r3, [pc, #208]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004422:	4b31      	ldr	r3, [pc, #196]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	061b      	lsls	r3, r3, #24
 8004430:	492d      	ldr	r1, [pc, #180]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004432:	4313      	orrs	r3, r2
 8004434:	604b      	str	r3, [r1, #4]
 8004436:	e01a      	b.n	800446e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004438:	4b2b      	ldr	r3, [pc, #172]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2a      	ldr	r2, [pc, #168]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 800443e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fd f8b8 	bl	80015b8 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444c:	f7fd f8b4 	bl	80015b8 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e20e      	b.n	800487c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800445e:	4b22      	ldr	r3, [pc, #136]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x1e0>
 800446a:	e000      	b.n	800446e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800446c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d041      	beq.n	80044fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01c      	beq.n	80044bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004482:	4b19      	ldr	r3, [pc, #100]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 8004484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004488:	4a17      	ldr	r2, [pc, #92]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004492:	f7fd f891 	bl	80015b8 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800449a:	f7fd f88d 	bl	80015b8 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e1e7      	b.n	800487c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ac:	4b0e      	ldr	r3, [pc, #56]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80044ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0ef      	beq.n	800449a <HAL_RCC_OscConfig+0x22e>
 80044ba:	e020      	b.n	80044fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044bc:	4b0a      	ldr	r3, [pc, #40]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80044be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c2:	4a09      	ldr	r2, [pc, #36]	@ (80044e8 <HAL_RCC_OscConfig+0x27c>)
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fd f874 	bl	80015b8 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044d2:	e00d      	b.n	80044f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d4:	f7fd f870 	bl	80015b8 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d906      	bls.n	80044f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e1ca      	b.n	800487c <HAL_RCC_OscConfig+0x610>
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000
 80044ec:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044f0:	4b8c      	ldr	r3, [pc, #560]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80044f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1ea      	bne.n	80044d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80a6 	beq.w	8004658 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450c:	2300      	movs	r3, #0
 800450e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004510:	4b84      	ldr	r3, [pc, #528]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RCC_OscConfig+0x2b4>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <HAL_RCC_OscConfig+0x2b6>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00d      	beq.n	8004542 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004526:	4b7f      	ldr	r3, [pc, #508]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 8004528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452a:	4a7e      	ldr	r2, [pc, #504]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 800452c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004530:	6593      	str	r3, [r2, #88]	@ 0x58
 8004532:	4b7c      	ldr	r3, [pc, #496]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800453e:	2301      	movs	r3, #1
 8004540:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004542:	4b79      	ldr	r3, [pc, #484]	@ (8004728 <HAL_RCC_OscConfig+0x4bc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454a:	2b00      	cmp	r3, #0
 800454c:	d118      	bne.n	8004580 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800454e:	4b76      	ldr	r3, [pc, #472]	@ (8004728 <HAL_RCC_OscConfig+0x4bc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a75      	ldr	r2, [pc, #468]	@ (8004728 <HAL_RCC_OscConfig+0x4bc>)
 8004554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455a:	f7fd f82d 	bl	80015b8 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004562:	f7fd f829 	bl	80015b8 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e183      	b.n	800487c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004574:	4b6c      	ldr	r3, [pc, #432]	@ (8004728 <HAL_RCC_OscConfig+0x4bc>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d108      	bne.n	800459a <HAL_RCC_OscConfig+0x32e>
 8004588:	4b66      	ldr	r3, [pc, #408]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458e:	4a65      	ldr	r2, [pc, #404]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004598:	e024      	b.n	80045e4 <HAL_RCC_OscConfig+0x378>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d110      	bne.n	80045c4 <HAL_RCC_OscConfig+0x358>
 80045a2:	4b60      	ldr	r3, [pc, #384]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a8:	4a5e      	ldr	r2, [pc, #376]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80045aa:	f043 0304 	orr.w	r3, r3, #4
 80045ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045c2:	e00f      	b.n	80045e4 <HAL_RCC_OscConfig+0x378>
 80045c4:	4b57      	ldr	r3, [pc, #348]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ca:	4a56      	ldr	r2, [pc, #344]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045d4:	4b53      	ldr	r3, [pc, #332]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045da:	4a52      	ldr	r2, [pc, #328]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80045dc:	f023 0304 	bic.w	r3, r3, #4
 80045e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d016      	beq.n	800461a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fc ffe4 	bl	80015b8 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f7fc ffe0 	bl	80015b8 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e138      	b.n	800487c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800460a:	4b46      	ldr	r3, [pc, #280]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0ed      	beq.n	80045f4 <HAL_RCC_OscConfig+0x388>
 8004618:	e015      	b.n	8004646 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461a:	f7fc ffcd 	bl	80015b8 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004620:	e00a      	b.n	8004638 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004622:	f7fc ffc9 	bl	80015b8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e121      	b.n	800487c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004638:	4b3a      	ldr	r3, [pc, #232]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1ed      	bne.n	8004622 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004646:	7ffb      	ldrb	r3, [r7, #31]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d105      	bne.n	8004658 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464c:	4b35      	ldr	r3, [pc, #212]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 800464e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004650:	4a34      	ldr	r2, [pc, #208]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 8004652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004656:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d03c      	beq.n	80046de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01c      	beq.n	80046a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800466c:	4b2d      	ldr	r3, [pc, #180]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 800466e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004672:	4a2c      	ldr	r2, [pc, #176]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fc ff9c 	bl	80015b8 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004684:	f7fc ff98 	bl	80015b8 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0f2      	b.n	800487c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004696:	4b23      	ldr	r3, [pc, #140]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 8004698:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ef      	beq.n	8004684 <HAL_RCC_OscConfig+0x418>
 80046a4:	e01b      	b.n	80046de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80046a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fc ff7f 	bl	80015b8 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046be:	f7fc ff7b 	bl	80015b8 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e0d5      	b.n	800487c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046d0:	4b14      	ldr	r3, [pc, #80]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80046d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1ef      	bne.n	80046be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80c9 	beq.w	800487a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	f000 8083 	beq.w	80047fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d15e      	bne.n	80047bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fe:	4b09      	ldr	r3, [pc, #36]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a08      	ldr	r2, [pc, #32]	@ (8004724 <HAL_RCC_OscConfig+0x4b8>)
 8004704:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470a:	f7fc ff55 	bl	80015b8 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004710:	e00c      	b.n	800472c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004712:	f7fc ff51 	bl	80015b8 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d905      	bls.n	800472c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0ab      	b.n	800487c <HAL_RCC_OscConfig+0x610>
 8004724:	40021000 	.word	0x40021000
 8004728:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800472c:	4b55      	ldr	r3, [pc, #340]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1ec      	bne.n	8004712 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004738:	4b52      	ldr	r3, [pc, #328]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	4b52      	ldr	r3, [pc, #328]	@ (8004888 <HAL_RCC_OscConfig+0x61c>)
 800473e:	4013      	ands	r3, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6a11      	ldr	r1, [r2, #32]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004748:	3a01      	subs	r2, #1
 800474a:	0112      	lsls	r2, r2, #4
 800474c:	4311      	orrs	r1, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004752:	0212      	lsls	r2, r2, #8
 8004754:	4311      	orrs	r1, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800475a:	0852      	lsrs	r2, r2, #1
 800475c:	3a01      	subs	r2, #1
 800475e:	0552      	lsls	r2, r2, #21
 8004760:	4311      	orrs	r1, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004766:	0852      	lsrs	r2, r2, #1
 8004768:	3a01      	subs	r2, #1
 800476a:	0652      	lsls	r2, r2, #25
 800476c:	4311      	orrs	r1, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004772:	06d2      	lsls	r2, r2, #27
 8004774:	430a      	orrs	r2, r1
 8004776:	4943      	ldr	r1, [pc, #268]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 8004778:	4313      	orrs	r3, r2
 800477a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477c:	4b41      	ldr	r3, [pc, #260]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a40      	ldr	r2, [pc, #256]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 8004782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004786:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004788:	4b3e      	ldr	r3, [pc, #248]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a3d      	ldr	r2, [pc, #244]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 800478e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004792:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fc ff10 	bl	80015b8 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fc ff0c 	bl	80015b8 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e066      	b.n	800487c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ae:	4b35      	ldr	r3, [pc, #212]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x530>
 80047ba:	e05e      	b.n	800487a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047bc:	4b31      	ldr	r3, [pc, #196]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a30      	ldr	r2, [pc, #192]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 80047c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fc fef6 	bl	80015b8 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fc fef2 	bl	80015b8 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e04c      	b.n	800487c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e2:	4b28      	ldr	r3, [pc, #160]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80047ee:	4b25      	ldr	r3, [pc, #148]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	4924      	ldr	r1, [pc, #144]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 80047f4:	4b25      	ldr	r3, [pc, #148]	@ (800488c <HAL_RCC_OscConfig+0x620>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	60cb      	str	r3, [r1, #12]
 80047fa:	e03e      	b.n	800487a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e039      	b.n	800487c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004808:	4b1e      	ldr	r3, [pc, #120]	@ (8004884 <HAL_RCC_OscConfig+0x618>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f003 0203 	and.w	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	429a      	cmp	r2, r3
 800481a:	d12c      	bne.n	8004876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	3b01      	subs	r3, #1
 8004828:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d123      	bne.n	8004876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d11b      	bne.n	8004876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004848:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d113      	bne.n	8004876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	3b01      	subs	r3, #1
 800485c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d109      	bne.n	8004876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800486c:	085b      	lsrs	r3, r3, #1
 800486e:	3b01      	subs	r3, #1
 8004870:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d001      	beq.n	800487a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3720      	adds	r7, #32
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40021000 	.word	0x40021000
 8004888:	019f800c 	.word	0x019f800c
 800488c:	feeefffc 	.word	0xfeeefffc

08004890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e11e      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048a8:	4b91      	ldr	r3, [pc, #580]	@ (8004af0 <HAL_RCC_ClockConfig+0x260>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d910      	bls.n	80048d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b8e      	ldr	r3, [pc, #568]	@ (8004af0 <HAL_RCC_ClockConfig+0x260>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 020f 	bic.w	r2, r3, #15
 80048be:	498c      	ldr	r1, [pc, #560]	@ (8004af0 <HAL_RCC_ClockConfig+0x260>)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c6:	4b8a      	ldr	r3, [pc, #552]	@ (8004af0 <HAL_RCC_ClockConfig+0x260>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e106      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d073      	beq.n	80049cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d129      	bne.n	8004940 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ec:	4b81      	ldr	r3, [pc, #516]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0f4      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80048fc:	f000 f966 	bl	8004bcc <RCC_GetSysClockFreqFromPLLSource>
 8004900:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	4a7c      	ldr	r2, [pc, #496]	@ (8004af8 <HAL_RCC_ClockConfig+0x268>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d93f      	bls.n	800498a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800490a:	4b7a      	ldr	r3, [pc, #488]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800491e:	2b00      	cmp	r3, #0
 8004920:	d033      	beq.n	800498a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004926:	2b00      	cmp	r3, #0
 8004928:	d12f      	bne.n	800498a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800492a:	4b72      	ldr	r3, [pc, #456]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004932:	4a70      	ldr	r2, [pc, #448]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004938:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800493a:	2380      	movs	r3, #128	@ 0x80
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	e024      	b.n	800498a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d107      	bne.n	8004958 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004948:	4b6a      	ldr	r3, [pc, #424]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0c6      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004958:	4b66      	ldr	r3, [pc, #408]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0be      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004968:	f000 f8ce 	bl	8004b08 <HAL_RCC_GetSysClockFreq>
 800496c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4a61      	ldr	r2, [pc, #388]	@ (8004af8 <HAL_RCC_ClockConfig+0x268>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d909      	bls.n	800498a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004976:	4b5f      	ldr	r3, [pc, #380]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800497e:	4a5d      	ldr	r2, [pc, #372]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004984:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004986:	2380      	movs	r3, #128	@ 0x80
 8004988:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800498a:	4b5a      	ldr	r3, [pc, #360]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f023 0203 	bic.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4957      	ldr	r1, [pc, #348]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004998:	4313      	orrs	r3, r2
 800499a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499c:	f7fc fe0c 	bl	80015b8 <HAL_GetTick>
 80049a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a4:	f7fc fe08 	bl	80015b8 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e095      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ba:	4b4e      	ldr	r3, [pc, #312]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 020c 	and.w	r2, r3, #12
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d1eb      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d023      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e4:	4b43      	ldr	r3, [pc, #268]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	4a42      	ldr	r2, [pc, #264]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 80049ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80049fc:	4b3d      	ldr	r3, [pc, #244]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004a04:	4a3b      	ldr	r2, [pc, #236]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004a06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a0c:	4b39      	ldr	r3, [pc, #228]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	4936      	ldr	r1, [pc, #216]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b80      	cmp	r3, #128	@ 0x80
 8004a24:	d105      	bne.n	8004a32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a26:	4b33      	ldr	r3, [pc, #204]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	4a32      	ldr	r2, [pc, #200]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004a2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a32:	4b2f      	ldr	r3, [pc, #188]	@ (8004af0 <HAL_RCC_ClockConfig+0x260>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d21d      	bcs.n	8004a7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a40:	4b2b      	ldr	r3, [pc, #172]	@ (8004af0 <HAL_RCC_ClockConfig+0x260>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f023 020f 	bic.w	r2, r3, #15
 8004a48:	4929      	ldr	r1, [pc, #164]	@ (8004af0 <HAL_RCC_ClockConfig+0x260>)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a50:	f7fc fdb2 	bl	80015b8 <HAL_GetTick>
 8004a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a56:	e00a      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a58:	f7fc fdae 	bl	80015b8 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e03b      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b20      	ldr	r3, [pc, #128]	@ (8004af0 <HAL_RCC_ClockConfig+0x260>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d1ed      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a88:	4b1a      	ldr	r3, [pc, #104]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4917      	ldr	r1, [pc, #92]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aa6:	4b13      	ldr	r3, [pc, #76]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	490f      	ldr	r1, [pc, #60]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aba:	f000 f825 	bl	8004b08 <HAL_RCC_GetSysClockFreq>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8004af4 <HAL_RCC_ClockConfig+0x264>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	490c      	ldr	r1, [pc, #48]	@ (8004afc <HAL_RCC_ClockConfig+0x26c>)
 8004acc:	5ccb      	ldrb	r3, [r1, r3]
 8004ace:	f003 031f 	and.w	r3, r3, #31
 8004ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8004b00 <HAL_RCC_ClockConfig+0x270>)
 8004ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ada:	4b0a      	ldr	r3, [pc, #40]	@ (8004b04 <HAL_RCC_ClockConfig+0x274>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fc fd1e 	bl	8001520 <HAL_InitTick>
 8004ae4:	4603      	mov	r3, r0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40022000 	.word	0x40022000
 8004af4:	40021000 	.word	0x40021000
 8004af8:	04c4b400 	.word	0x04c4b400
 8004afc:	08005b24 	.word	0x08005b24
 8004b00:	20000004 	.word	0x20000004
 8004b04:	20000008 	.word	0x20000008

08004b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d102      	bne.n	8004b20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	e047      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b20:	4b27      	ldr	r3, [pc, #156]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 030c 	and.w	r3, r3, #12
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d102      	bne.n	8004b32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b2c:	4b26      	ldr	r3, [pc, #152]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	e03e      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b32:	4b23      	ldr	r3, [pc, #140]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b0c      	cmp	r3, #12
 8004b3c:	d136      	bne.n	8004bac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b3e:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b48:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	3301      	adds	r3, #1
 8004b54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d10c      	bne.n	8004b76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	4a16      	ldr	r2, [pc, #88]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b66:	68d2      	ldr	r2, [r2, #12]
 8004b68:	0a12      	lsrs	r2, r2, #8
 8004b6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	617b      	str	r3, [r7, #20]
      break;
 8004b74:	e00c      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b76:	4a13      	ldr	r2, [pc, #76]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7e:	4a10      	ldr	r2, [pc, #64]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b80:	68d2      	ldr	r2, [r2, #12]
 8004b82:	0a12      	lsrs	r2, r2, #8
 8004b84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b88:	fb02 f303 	mul.w	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]
      break;
 8004b8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b90:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	0e5b      	lsrs	r3, r3, #25
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	e001      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004bb0:	693b      	ldr	r3, [r7, #16]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	00f42400 	.word	0x00f42400
 8004bc8:	007a1200 	.word	0x007a1200

08004bcc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8004c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d10c      	bne.n	8004c0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bf0:	4a17      	ldr	r2, [pc, #92]	@ (8004c50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	4a14      	ldr	r2, [pc, #80]	@ (8004c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bfa:	68d2      	ldr	r2, [r2, #12]
 8004bfc:	0a12      	lsrs	r2, r2, #8
 8004bfe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
 8004c06:	617b      	str	r3, [r7, #20]
    break;
 8004c08:	e00c      	b.n	8004c24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c0a:	4a12      	ldr	r2, [pc, #72]	@ (8004c54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	4a0e      	ldr	r2, [pc, #56]	@ (8004c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c14:	68d2      	ldr	r2, [r2, #12]
 8004c16:	0a12      	lsrs	r2, r2, #8
 8004c18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004c1c:	fb02 f303 	mul.w	r3, r2, r3
 8004c20:	617b      	str	r3, [r7, #20]
    break;
 8004c22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c24:	4b09      	ldr	r3, [pc, #36]	@ (8004c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	0e5b      	lsrs	r3, r3, #25
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	3301      	adds	r3, #1
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c3e:	687b      	ldr	r3, [r7, #4]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	007a1200 	.word	0x007a1200
 8004c54:	00f42400 	.word	0x00f42400

08004c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c60:	2300      	movs	r3, #0
 8004c62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c64:	2300      	movs	r3, #0
 8004c66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8098 	beq.w	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c76:	2300      	movs	r3, #0
 8004c78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7a:	4b43      	ldr	r3, [pc, #268]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10d      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c86:	4b40      	ldr	r3, [pc, #256]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c92:	4b3d      	ldr	r3, [pc, #244]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ca2:	4b3a      	ldr	r3, [pc, #232]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a39      	ldr	r2, [pc, #228]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cae:	f7fc fc83 	bl	80015b8 <HAL_GetTick>
 8004cb2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cb4:	e009      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb6:	f7fc fc7f 	bl	80015b8 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d902      	bls.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	74fb      	strb	r3, [r7, #19]
        break;
 8004cc8:	e005      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cca:	4b30      	ldr	r3, [pc, #192]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0ef      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004cd6:	7cfb      	ldrb	r3, [r7, #19]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d159      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01e      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d019      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cf8:	4b23      	ldr	r3, [pc, #140]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d04:	4b20      	ldr	r3, [pc, #128]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d14:	4b1c      	ldr	r3, [pc, #112]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d24:	4a18      	ldr	r2, [pc, #96]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d016      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d36:	f7fc fc3f 	bl	80015b8 <HAL_GetTick>
 8004d3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d3c:	e00b      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3e:	f7fc fc3b 	bl	80015b8 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d902      	bls.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	74fb      	strb	r3, [r7, #19]
            break;
 8004d54:	e006      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d56:	4b0c      	ldr	r3, [pc, #48]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ec      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d64:	7cfb      	ldrb	r3, [r7, #19]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d6a:	4b07      	ldr	r3, [pc, #28]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	4903      	ldr	r1, [pc, #12]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d80:	e008      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	74bb      	strb	r3, [r7, #18]
 8004d86:	e005      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d90:	7cfb      	ldrb	r3, [r7, #19]
 8004d92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d94:	7c7b      	ldrb	r3, [r7, #17]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d105      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9a:	4ba6      	ldr	r3, [pc, #664]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9e:	4aa5      	ldr	r2, [pc, #660]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004db2:	4ba0      	ldr	r3, [pc, #640]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db8:	f023 0203 	bic.w	r2, r3, #3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	499c      	ldr	r1, [pc, #624]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dd4:	4b97      	ldr	r3, [pc, #604]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dda:	f023 020c 	bic.w	r2, r3, #12
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	4994      	ldr	r1, [pc, #592]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004df6:	4b8f      	ldr	r3, [pc, #572]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	498b      	ldr	r1, [pc, #556]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e18:	4b86      	ldr	r3, [pc, #536]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	4983      	ldr	r1, [pc, #524]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e3a:	4b7e      	ldr	r3, [pc, #504]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e40:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	497a      	ldr	r1, [pc, #488]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e5c:	4b75      	ldr	r3, [pc, #468]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e62:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	4972      	ldr	r1, [pc, #456]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	4969      	ldr	r1, [pc, #420]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ea0:	4b64      	ldr	r3, [pc, #400]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	4961      	ldr	r1, [pc, #388]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	4958      	ldr	r1, [pc, #352]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ee4:	4b53      	ldr	r3, [pc, #332]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef2:	4950      	ldr	r1, [pc, #320]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f02:	d105      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f04:	4b4b      	ldr	r3, [pc, #300]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4a4a      	ldr	r2, [pc, #296]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f1c:	4b45      	ldr	r3, [pc, #276]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	4942      	ldr	r1, [pc, #264]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a3c      	ldr	r2, [pc, #240]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f46:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f54:	4b37      	ldr	r3, [pc, #220]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f62:	4934      	ldr	r1, [pc, #208]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f72:	d105      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f74:	4b2f      	ldr	r3, [pc, #188]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a2e      	ldr	r2, [pc, #184]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f8c:	4b29      	ldr	r3, [pc, #164]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9a:	4926      	ldr	r1, [pc, #152]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fac:	4b21      	ldr	r3, [pc, #132]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a20      	ldr	r2, [pc, #128]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fb6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd2:	4918      	ldr	r1, [pc, #96]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe4:	4b13      	ldr	r3, [pc, #76]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a12      	ldr	r2, [pc, #72]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d015      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005002:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500a:	490a      	ldr	r1, [pc, #40]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005016:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800501c:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a04      	ldr	r2, [pc, #16]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005026:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005028:	7cbb      	ldrb	r3, [r7, #18]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000

08005038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e049      	b.n	80050de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fc f930 	bl	80012c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f000 fb1c 	bl	80056b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d001      	beq.n	8005100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e04a      	b.n	8005196 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a21      	ldr	r2, [pc, #132]	@ (80051a4 <HAL_TIM_Base_Start_IT+0xbc>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800512a:	d013      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1d      	ldr	r2, [pc, #116]	@ (80051a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1c      	ldr	r2, [pc, #112]	@ (80051ac <HAL_TIM_Base_Start_IT+0xc4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1a      	ldr	r2, [pc, #104]	@ (80051b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_TIM_Base_Start_IT+0x6c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a19      	ldr	r2, [pc, #100]	@ (80051b4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d115      	bne.n	8005180 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	4b17      	ldr	r3, [pc, #92]	@ (80051b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800515c:	4013      	ands	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b06      	cmp	r3, #6
 8005164:	d015      	beq.n	8005192 <HAL_TIM_Base_Start_IT+0xaa>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800516c:	d011      	beq.n	8005192 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0201 	orr.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517e:	e008      	b.n	8005192 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e000      	b.n	8005194 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800
 80051b0:	40013400 	.word	0x40013400
 80051b4:	40014000 	.word	0x40014000
 80051b8:	00010007 	.word	0x00010007

080051bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d020      	beq.n	8005220 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01b      	beq.n	8005220 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0202 	mvn.w	r2, #2
 80051f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa36 	bl	8005678 <HAL_TIM_IC_CaptureCallback>
 800520c:	e005      	b.n	800521a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fa28 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fa39 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	d020      	beq.n	800526c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01b      	beq.n	800526c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0204 	mvn.w	r2, #4
 800523c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fa10 	bl	8005678 <HAL_TIM_IC_CaptureCallback>
 8005258:	e005      	b.n	8005266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fa02 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fa13 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d020      	beq.n	80052b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01b      	beq.n	80052b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0208 	mvn.w	r2, #8
 8005288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2204      	movs	r2, #4
 800528e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f9ea 	bl	8005678 <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f9dc 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f9ed 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d020      	beq.n	8005304 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01b      	beq.n	8005304 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0210 	mvn.w	r2, #16
 80052d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2208      	movs	r2, #8
 80052da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f9c4 	bl	8005678 <HAL_TIM_IC_CaptureCallback>
 80052f0:	e005      	b.n	80052fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f9b6 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f9c7 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00c      	beq.n	8005328 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0201 	mvn.w	r2, #1
 8005320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f994 	bl	8005650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00c      	beq.n	8005356 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800534e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fb73 	bl	8005a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00c      	beq.n	800537a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fb6b 	bl	8005a50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00c      	beq.n	800539e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	d007      	beq.n	800539e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f981 	bl	80056a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00c      	beq.n	80053c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d007      	beq.n	80053c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f06f 0220 	mvn.w	r2, #32
 80053ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fb33 	bl	8005a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00c      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80053de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fb3f 	bl	8005a64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00c      	beq.n	800540a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fb37 	bl	8005a78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00c      	beq.n	800542e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fb2f 	bl	8005a8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00c      	beq.n	8005452 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800544a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fb27 	bl	8005aa0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005452:	bf00      	nop
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_TIM_ConfigClockSource+0x1c>
 8005474:	2302      	movs	r3, #2
 8005476:	e0de      	b.n	8005636 <HAL_TIM_ConfigClockSource+0x1da>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005496:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800549a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a63      	ldr	r2, [pc, #396]	@ (8005640 <HAL_TIM_ConfigClockSource+0x1e4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	f000 80a9 	beq.w	800560a <HAL_TIM_ConfigClockSource+0x1ae>
 80054b8:	4a61      	ldr	r2, [pc, #388]	@ (8005640 <HAL_TIM_ConfigClockSource+0x1e4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	f200 80ae 	bhi.w	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 80054c0:	4a60      	ldr	r2, [pc, #384]	@ (8005644 <HAL_TIM_ConfigClockSource+0x1e8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	f000 80a1 	beq.w	800560a <HAL_TIM_ConfigClockSource+0x1ae>
 80054c8:	4a5e      	ldr	r2, [pc, #376]	@ (8005644 <HAL_TIM_ConfigClockSource+0x1e8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	f200 80a6 	bhi.w	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 80054d0:	4a5d      	ldr	r2, [pc, #372]	@ (8005648 <HAL_TIM_ConfigClockSource+0x1ec>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	f000 8099 	beq.w	800560a <HAL_TIM_ConfigClockSource+0x1ae>
 80054d8:	4a5b      	ldr	r2, [pc, #364]	@ (8005648 <HAL_TIM_ConfigClockSource+0x1ec>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	f200 809e 	bhi.w	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 80054e0:	4a5a      	ldr	r2, [pc, #360]	@ (800564c <HAL_TIM_ConfigClockSource+0x1f0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	f000 8091 	beq.w	800560a <HAL_TIM_ConfigClockSource+0x1ae>
 80054e8:	4a58      	ldr	r2, [pc, #352]	@ (800564c <HAL_TIM_ConfigClockSource+0x1f0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	f200 8096 	bhi.w	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 80054f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80054f4:	f000 8089 	beq.w	800560a <HAL_TIM_ConfigClockSource+0x1ae>
 80054f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80054fc:	f200 808e 	bhi.w	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 8005500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005504:	d03e      	beq.n	8005584 <HAL_TIM_ConfigClockSource+0x128>
 8005506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800550a:	f200 8087 	bhi.w	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 800550e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005512:	f000 8086 	beq.w	8005622 <HAL_TIM_ConfigClockSource+0x1c6>
 8005516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551a:	d87f      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 800551c:	2b70      	cmp	r3, #112	@ 0x70
 800551e:	d01a      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0xfa>
 8005520:	2b70      	cmp	r3, #112	@ 0x70
 8005522:	d87b      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 8005524:	2b60      	cmp	r3, #96	@ 0x60
 8005526:	d050      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0x16e>
 8005528:	2b60      	cmp	r3, #96	@ 0x60
 800552a:	d877      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 800552c:	2b50      	cmp	r3, #80	@ 0x50
 800552e:	d03c      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x14e>
 8005530:	2b50      	cmp	r3, #80	@ 0x50
 8005532:	d873      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 8005534:	2b40      	cmp	r3, #64	@ 0x40
 8005536:	d058      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0x18e>
 8005538:	2b40      	cmp	r3, #64	@ 0x40
 800553a:	d86f      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 800553c:	2b30      	cmp	r3, #48	@ 0x30
 800553e:	d064      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x1ae>
 8005540:	2b30      	cmp	r3, #48	@ 0x30
 8005542:	d86b      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 8005544:	2b20      	cmp	r3, #32
 8005546:	d060      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x1ae>
 8005548:	2b20      	cmp	r3, #32
 800554a:	d867      	bhi.n	800561c <HAL_TIM_ConfigClockSource+0x1c0>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d05c      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x1ae>
 8005550:	2b10      	cmp	r3, #16
 8005552:	d05a      	beq.n	800560a <HAL_TIM_ConfigClockSource+0x1ae>
 8005554:	e062      	b.n	800561c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005566:	f000 f9bd 	bl	80058e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	609a      	str	r2, [r3, #8]
      break;
 8005582:	e04f      	b.n	8005624 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005594:	f000 f9a6 	bl	80058e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055a6:	609a      	str	r2, [r3, #8]
      break;
 80055a8:	e03c      	b.n	8005624 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055b6:	461a      	mov	r2, r3
 80055b8:	f000 f918 	bl	80057ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2150      	movs	r1, #80	@ 0x50
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f971 	bl	80058aa <TIM_ITRx_SetConfig>
      break;
 80055c8:	e02c      	b.n	8005624 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055d6:	461a      	mov	r2, r3
 80055d8:	f000 f937 	bl	800584a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2160      	movs	r1, #96	@ 0x60
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 f961 	bl	80058aa <TIM_ITRx_SetConfig>
      break;
 80055e8:	e01c      	b.n	8005624 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f6:	461a      	mov	r2, r3
 80055f8:	f000 f8f8 	bl	80057ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2140      	movs	r1, #64	@ 0x40
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f951 	bl	80058aa <TIM_ITRx_SetConfig>
      break;
 8005608:	e00c      	b.n	8005624 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4619      	mov	r1, r3
 8005614:	4610      	mov	r0, r2
 8005616:	f000 f948 	bl	80058aa <TIM_ITRx_SetConfig>
      break;
 800561a:	e003      	b.n	8005624 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
      break;
 8005620:	e000      	b.n	8005624 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005634:	7bfb      	ldrb	r3, [r7, #15]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	00100070 	.word	0x00100070
 8005644:	00100040 	.word	0x00100040
 8005648:	00100030 	.word	0x00100030
 800564c:	00100020 	.word	0x00100020

08005650 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a42      	ldr	r2, [pc, #264]	@ (80057d0 <TIM_Base_SetConfig+0x11c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00f      	beq.n	80056ec <TIM_Base_SetConfig+0x38>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d2:	d00b      	beq.n	80056ec <TIM_Base_SetConfig+0x38>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a3f      	ldr	r2, [pc, #252]	@ (80057d4 <TIM_Base_SetConfig+0x120>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <TIM_Base_SetConfig+0x38>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a3e      	ldr	r2, [pc, #248]	@ (80057d8 <TIM_Base_SetConfig+0x124>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_Base_SetConfig+0x38>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a3d      	ldr	r2, [pc, #244]	@ (80057dc <TIM_Base_SetConfig+0x128>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d108      	bne.n	80056fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a33      	ldr	r2, [pc, #204]	@ (80057d0 <TIM_Base_SetConfig+0x11c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01b      	beq.n	800573e <TIM_Base_SetConfig+0x8a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800570c:	d017      	beq.n	800573e <TIM_Base_SetConfig+0x8a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a30      	ldr	r2, [pc, #192]	@ (80057d4 <TIM_Base_SetConfig+0x120>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <TIM_Base_SetConfig+0x8a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2f      	ldr	r2, [pc, #188]	@ (80057d8 <TIM_Base_SetConfig+0x124>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00f      	beq.n	800573e <TIM_Base_SetConfig+0x8a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2e      	ldr	r2, [pc, #184]	@ (80057dc <TIM_Base_SetConfig+0x128>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00b      	beq.n	800573e <TIM_Base_SetConfig+0x8a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2d      	ldr	r2, [pc, #180]	@ (80057e0 <TIM_Base_SetConfig+0x12c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <TIM_Base_SetConfig+0x8a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2c      	ldr	r2, [pc, #176]	@ (80057e4 <TIM_Base_SetConfig+0x130>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d003      	beq.n	800573e <TIM_Base_SetConfig+0x8a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2b      	ldr	r2, [pc, #172]	@ (80057e8 <TIM_Base_SetConfig+0x134>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d108      	bne.n	8005750 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a16      	ldr	r2, [pc, #88]	@ (80057d0 <TIM_Base_SetConfig+0x11c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00f      	beq.n	800579c <TIM_Base_SetConfig+0xe8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a17      	ldr	r2, [pc, #92]	@ (80057dc <TIM_Base_SetConfig+0x128>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00b      	beq.n	800579c <TIM_Base_SetConfig+0xe8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a16      	ldr	r2, [pc, #88]	@ (80057e0 <TIM_Base_SetConfig+0x12c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d007      	beq.n	800579c <TIM_Base_SetConfig+0xe8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a15      	ldr	r2, [pc, #84]	@ (80057e4 <TIM_Base_SetConfig+0x130>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_Base_SetConfig+0xe8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a14      	ldr	r2, [pc, #80]	@ (80057e8 <TIM_Base_SetConfig+0x134>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d103      	bne.n	80057a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d105      	bne.n	80057c2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f023 0201 	bic.w	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	611a      	str	r2, [r3, #16]
  }
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40013400 	.word	0x40013400
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800

080057ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 0201 	bic.w	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f023 030a 	bic.w	r3, r3, #10
 8005828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800584a:	b480      	push	{r7}
 800584c:	b087      	sub	sp, #28
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f023 0210 	bic.w	r2, r3, #16
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	031b      	lsls	r3, r3, #12
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005886:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80058c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f043 0307 	orr.w	r3, r3, #7
 80058d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	609a      	str	r2, [r3, #8]
}
 80058d8:	bf00      	nop
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	021a      	lsls	r2, r3, #8
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	431a      	orrs	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4313      	orrs	r3, r2
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	609a      	str	r2, [r3, #8]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005938:	2302      	movs	r3, #2
 800593a:	e065      	b.n	8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a2c      	ldr	r2, [pc, #176]	@ (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a2b      	ldr	r2, [pc, #172]	@ (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d108      	bne.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005976:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800598c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d018      	beq.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b2:	d013      	beq.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a18      	ldr	r2, [pc, #96]	@ (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00e      	beq.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a17      	ldr	r2, [pc, #92]	@ (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d009      	beq.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a12      	ldr	r2, [pc, #72]	@ (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d004      	beq.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a13      	ldr	r2, [pc, #76]	@ (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d10c      	bne.n	80059f6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40013400 	.word	0x40013400
 8005a1c:	40000400 	.word	0x40000400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40014000 	.word	0x40014000

08005a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <memset>:
 8005ab4:	4402      	add	r2, r0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d100      	bne.n	8005abe <memset+0xa>
 8005abc:	4770      	bx	lr
 8005abe:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac2:	e7f9      	b.n	8005ab8 <memset+0x4>

08005ac4 <__libc_init_array>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8005afc <__libc_init_array+0x38>)
 8005ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8005b00 <__libc_init_array+0x3c>)
 8005aca:	1b64      	subs	r4, r4, r5
 8005acc:	10a4      	asrs	r4, r4, #2
 8005ace:	2600      	movs	r6, #0
 8005ad0:	42a6      	cmp	r6, r4
 8005ad2:	d109      	bne.n	8005ae8 <__libc_init_array+0x24>
 8005ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8005b04 <__libc_init_array+0x40>)
 8005ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8005b08 <__libc_init_array+0x44>)
 8005ad8:	f000 f818 	bl	8005b0c <_init>
 8005adc:	1b64      	subs	r4, r4, r5
 8005ade:	10a4      	asrs	r4, r4, #2
 8005ae0:	2600      	movs	r6, #0
 8005ae2:	42a6      	cmp	r6, r4
 8005ae4:	d105      	bne.n	8005af2 <__libc_init_array+0x2e>
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aec:	4798      	blx	r3
 8005aee:	3601      	adds	r6, #1
 8005af0:	e7ee      	b.n	8005ad0 <__libc_init_array+0xc>
 8005af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af6:	4798      	blx	r3
 8005af8:	3601      	adds	r6, #1
 8005afa:	e7f2      	b.n	8005ae2 <__libc_init_array+0x1e>
 8005afc:	08005b44 	.word	0x08005b44
 8005b00:	08005b44 	.word	0x08005b44
 8005b04:	08005b44 	.word	0x08005b44
 8005b08:	08005b48 	.word	0x08005b48

08005b0c <_init>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	bf00      	nop
 8005b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b12:	bc08      	pop	{r3}
 8005b14:	469e      	mov	lr, r3
 8005b16:	4770      	bx	lr

08005b18 <_fini>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	bf00      	nop
 8005b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1e:	bc08      	pop	{r3}
 8005b20:	469e      	mov	lr, r3
 8005b22:	4770      	bx	lr
