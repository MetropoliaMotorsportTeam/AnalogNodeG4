
AnalogNodeG4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006410  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080065e8  080065e8  000075e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006608  08006608  00008030  2**0
                  CONTENTS
  4 .ARM          00000000  08006608  08006608  00008030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006608  08006608  00008030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006608  08006608  00007608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800660c  0800660c  0000760c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08006610  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000700  20000030  08006640  00008030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  08006640  00008730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f4f  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031cf  00000000  00000000  0001dfaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00021180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f6  00000000  00000000  00022798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020cb0  00000000  00000000  0002388e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017543  00000000  00000000  0004453e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db130  00000000  00000000  0005ba81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136bb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005efc  00000000  00000000  00136bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0013caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000030 	.word	0x20000030
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080065d0 	.word	0x080065d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000034 	.word	0x20000034
 8000214:	080065d0 	.word	0x080065d0

08000218 <init_sensors>:
	}
}*/



void init_sensors(void){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
	//initialize the sensors
		for (int i = 0; i < SENSOR_NUM; i++) {
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e04b      	b.n	80002bc <init_sensors+0xa4>
			sensors[i].transfer_function = TF_3V3;
 8000224:	492a      	ldr	r1, [pc, #168]	@ (80002d0 <init_sensors+0xb8>)
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	4613      	mov	r3, r2
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	4413      	add	r3, r2
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	440b      	add	r3, r1
 8000232:	4a28      	ldr	r2, [pc, #160]	@ (80002d4 <init_sensors+0xbc>)
 8000234:	601a      	str	r2, [r3, #0]
			sensors[i].CAN_ID = 0;
 8000236:	4926      	ldr	r1, [pc, #152]	@ (80002d0 <init_sensors+0xb8>)
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	4613      	mov	r3, r2
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	4413      	add	r3, r2
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	440b      	add	r3, r1
 8000244:	3304      	adds	r3, #4
 8000246:	2200      	movs	r2, #0
 8000248:	801a      	strh	r2, [r3, #0]
			sensors[i].CAN_interval = 20;
 800024a:	4921      	ldr	r1, [pc, #132]	@ (80002d0 <init_sensors+0xb8>)
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4613      	mov	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4413      	add	r3, r2
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	440b      	add	r3, r1
 8000258:	3306      	adds	r3, #6
 800025a:	2214      	movs	r2, #20
 800025c:	801a      	strh	r2, [r3, #0]
			sensors[i].averages = 0;
 800025e:	491c      	ldr	r1, [pc, #112]	@ (80002d0 <init_sensors+0xb8>)
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4613      	mov	r3, r2
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	4413      	add	r3, r2
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	440b      	add	r3, r1
 800026c:	3308      	adds	r3, #8
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
			sensors[i].pin = i;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	b2d8      	uxtb	r0, r3
 8000276:	4916      	ldr	r1, [pc, #88]	@ (80002d0 <init_sensors+0xb8>)
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	4613      	mov	r3, r2
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	4413      	add	r3, r2
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	440b      	add	r3, r1
 8000284:	330c      	adds	r3, #12
 8000286:	4602      	mov	r2, r0
 8000288:	701a      	strb	r2, [r3, #0]
			sensors[i].high_adc = 0xFFFF;
 800028a:	4911      	ldr	r1, [pc, #68]	@ (80002d0 <init_sensors+0xb8>)
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	4613      	mov	r3, r2
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	4413      	add	r3, r2
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	440b      	add	r3, r1
 8000298:	3312      	adds	r3, #18
 800029a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800029e:	801a      	strh	r2, [r3, #0]
			sensors[i].low_adc = 0xFFFF;
 80002a0:	490b      	ldr	r1, [pc, #44]	@ (80002d0 <init_sensors+0xb8>)
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	4613      	mov	r3, r2
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	4413      	add	r3, r2
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	440b      	add	r3, r1
 80002ae:	3310      	adds	r3, #16
 80002b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002b4:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < SENSOR_NUM; i++) {
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	3301      	adds	r3, #1
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b0b      	cmp	r3, #11
 80002c0:	ddb0      	ble.n	8000224 <init_sensors+0xc>
		}
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	200002c0 	.word	0x200002c0
 80002d4:	080017c5 	.word	0x080017c5

080002d8 <Config_Setup>:

void Config_Setup(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	//initialize the sensors
	init_sensors();
 80002dc:	f7ff ff9c 	bl	8000218 <init_sensors>


#if ID == 1
    Config_1();
 80002e0:	f000 f8c8 	bl	8000474 <Config_1>
    Config_2();
#elif ID == 3
    Config_3();
#endif

	read_all_calib_values();
 80002e4:	f000 f860 	bl	80003a8 <read_all_calib_values>

}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <ADC_Calib_Update>:


void ADC_Calib_Update() { //writes all 12 * 2 calibration values into the FLASH memory
 80002ec:	b5b0      	push	{r4, r5, r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
    static FLASH_EraseInitTypeDef FlashErase;
    uint32_t PageError = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]

    // Unlock the Flash memory
    HAL_FLASH_Unlock();
 80002f6:	f004 f8a5 	bl	8004444 <HAL_FLASH_Unlock>

    //Erase memory before writing
    // Configure the flash erase parameters
    FlashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80002fa:	4b28      	ldr	r3, [pc, #160]	@ (800039c <ADC_Calib_Update+0xb0>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
    FlashErase.Page = (FLASH_ADDRESS / FLASH_PAGE_SIZE); // Convert address to page number
 8000300:	4b26      	ldr	r3, [pc, #152]	@ (800039c <ADC_Calib_Update+0xb0>)
 8000302:	4a27      	ldr	r2, [pc, #156]	@ (80003a0 <ADC_Calib_Update+0xb4>)
 8000304:	609a      	str	r2, [r3, #8]
    FlashErase.NbPages = 1;
 8000306:	4b25      	ldr	r3, [pc, #148]	@ (800039c <ADC_Calib_Update+0xb0>)
 8000308:	2201      	movs	r2, #1
 800030a:	60da      	str	r2, [r3, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800030c:	b672      	cpsid	i
}
 800030e:	bf00      	nop

    __disable_irq();

    // Perform the erase operation
    if (HAL_FLASHEx_Erase(&FlashErase, &PageError) != HAL_OK) {
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4619      	mov	r1, r3
 8000314:	4821      	ldr	r0, [pc, #132]	@ (800039c <ADC_Calib_Update+0xb0>)
 8000316:	f004 f97f 	bl	8004618 <HAL_FLASHEx_Erase>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <ADC_Calib_Update+0x38>
        // Handle the error
        Error_Handler();
 8000320:	f000 ffec 	bl	80012fc <Error_Handler>
    }

    for (int i = 0; i < SENSOR_NUM; i++) {
 8000324:	2300      	movs	r3, #0
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	e02c      	b.n	8000384 <ADC_Calib_Update+0x98>
        // Prepare data to write
        uint64_t data_to_write = (sensors[i].high_adc << 16) | sensors[i].low_adc;
 800032a:	491e      	ldr	r1, [pc, #120]	@ (80003a4 <ADC_Calib_Update+0xb8>)
 800032c:	697a      	ldr	r2, [r7, #20]
 800032e:	4613      	mov	r3, r2
 8000330:	009b      	lsls	r3, r3, #2
 8000332:	4413      	add	r3, r2
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	440b      	add	r3, r1
 8000338:	3312      	adds	r3, #18
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	0419      	lsls	r1, r3, #16
 800033e:	4819      	ldr	r0, [pc, #100]	@ (80003a4 <ADC_Calib_Update+0xb8>)
 8000340:	697a      	ldr	r2, [r7, #20]
 8000342:	4613      	mov	r3, r2
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	4413      	add	r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	4403      	add	r3, r0
 800034c:	3310      	adds	r3, #16
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	430b      	orrs	r3, r1
 8000352:	17da      	asrs	r2, r3, #31
 8000354:	461c      	mov	r4, r3
 8000356:	4615      	mov	r5, r2
 8000358:	e9c7 4502 	strd	r4, r5, [r7, #8]
        // Program the flash memory
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_ADDRESS + i * 8, data_to_write) != HAL_OK) { //TODO Figure out how to write just 32 bits without a need for filler 0s
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8000362:	f503 537c 	add.w	r3, r3, #16128	@ 0x3f00
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	4619      	mov	r1, r3
 800036a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800036e:	2000      	movs	r0, #0
 8000370:	f003 fffc 	bl	800436c <HAL_FLASH_Program>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <ADC_Calib_Update+0x92>
            Error_Handler();
 800037a:	f000 ffbf 	bl	80012fc <Error_Handler>
    for (int i = 0; i < SENSOR_NUM; i++) {
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	3301      	adds	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	2b0b      	cmp	r3, #11
 8000388:	ddcf      	ble.n	800032a <ADC_Calib_Update+0x3e>
        }
    }
    // Lock the Flash memory after operation
    HAL_FLASH_Lock();
 800038a:	f004 f87d 	bl	8004488 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800038e:	b662      	cpsie	i
}
 8000390:	bf00      	nop
    // Enable interrupts after the operation
    __enable_irq();
}
 8000392:	bf00      	nop
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bdb0      	pop	{r4, r5, r7, pc}
 800039a:	bf00      	nop
 800039c:	2000004c 	.word	0x2000004c
 80003a0:	0001003f 	.word	0x0001003f
 80003a4:	200002c0 	.word	0x200002c0

080003a8 <read_all_calib_values>:

	sensor->calib_code = code;

}

void read_all_calib_values(){
 80003a8:	b480      	push	{r7}
 80003aa:	b087      	sub	sp, #28
 80003ac:	af00      	add	r7, sp, #0

	for(int i = 0; i < SENSOR_NUM; i++){
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	e053      	b.n	800045c <read_all_calib_values+0xb4>

		uint32_t value = *(__IO uint32_t*)(FLASH_ADDRESS + i * 8);
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 80003ba:	f503 537c 	add.w	r3, r3, #16128	@ 0x3f00
 80003be:	00db      	lsls	r3, r3, #3
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	60fb      	str	r3, [r7, #12]

		uint16_t low = value;
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	817b      	strh	r3, [r7, #10]
		uint16_t high = value >> 16;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	0c1b      	lsrs	r3, r3, #16
 80003cc:	813b      	strh	r3, [r7, #8]

		sensors[i].low_adc = low;
 80003ce:	4928      	ldr	r1, [pc, #160]	@ (8000470 <read_all_calib_values+0xc8>)
 80003d0:	697a      	ldr	r2, [r7, #20]
 80003d2:	4613      	mov	r3, r2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	440b      	add	r3, r1
 80003dc:	3310      	adds	r3, #16
 80003de:	897a      	ldrh	r2, [r7, #10]
 80003e0:	801a      	strh	r2, [r3, #0]
		sensors[i].high_adc = high;
 80003e2:	4923      	ldr	r1, [pc, #140]	@ (8000470 <read_all_calib_values+0xc8>)
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	4613      	mov	r3, r2
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	4413      	add	r3, r2
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	440b      	add	r3, r1
 80003f0:	3312      	adds	r3, #18
 80003f2:	893a      	ldrh	r2, [r7, #8]
 80003f4:	801a      	strh	r2, [r3, #0]

		uint16_t default_value = 0xFFFF;
 80003f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80003fa:	80fb      	strh	r3, [r7, #6]
		int8_t code = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	74fb      	strb	r3, [r7, #19]
		if(sensors[i].low_adc != default_value )
 8000400:	491b      	ldr	r1, [pc, #108]	@ (8000470 <read_all_calib_values+0xc8>)
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	4613      	mov	r3, r2
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	4413      	add	r3, r2
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	440b      	add	r3, r1
 800040e:	3310      	adds	r3, #16
 8000410:	881b      	ldrh	r3, [r3, #0]
 8000412:	88fa      	ldrh	r2, [r7, #6]
 8000414:	429a      	cmp	r2, r3
 8000416:	d003      	beq.n	8000420 <read_all_calib_values+0x78>
				code += 1;
 8000418:	7cfb      	ldrb	r3, [r7, #19]
 800041a:	3301      	adds	r3, #1
 800041c:	b2db      	uxtb	r3, r3
 800041e:	74fb      	strb	r3, [r7, #19]
		if(sensors[i].high_adc != default_value )
 8000420:	4913      	ldr	r1, [pc, #76]	@ (8000470 <read_all_calib_values+0xc8>)
 8000422:	697a      	ldr	r2, [r7, #20]
 8000424:	4613      	mov	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	4413      	add	r3, r2
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	440b      	add	r3, r1
 800042e:	3312      	adds	r3, #18
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	88fa      	ldrh	r2, [r7, #6]
 8000434:	429a      	cmp	r2, r3
 8000436:	d003      	beq.n	8000440 <read_all_calib_values+0x98>
				code += 2;
 8000438:	7cfb      	ldrb	r3, [r7, #19]
 800043a:	3302      	adds	r3, #2
 800043c:	b2db      	uxtb	r3, r3
 800043e:	74fb      	strb	r3, [r7, #19]

		sensors[i].calib_code = code;
 8000440:	7cf8      	ldrb	r0, [r7, #19]
 8000442:	490b      	ldr	r1, [pc, #44]	@ (8000470 <read_all_calib_values+0xc8>)
 8000444:	697a      	ldr	r2, [r7, #20]
 8000446:	4613      	mov	r3, r2
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	4413      	add	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	440b      	add	r3, r1
 8000450:	330d      	adds	r3, #13
 8000452:	4602      	mov	r2, r0
 8000454:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SENSOR_NUM; i++){
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	3301      	adds	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	2b0b      	cmp	r3, #11
 8000460:	dda8      	ble.n	80003b4 <read_all_calib_values+0xc>



		//check_calib_status(&sensors[i]);
	}
}
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	371c      	adds	r7, #28
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	200002c0 	.word	0x200002c0

08000474 <Config_1>:


void Config_1(void) {
 8000474:	b4b0      	push	{r4, r5, r7}
 8000476:	b0af      	sub	sp, #188	@ 0xbc
 8000478:	af00      	add	r7, sp, #0



	Sensor BTN1 = {TF_BTN, 12, 100, 0, V5_in0};
 800047a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]
 800048a:	4b99      	ldr	r3, [pc, #612]	@ (80006f0 <Config_1+0x27c>)
 800048c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000490:	230c      	movs	r3, #12
 8000492:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 8000496:	2364      	movs	r3, #100	@ 0x64
 8000498:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 800049c:	2302      	movs	r3, #2
 800049e:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
	Sensor BTN2 = {TF_BTN, 13, 100, 0, V5_in5};
 80004a2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]
 80004b2:	4b8f      	ldr	r3, [pc, #572]	@ (80006f0 <Config_1+0x27c>)
 80004b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80004b8:	230d      	movs	r3, #13
 80004ba:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80004be:	2364      	movs	r3, #100	@ 0x64
 80004c0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
 80004c4:	2307      	movs	r3, #7
 80004c6:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
	Sensor BTN3 = {TF_BTN, 14, 100, 0, V5_in4};
 80004ca:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]
 80004da:	4b85      	ldr	r3, [pc, #532]	@ (80006f0 <Config_1+0x27c>)
 80004dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80004de:	230e      	movs	r3, #14
 80004e0:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 80004e4:	2364      	movs	r3, #100	@ 0x64
 80004e6:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80004ea:	2306      	movs	r3, #6
 80004ec:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
	Sensor APPS2 = {TF_APPS2, 2, 100, 0, V5_in1};
 80004f0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	4b7c      	ldr	r3, [pc, #496]	@ (80006f4 <Config_1+0x280>)
 8000502:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000504:	2302      	movs	r3, #2
 8000506:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800050a:	2364      	movs	r3, #100	@ 0x64
 800050c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8000510:	2303      	movs	r3, #3
 8000512:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	Sensor APPS1 = {TF_APPS1, 1, 100, 0, V24_in1};
 8000516:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]
 8000526:	4b74      	ldr	r3, [pc, #464]	@ (80006f8 <Config_1+0x284>)
 8000528:	657b      	str	r3, [r7, #84]	@ 0x54
 800052a:	2301      	movs	r3, #1
 800052c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8000530:	2364      	movs	r3, #100	@ 0x64
 8000532:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8000536:	2305      	movs	r3, #5
 8000538:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	Sensor ANGLE = {TF_24V, 6, 100, 0, V24_in0};
 800053c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
 800054c:	4b6b      	ldr	r3, [pc, #428]	@ (80006fc <Config_1+0x288>)
 800054e:	643b      	str	r3, [r7, #64]	@ 0x40
 8000550:	2306      	movs	r3, #6
 8000552:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8000556:	2364      	movs	r3, #100	@ 0x64
 8000558:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800055c:	2309      	movs	r3, #9
 800055e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	Sensor BPPS = {TF_BPPS, 3, 100, 0, V5_in2};
 8000562:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]
 8000572:	4b63      	ldr	r3, [pc, #396]	@ (8000700 <Config_1+0x28c>)
 8000574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000576:	2303      	movs	r3, #3
 8000578:	863b      	strh	r3, [r7, #48]	@ 0x30
 800057a:	2364      	movs	r3, #100	@ 0x64
 800057c:	867b      	strh	r3, [r7, #50]	@ 0x32
 800057e:	230b      	movs	r3, #11
 8000580:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	Sensor F_ROLL = {TF_5V, 10, 100, 0, V5_in6};
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	4b5b      	ldr	r3, [pc, #364]	@ (8000704 <Config_1+0x290>)
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	230a      	movs	r3, #10
 800059a:	83bb      	strh	r3, [r7, #28]
 800059c:	2364      	movs	r3, #100	@ 0x64
 800059e:	83fb      	strh	r3, [r7, #30]
 80005a0:	2308      	movs	r3, #8
 80005a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	Sensor F_HEAVE = {TF_5V, 8, 100, 0, V5_in3};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	4b53      	ldr	r3, [pc, #332]	@ (8000704 <Config_1+0x290>)
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	2308      	movs	r3, #8
 80005ba:	813b      	strh	r3, [r7, #8]
 80005bc:	2364      	movs	r3, #100	@ 0x64
 80005be:	817b      	strh	r3, [r7, #10]
 80005c0:	230a      	movs	r3, #10
 80005c2:	743b      	strb	r3, [r7, #16]

    sensors[APPS1.pin] = APPS1;
 80005c4:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80005c8:	4619      	mov	r1, r3
 80005ca:	4a4f      	ldr	r2, [pc, #316]	@ (8000708 <Config_1+0x294>)
 80005cc:	460b      	mov	r3, r1
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	440b      	add	r3, r1
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	461d      	mov	r5, r3
 80005d8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80005dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	602b      	str	r3, [r5, #0]
    sensors[APPS2.pin] = APPS2;
 80005e4:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80005e8:	4619      	mov	r1, r3
 80005ea:	4a47      	ldr	r2, [pc, #284]	@ (8000708 <Config_1+0x294>)
 80005ec:	460b      	mov	r3, r1
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	440b      	add	r3, r1
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	461d      	mov	r5, r3
 80005f8:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 80005fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000600:	6823      	ldr	r3, [r4, #0]
 8000602:	602b      	str	r3, [r5, #0]
    sensors[BPPS.pin] = BPPS;
 8000604:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000608:	4619      	mov	r1, r3
 800060a:	4a3f      	ldr	r2, [pc, #252]	@ (8000708 <Config_1+0x294>)
 800060c:	460b      	mov	r3, r1
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4413      	add	r3, r2
 8000616:	461d      	mov	r5, r3
 8000618:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800061c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800061e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000620:	6823      	ldr	r3, [r4, #0]
 8000622:	602b      	str	r3, [r5, #0]
	sensors[BTN1.pin] = BTN1;
 8000624:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8000628:	4619      	mov	r1, r3
 800062a:	4a37      	ldr	r2, [pc, #220]	@ (8000708 <Config_1+0x294>)
 800062c:	460b      	mov	r3, r1
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	440b      	add	r3, r1
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	461d      	mov	r5, r3
 8000638:	f107 04a4 	add.w	r4, r7, #164	@ 0xa4
 800063c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000640:	6823      	ldr	r3, [r4, #0]
 8000642:	602b      	str	r3, [r5, #0]
	sensors[BTN2.pin] = BTN2;
 8000644:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000648:	4619      	mov	r1, r3
 800064a:	4a2f      	ldr	r2, [pc, #188]	@ (8000708 <Config_1+0x294>)
 800064c:	460b      	mov	r3, r1
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	440b      	add	r3, r1
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	461d      	mov	r5, r3
 8000658:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 800065c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800065e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000660:	6823      	ldr	r3, [r4, #0]
 8000662:	602b      	str	r3, [r5, #0]
	sensors[BTN3.pin] = BTN3;
 8000664:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8000668:	4619      	mov	r1, r3
 800066a:	4a27      	ldr	r2, [pc, #156]	@ (8000708 <Config_1+0x294>)
 800066c:	460b      	mov	r3, r1
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	440b      	add	r3, r1
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	461d      	mov	r5, r3
 8000678:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800067c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800067e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000680:	6823      	ldr	r3, [r4, #0]
 8000682:	602b      	str	r3, [r5, #0]
	sensors[ANGLE.pin] = ANGLE;
 8000684:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000688:	4619      	mov	r1, r3
 800068a:	4a1f      	ldr	r2, [pc, #124]	@ (8000708 <Config_1+0x294>)
 800068c:	460b      	mov	r3, r1
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	440b      	add	r3, r1
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	461d      	mov	r5, r3
 8000698:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800069c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a0:	6823      	ldr	r3, [r4, #0]
 80006a2:	602b      	str	r3, [r5, #0]
	sensors[F_ROLL.pin] = F_ROLL;
 80006a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80006a8:	4619      	mov	r1, r3
 80006aa:	4a17      	ldr	r2, [pc, #92]	@ (8000708 <Config_1+0x294>)
 80006ac:	460b      	mov	r3, r1
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4413      	add	r3, r2
 80006b6:	461d      	mov	r5, r3
 80006b8:	f107 0418 	add.w	r4, r7, #24
 80006bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c0:	6823      	ldr	r3, [r4, #0]
 80006c2:	602b      	str	r3, [r5, #0]
	sensors[F_HEAVE.pin] = F_HEAVE;
 80006c4:	7c3b      	ldrb	r3, [r7, #16]
 80006c6:	4619      	mov	r1, r3
 80006c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000708 <Config_1+0x294>)
 80006ca:	460b      	mov	r3, r1
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	440b      	add	r3, r1
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	4413      	add	r3, r2
 80006d4:	461d      	mov	r5, r3
 80006d6:	1d3c      	adds	r4, r7, #4
 80006d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006dc:	6823      	ldr	r3, [r4, #0]
 80006de:	602b      	str	r3, [r5, #0]
	SensorData data = {0};
	pedalreq.output = data;
	pedalreq.inputs[2];

	*/
    CAN_interval = 20;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <Config_1+0x298>)
 80006e2:	2214      	movs	r2, #20
 80006e4:	801a      	strh	r2, [r3, #0]
}
 80006e6:	bf00      	nop
 80006e8:	37bc      	adds	r7, #188	@ 0xbc
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bcb0      	pop	{r4, r5, r7}
 80006ee:	4770      	bx	lr
 80006f0:	08001a21 	.word	0x08001a21
 80006f4:	0800199b 	.word	0x0800199b
 80006f8:	08001915 	.word	0x08001915
 80006fc:	08001845 	.word	0x08001845
 8000700:	08001885 	.word	0x08001885
 8000704:	08001805 	.word	0x08001805
 8000708:	200002c0 	.word	0x200002c0
 800070c:	200006ca 	.word	0x200006ca

08000710 <CanSend>:
CAN_Message TxMessage;

uint8_t sensor_for_calib; //Sensor calibration number
int8_t calib_select = -1; //Upper or lower calibration

void CanSend(uint8_t *TxData){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000718:	e001      	b.n	800071e <CanSend+0xe>
		Error_Handler();
 800071a:	f000 fdef 	bl	80012fc <Error_Handler>
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 0 && HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 800071e:	4809      	ldr	r0, [pc, #36]	@ (8000744 <CanSend+0x34>)
 8000720:	f003 facc 	bl	8003cbc <HAL_FDCAN_GetTxFifoFreeLevel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d007      	beq.n	800073a <CanSend+0x2a>
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	4906      	ldr	r1, [pc, #24]	@ (8000748 <CanSend+0x38>)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <CanSend+0x34>)
 8000730:	f003 f978 	bl	8003a24 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1ef      	bne.n	800071a <CanSend+0xa>
	}
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000210 	.word	0x20000210
 8000748:	200006d4 	.word	0x200006d4

0800074c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b00      	cmp	r3, #0
 800075e:	d024      	beq.n	80007aa <HAL_FDCAN_RxFifo0Callback+0x5e>
	{
		/* Retreive Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxMessage.Bytes) != HAL_OK)
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000762:	4a15      	ldr	r2, [pc, #84]	@ (80007b8 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000764:	2140      	movs	r1, #64	@ 0x40
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f003 f9a0 	bl	8003aac <HAL_FDCAN_GetRxMessage>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d002      	beq.n	8000778 <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			/* Reception Error */
			Error_Handler();
 8000772:	f000 fdc3 	bl	80012fc <Error_Handler>
 8000776:	e00e      	b.n	8000796 <HAL_FDCAN_RxFifo0Callback+0x4a>
		}else{

			RxMessage.Id = RxHeader.Identifier;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000780:	801a      	strh	r2, [r3, #0]
			RxMessage.DLC = RxHeader.DataLength;
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <HAL_FDCAN_RxFifo0Callback+0x70>)
 800078a:	709a      	strb	r2, [r3, #2]

			decode(RxMessage);
 800078c:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <HAL_FDCAN_RxFifo0Callback+0x70>)
 800078e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000792:	f000 f95b 	bl	8000a4c <decode>
		}

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000796:	2200      	movs	r2, #0
 8000798:	2101      	movs	r1, #1
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f003 faa0 	bl	8003ce0 <HAL_FDCAN_ActivateNotification>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_FDCAN_RxFifo0Callback+0x5e>
		{
			/* Notification Error */
			Error_Handler();
 80007a6:	f000 fda9 	bl	80012fc <Error_Handler>
		}
	}
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000005f 	.word	0x2000005f
 80007b8:	200006f8 	.word	0x200006f8
 80007bc:	2000005c 	.word	0x2000005c

080007c0 <print>:



void print(uint16_t select){
 80007c0:	b5b0      	push	{r4, r5, r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]

		if(sensors[select].CAN_ID){
 80007ca:	88fa      	ldrh	r2, [r7, #6]
 80007cc:	492e      	ldr	r1, [pc, #184]	@ (8000888 <print+0xc8>)
 80007ce:	4613      	mov	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	440b      	add	r3, r1
 80007d8:	3304      	adds	r3, #4
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d04f      	beq.n	8000880 <print+0xc0>

			sensors[select].data = sensors[select].transfer_function(1,sensors[select].averages, &sensors[select]);
 80007e0:	88fa      	ldrh	r2, [r7, #6]
 80007e2:	4929      	ldr	r1, [pc, #164]	@ (8000888 <print+0xc8>)
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	440b      	add	r3, r1
 80007ee:	681d      	ldr	r5, [r3, #0]
 80007f0:	88fa      	ldrh	r2, [r7, #6]
 80007f2:	4925      	ldr	r1, [pc, #148]	@ (8000888 <print+0xc8>)
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	440b      	add	r3, r1
 80007fe:	3308      	adds	r3, #8
 8000800:	6819      	ldr	r1, [r3, #0]
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4a1e      	ldr	r2, [pc, #120]	@ (8000888 <print+0xc8>)
 800080e:	4413      	add	r3, r2
 8000810:	88fc      	ldrh	r4, [r7, #6]
 8000812:	461a      	mov	r2, r3
 8000814:	2001      	movs	r0, #1
 8000816:	47a8      	blx	r5
 8000818:	4603      	mov	r3, r0
 800081a:	4619      	mov	r1, r3
 800081c:	4a1a      	ldr	r2, [pc, #104]	@ (8000888 <print+0xc8>)
 800081e:	4623      	mov	r3, r4
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4423      	add	r3, r4
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	330e      	adds	r3, #14
 800082a:	460a      	mov	r2, r1
 800082c:	801a      	strh	r2, [r3, #0]
			TxMessage.Bytes[0] = sensors[select].data;
 800082e:	88fa      	ldrh	r2, [r7, #6]
 8000830:	4915      	ldr	r1, [pc, #84]	@ (8000888 <print+0xc8>)
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	440b      	add	r3, r1
 800083c:	330e      	adds	r3, #14
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <print+0xcc>)
 8000844:	70da      	strb	r2, [r3, #3]
			TxMessage.Bytes[1] = sensors[select].data >> 8;
 8000846:	88fa      	ldrh	r2, [r7, #6]
 8000848:	490f      	ldr	r1, [pc, #60]	@ (8000888 <print+0xc8>)
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	440b      	add	r3, r1
 8000854:	330e      	adds	r3, #14
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	b29b      	uxth	r3, r3
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <print+0xcc>)
 8000860:	711a      	strb	r2, [r3, #4]
			TxHeader.Identifier = sensors[select].CAN_ID;
 8000862:	88fa      	ldrh	r2, [r7, #6]
 8000864:	4908      	ldr	r1, [pc, #32]	@ (8000888 <print+0xc8>)
 8000866:	4613      	mov	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	440b      	add	r3, r1
 8000870:	3304      	adds	r3, #4
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <print+0xd0>)
 8000878:	601a      	str	r2, [r3, #0]

			CanSend(TxMessage.Bytes);
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <print+0xd4>)
 800087c:	f7ff ff48 	bl	8000710 <CanSend>
		}

}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bdb0      	pop	{r4, r5, r7, pc}
 8000888:	200002c0 	.word	0x200002c0
 800088c:	20000068 	.word	0x20000068
 8000890:	200006d4 	.word	0x200006d4
 8000894:	2000006b 	.word	0x2000006b

08000898 <sent_calib_done>:


void sent_calib_done(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

	TxHeader.Identifier = CAN_CALIIB_DONE_ID;
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <sent_calib_done+0x64>)
 800089e:	2220      	movs	r2, #32
 80008a0:	601a      	str	r2, [r3, #0]
	TxMessage.Bytes[0] = sensor_for_calib;
 80008a2:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <sent_calib_done+0x68>)
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <sent_calib_done+0x6c>)
 80008a8:	70da      	strb	r2, [r3, #3]
	CanSend(TxMessage.Bytes);
 80008aa:	4817      	ldr	r0, [pc, #92]	@ (8000908 <sent_calib_done+0x70>)
 80008ac:	f7ff ff30 	bl	8000710 <CanSend>


	sensors[sensor_for_calib].calib_code = sensors[sensor_for_calib].calib_code | (1 << calib_select);
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <sent_calib_done+0x68>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	4a15      	ldr	r2, [pc, #84]	@ (800090c <sent_calib_done+0x74>)
 80008b8:	460b      	mov	r3, r1
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	440b      	add	r3, r1
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4413      	add	r3, r2
 80008c2:	330d      	adds	r3, #13
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b25a      	sxtb	r2, r3
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <sent_calib_done+0x78>)
 80008ca:	f993 3000 	ldrsb.w	r3, [r3]
 80008ce:	4619      	mov	r1, r3
 80008d0:	2301      	movs	r3, #1
 80008d2:	408b      	lsls	r3, r1
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b25a      	sxtb	r2, r3
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <sent_calib_done+0x68>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4619      	mov	r1, r3
 80008e0:	b2d0      	uxtb	r0, r2
 80008e2:	4a0a      	ldr	r2, [pc, #40]	@ (800090c <sent_calib_done+0x74>)
 80008e4:	460b      	mov	r3, r1
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4413      	add	r3, r2
 80008ee:	330d      	adds	r3, #13
 80008f0:	4602      	mov	r2, r0
 80008f2:	701a      	strb	r2, [r3, #0]

	ADC_Calib_Update();
 80008f4:	f7ff fcfa 	bl	80002ec <ADC_Calib_Update>

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200006d4 	.word	0x200006d4
 8000900:	20000074 	.word	0x20000074
 8000904:	20000068 	.word	0x20000068
 8000908:	2000006b 	.word	0x2000006b
 800090c:	200002c0 	.word	0x200002c0
 8000910:	20000000 	.word	0x20000000

08000914 <calibration>:

uint16_t max_value = 0;
uint16_t min_value = 65535;


void calibration(){
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

	if(calib_select == -1){
 8000918:	4b45      	ldr	r3, [pc, #276]	@ (8000a30 <calibration+0x11c>)
 800091a:	f993 3000 	ldrsb.w	r3, [r3]
 800091e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000922:	f000 8082 	beq.w	8000a2a <calibration+0x116>
		return;
	}
	else{

		calibration_counter++;
 8000926:	4b43      	ldr	r3, [pc, #268]	@ (8000a34 <calibration+0x120>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b41      	ldr	r3, [pc, #260]	@ (8000a34 <calibration+0x120>)
 8000930:	701a      	strb	r2, [r3, #0]
		//calibration_value += (sensors[sensor_for_calib].averages - calibration_value) / calibration_counter;

		if (sensors[sensor_for_calib].averages > max_value) {
 8000932:	4b41      	ldr	r3, [pc, #260]	@ (8000a38 <calibration+0x124>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	4619      	mov	r1, r3
 8000938:	4a40      	ldr	r2, [pc, #256]	@ (8000a3c <calibration+0x128>)
 800093a:	460b      	mov	r3, r1
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	440b      	add	r3, r1
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	3308      	adds	r3, #8
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a3d      	ldr	r2, [pc, #244]	@ (8000a40 <calibration+0x12c>)
 800094a:	8812      	ldrh	r2, [r2, #0]
 800094c:	4293      	cmp	r3, r2
 800094e:	d90d      	bls.n	800096c <calibration+0x58>
					max_value = sensors[sensor_for_calib].averages;
 8000950:	4b39      	ldr	r3, [pc, #228]	@ (8000a38 <calibration+0x124>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	4a39      	ldr	r2, [pc, #228]	@ (8000a3c <calibration+0x128>)
 8000958:	460b      	mov	r3, r1
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	440b      	add	r3, r1
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	3308      	adds	r3, #8
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	b29a      	uxth	r2, r3
 8000968:	4b35      	ldr	r3, [pc, #212]	@ (8000a40 <calibration+0x12c>)
 800096a:	801a      	strh	r2, [r3, #0]
				}

		if (sensors[sensor_for_calib].averages < min_value) {
 800096c:	4b32      	ldr	r3, [pc, #200]	@ (8000a38 <calibration+0x124>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	4a32      	ldr	r2, [pc, #200]	@ (8000a3c <calibration+0x128>)
 8000974:	460b      	mov	r3, r1
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	440b      	add	r3, r1
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	3308      	adds	r3, #8
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a30      	ldr	r2, [pc, #192]	@ (8000a44 <calibration+0x130>)
 8000984:	8812      	ldrh	r2, [r2, #0]
 8000986:	4293      	cmp	r3, r2
 8000988:	d20d      	bcs.n	80009a6 <calibration+0x92>
					min_value = sensors[sensor_for_calib].averages;
 800098a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a38 <calibration+0x124>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	4a2a      	ldr	r2, [pc, #168]	@ (8000a3c <calibration+0x128>)
 8000992:	460b      	mov	r3, r1
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	440b      	add	r3, r1
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	4413      	add	r3, r2
 800099c:	3308      	adds	r3, #8
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <calibration+0x130>)
 80009a4:	801a      	strh	r2, [r3, #0]
				}

		if(calibration_counter > (5000 / CAN_interval)){
 80009a6:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <calibration+0x120>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b26      	ldr	r3, [pc, #152]	@ (8000a48 <calibration+0x134>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80009b6:	fb93 f3f1 	sdiv	r3, r3, r1
 80009ba:	429a      	cmp	r2, r3
 80009bc:	dd36      	ble.n	8000a2c <calibration+0x118>

			//calibration_value = calibration_value / calibration_counter;


			if(calib_select == 0)
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <calibration+0x11c>)
 80009c0:	f993 3000 	ldrsb.w	r3, [r3]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d10d      	bne.n	80009e4 <calibration+0xd0>
				sensors[sensor_for_calib].low_adc = min_value;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <calibration+0x124>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <calibration+0x130>)
 80009d0:	8818      	ldrh	r0, [r3, #0]
 80009d2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a3c <calibration+0x128>)
 80009d4:	460b      	mov	r3, r1
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	440b      	add	r3, r1
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4413      	add	r3, r2
 80009de:	3310      	adds	r3, #16
 80009e0:	4602      	mov	r2, r0
 80009e2:	801a      	strh	r2, [r3, #0]
			if(calib_select == 1)
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <calibration+0x11c>)
 80009e6:	f993 3000 	ldrsb.w	r3, [r3]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d10d      	bne.n	8000a0a <calibration+0xf6>
				sensors[sensor_for_calib].high_adc = max_value;
 80009ee:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <calibration+0x124>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	4619      	mov	r1, r3
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <calibration+0x12c>)
 80009f6:	8818      	ldrh	r0, [r3, #0]
 80009f8:	4a10      	ldr	r2, [pc, #64]	@ (8000a3c <calibration+0x128>)
 80009fa:	460b      	mov	r3, r1
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	440b      	add	r3, r1
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	3312      	adds	r3, #18
 8000a06:	4602      	mov	r2, r0
 8000a08:	801a      	strh	r2, [r3, #0]


			sent_calib_done();
 8000a0a:	f7ff ff45 	bl	8000898 <sent_calib_done>

			calib_select = -1;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <calibration+0x11c>)
 8000a10:	22ff      	movs	r2, #255	@ 0xff
 8000a12:	701a      	strb	r2, [r3, #0]
			calibration_counter = 0;
 8000a14:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <calibration+0x120>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]

			max_value = 0;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <calibration+0x12c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	801a      	strh	r2, [r3, #0]
			min_value = 65535;
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <calibration+0x130>)
 8000a22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a26:	801a      	strh	r2, [r3, #0]
 8000a28:	e000      	b.n	8000a2c <calibration+0x118>
		return;
 8000a2a:	bf00      	nop
		}

	}
}
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000075 	.word	0x20000075
 8000a38:	20000074 	.word	0x20000074
 8000a3c:	200002c0 	.word	0x200002c0
 8000a40:	20000076 	.word	0x20000076
 8000a44:	20000002 	.word	0x20000002
 8000a48:	200006ca 	.word	0x200006ca

08000a4c <decode>:

void decode(CAN_Message msg){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	switch(msg.Id){
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	2b1f      	cmp	r3, #31
 8000a5c:	d107      	bne.n	8000a6e <decode+0x22>
		case CAN_CALIB_ID:
			sensor_for_calib = msg.Bytes[0];
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <decode+0x30>)
 8000a62:	701a      	strb	r2, [r3, #0]
			calib_select = msg.Bytes[1];
 8000a64:	7a3b      	ldrb	r3, [r7, #8]
 8000a66:	b25a      	sxtb	r2, r3
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <decode+0x34>)
 8000a6a:	701a      	strb	r2, [r3, #0]
			break;
 8000a6c:	bf00      	nop
	}
}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000074 	.word	0x20000074
 8000a80:	20000000 	.word	0x20000000

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8a:	f001 f818 	bl	8001abe <HAL_Init>

  /* USER CODE BEGIN Init */
  Config_Setup();
 8000a8e:	f7ff fc23 	bl	80002d8 <Config_Setup>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a92:	f000 f863 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a96:	f000 fb23 	bl	80010e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a9a:	f000 faef 	bl	800107c <MX_DMA_Init>
  MX_ADC1_Init();
 8000a9e:	f000 f89d 	bl	8000bdc <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000aa2:	f000 fa1d 	bl	8000ee0 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 8000aa6:	f000 fa9b 	bl	8000fe0 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000aaa:	f000 f961 	bl	8000d70 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){ Error_Handler(); };
 8000aae:	4822      	ldr	r0, [pc, #136]	@ (8000b38 <main+0xb4>)
 8000ab0:	f005 f87c 	bl	8005bac <HAL_TIM_Base_Start_IT>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <main+0x3a>
 8000aba:	f000 fc1f 	bl	80012fc <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1Data, hadc1.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000abe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <main+0xb8>)
 8000ac0:	6a1b      	ldr	r3, [r3, #32]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	491e      	ldr	r1, [pc, #120]	@ (8000b40 <main+0xbc>)
 8000ac6:	481d      	ldr	r0, [pc, #116]	@ (8000b3c <main+0xb8>)
 8000ac8:	f001 fc0c 	bl	80022e4 <HAL_ADC_Start_DMA>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <main+0x52>
 8000ad2:	f000 fc13 	bl	80012fc <Error_Handler>
  if(HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADC2Data, hadc2.Init.NbrOfConversion) != HAL_OK){ Error_Handler(); }
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <main+0xc0>)
 8000ad8:	6a1b      	ldr	r3, [r3, #32]
 8000ada:	461a      	mov	r2, r3
 8000adc:	491a      	ldr	r1, [pc, #104]	@ (8000b48 <main+0xc4>)
 8000ade:	4819      	ldr	r0, [pc, #100]	@ (8000b44 <main+0xc0>)
 8000ae0:	f001 fc00 	bl	80022e4 <HAL_ADC_Start_DMA>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <main+0x6a>
 8000aea:	f000 fc07 	bl	80012fc <Error_Handler>

  uint8_t counter = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CAN_enable == 1){
 8000af2:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <main+0xc8>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d1fb      	bne.n	8000af2 <main+0x6e>
		  if(millis % CAN_interval == 0){
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <main+0xcc>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a15      	ldr	r2, [pc, #84]	@ (8000b54 <main+0xd0>)
 8000b00:	8812      	ldrh	r2, [r2, #0]
 8000b02:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b06:	fb01 f202 	mul.w	r2, r1, r2
 8000b0a:	1a9b      	subs	r3, r3, r2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1f0      	bne.n	8000af2 <main+0x6e>
			print(counter);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe53 	bl	80007c0 <print>
			  calibration();
 8000b1a:	f7ff fefb 	bl	8000914 <calibration>
			  counter++;
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	3301      	adds	r3, #1
 8000b22:	71fb      	strb	r3, [r7, #7]
			  if(counter == SENSOR_NUM){
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b0c      	cmp	r3, #12
 8000b28:	d1e3      	bne.n	8000af2 <main+0x6e>
				  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8000b2a:	2140      	movs	r1, #64	@ 0x40
 8000b2c:	480a      	ldr	r0, [pc, #40]	@ (8000b58 <main+0xd4>)
 8000b2e:	f004 f831 	bl	8004b94 <HAL_GPIO_TogglePin>
				  counter = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	71fb      	strb	r3, [r7, #7]
	  if(CAN_enable == 1){
 8000b36:	e7dc      	b.n	8000af2 <main+0x6e>
 8000b38:	20000274 	.word	0x20000274
 8000b3c:	20000078 	.word	0x20000078
 8000b40:	200003b0 	.word	0x200003b0
 8000b44:	200000e4 	.word	0x200000e4
 8000b48:	200003bc 	.word	0x200003bc
 8000b4c:	200006d0 	.word	0x200006d0
 8000b50:	200006cc 	.word	0x200006cc
 8000b54:	200006ca 	.word	0x200006ca
 8000b58:	48000800 	.word	0x48000800

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	@ 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	2238      	movs	r2, #56	@ 0x38
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f005 fd04 	bl	8006578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b82:	f004 f821 	bl	8004bc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b90:	2340      	movs	r3, #64	@ 0x40
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b98:	f107 0318 	add.w	r3, r7, #24
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 f8c7 	bl	8004d30 <HAL_RCC_OscConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ba8:	f000 fba8 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bac:	230f      	movs	r3, #15
 8000bae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fbc5 	bl	8005354 <HAL_RCC_ClockConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000bd0:	f000 fb94 	bl	80012fc <Error_Handler>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3750      	adds	r7, #80	@ 0x50
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f005 fcbf 	bl	8006578 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bfa:	4b56      	ldr	r3, [pc, #344]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000bfc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000c02:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c04:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000c08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0a:	4b52      	ldr	r3, [pc, #328]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c10:	4b50      	ldr	r3, [pc, #320]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000c16:	4b4f      	ldr	r3, [pc, #316]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c22:	4b4c      	ldr	r3, [pc, #304]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c24:	2204      	movs	r2, #4
 8000c26:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c28:	4b4a      	ldr	r3, [pc, #296]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c2e:	4b49      	ldr	r3, [pc, #292]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8000c34:	4b47      	ldr	r3, [pc, #284]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c36:	2206      	movs	r2, #6
 8000c38:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3a:	4b46      	ldr	r3, [pc, #280]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c42:	4b44      	ldr	r3, [pc, #272]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c48:	4b42      	ldr	r3, [pc, #264]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c4e:	4b41      	ldr	r3, [pc, #260]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c56:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c64:	483b      	ldr	r0, [pc, #236]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c66:	f001 f9b9 	bl	8001fdc <HAL_ADC_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c70:	f000 fb44 	bl	80012fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4835      	ldr	r0, [pc, #212]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000c80:	f002 f928 	bl	8002ed4 <HAL_ADCEx_MultiModeConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c8a:	f000 fb37 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c8e:	4b32      	ldr	r3, [pc, #200]	@ (8000d58 <MX_ADC1_Init+0x17c>)
 8000c90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c92:	2306      	movs	r3, #6
 8000c94:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c9a:	237f      	movs	r3, #127	@ 0x7f
 8000c9c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	482a      	ldr	r0, [pc, #168]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000cac:	f001 fbe2 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000cb6:	f000 fb21 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cba:	4b28      	ldr	r3, [pc, #160]	@ (8000d5c <MX_ADC1_Init+0x180>)
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4823      	ldr	r0, [pc, #140]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000cc8:	f001 fbd4 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000cd2:	f000 fb13 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cd6:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <MX_ADC1_Init+0x184>)
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cda:	2312      	movs	r3, #18
 8000cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	481c      	ldr	r0, [pc, #112]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000ce4:	f001 fbc6 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000cee:	f000 fb05 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <MX_ADC1_Init+0x188>)
 8000cf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cf6:	2318      	movs	r3, #24
 8000cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4815      	ldr	r0, [pc, #84]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000d00:	f001 fbb8 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000d0a:	f000 faf7 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_ADC1_Init+0x18c>)
 8000d10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000d1e:	f001 fba9 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000d28:	f000 fae8 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_ADC1_Init+0x190>)
 8000d2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d30:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000d34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <MX_ADC1_Init+0x178>)
 8000d3c:	f001 fb9a 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000d46:	f000 fad9 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	3730      	adds	r7, #48	@ 0x30
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000078 	.word	0x20000078
 8000d58:	04300002 	.word	0x04300002
 8000d5c:	08600004 	.word	0x08600004
 8000d60:	0c900008 	.word	0x0c900008
 8000d64:	10c00010 	.word	0x10c00010
 8000d68:	32601000 	.word	0x32601000
 8000d6c:	3ef08000 	.word	0x3ef08000

08000d70 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2220      	movs	r2, #32
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 fbfb 	bl	8006578 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d82:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000d84:	4a4f      	ldr	r2, [pc, #316]	@ (8000ec4 <MX_ADC2_Init+0x154>)
 8000d86:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000d88:	4b4d      	ldr	r3, [pc, #308]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000d8a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000d8e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d90:	4b4b      	ldr	r3, [pc, #300]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d96:	4b4a      	ldr	r3, [pc, #296]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000d9c:	4b48      	ldr	r3, [pc, #288]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000da2:	4b47      	ldr	r3, [pc, #284]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da8:	4b45      	ldr	r3, [pc, #276]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000daa:	2204      	movs	r2, #4
 8000dac:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dae:	4b44      	ldr	r3, [pc, #272]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000db4:	4b42      	ldr	r3, [pc, #264]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 6;
 8000dba:	4b41      	ldr	r3, [pc, #260]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000dbc:	2206      	movs	r2, #6
 8000dbe:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dce:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ddc:	4b38      	ldr	r3, [pc, #224]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000de2:	4b37      	ldr	r3, [pc, #220]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dea:	4835      	ldr	r0, [pc, #212]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000dec:	f001 f8f6 	bl	8001fdc <HAL_ADC_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000df6:	f000 fa81 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dfa:	4b33      	ldr	r3, [pc, #204]	@ (8000ec8 <MX_ADC2_Init+0x158>)
 8000dfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfe:	2306      	movs	r3, #6
 8000e00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e06:	237f      	movs	r3, #127	@ 0x7f
 8000e08:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e12:	463b      	mov	r3, r7
 8000e14:	4619      	mov	r1, r3
 8000e16:	482a      	ldr	r0, [pc, #168]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000e18:	f001 fb2c 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000e22:	f000 fa6b 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e26:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <MX_ADC2_Init+0x15c>)
 8000e28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4823      	ldr	r0, [pc, #140]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000e34:	f001 fb1e 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000e3e:	f000 fa5d 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e42:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <MX_ADC2_Init+0x160>)
 8000e44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e46:	2312      	movs	r3, #18
 8000e48:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	481c      	ldr	r0, [pc, #112]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000e50:	f001 fb10 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8000e5a:	f000 fa4f 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed4 <MX_ADC2_Init+0x164>)
 8000e60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e62:	2318      	movs	r3, #24
 8000e64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4815      	ldr	r0, [pc, #84]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000e6c:	f001 fb02 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8000e76:	f000 fa41 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <MX_ADC2_Init+0x168>)
 8000e7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000e8a:	f001 faf3 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8000e94:	f000 fa32 	bl	80012fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000e98:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <MX_ADC2_Init+0x16c>)
 8000e9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000e9c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000ea0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4806      	ldr	r0, [pc, #24]	@ (8000ec0 <MX_ADC2_Init+0x150>)
 8000ea8:	f001 fae4 	bl	8002474 <HAL_ADC_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC2_Init+0x146>
  {
    Error_Handler();
 8000eb2:	f000 fa23 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	3720      	adds	r7, #32
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200000e4 	.word	0x200000e4
 8000ec4:	50000100 	.word	0x50000100
 8000ec8:	0c900008 	.word	0x0c900008
 8000ecc:	10c00010 	.word	0x10c00010
 8000ed0:	14f00020 	.word	0x14f00020
 8000ed4:	2e300800 	.word	0x2e300800
 8000ed8:	36902000 	.word	0x36902000
 8000edc:	47520000 	.word	0x47520000

08000ee0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ee4:	4b39      	ldr	r3, [pc, #228]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000ee6:	4a3a      	ldr	r2, [pc, #232]	@ (8000fd0 <MX_FDCAN1_Init+0xf0>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000eea:	4b38      	ldr	r3, [pc, #224]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ef0:	4b36      	ldr	r3, [pc, #216]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ef6:	4b35      	ldr	r3, [pc, #212]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000efc:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f02:	4b32      	ldr	r3, [pc, #200]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f08:	4b30      	ldr	r3, [pc, #192]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f14:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f1c:	220d      	movs	r2, #13
 8000f1e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f20:	4b2a      	ldr	r3, [pc, #168]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f22:	2202      	movs	r2, #2
 8000f24:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f26:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f2c:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f32:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f38:	4b24      	ldr	r3, [pc, #144]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f40:	221c      	movs	r2, #28
 8000f42:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f44:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f50:	481e      	ldr	r0, [pc, #120]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f52:	f002 fbe5 	bl	8003720 <HAL_FDCAN_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000f5c:	f000 f9ce 	bl	80012fc <Error_Handler>



*/

  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK){ Error_Handler(); }else{ HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET); CAN_enable = 1;}
 8000f60:	481a      	ldr	r0, [pc, #104]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f62:	f002 fd37 	bl	80039d4 <HAL_FDCAN_Start>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <MX_FDCAN1_Init+0x92>
 8000f6c:	f000 f9c6 	bl	80012fc <Error_Handler>
 8000f70:	e008      	b.n	8000f84 <MX_FDCAN1_Init+0xa4>
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f78:	4816      	ldr	r0, [pc, #88]	@ (8000fd4 <MX_FDCAN1_Init+0xf4>)
 8000f7a:	f003 fdf3 	bl	8004b64 <HAL_GPIO_WritePin>
 8000f7e:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <MX_FDCAN1_Init+0xf8>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK) { Error_Handler(); }
 8000f84:	2200      	movs	r2, #0
 8000f86:	2101      	movs	r1, #1
 8000f88:	4810      	ldr	r0, [pc, #64]	@ (8000fcc <MX_FDCAN1_Init+0xec>)
 8000f8a:	f002 fea9 	bl	8003ce0 <HAL_FDCAN_ActivateNotification>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_FDCAN1_Init+0xb8>
 8000f94:	f000 f9b2 	bl	80012fc <Error_Handler>



  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f98:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <MX_FDCAN1_Init+0xfc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <MX_FDCAN1_Init+0xfc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <MX_FDCAN1_Init+0xfc>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_FDCAN1_Init+0xfc>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <MX_FDCAN1_Init+0xfc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_FDCAN1_Init+0xfc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <MX_FDCAN1_Init+0xfc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_FDCAN1_Init+0xfc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000210 	.word	0x20000210
 8000fd0:	40006400 	.word	0x40006400
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	200006d0 	.word	0x200006d0
 8000fdc:	200006d4 	.word	0x200006d4

08000fe0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <MX_TIM3_Init+0x94>)
 8001000:	4a1d      	ldr	r2, [pc, #116]	@ (8001078 <MX_TIM3_Init+0x98>)
 8001002:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001004:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <MX_TIM3_Init+0x94>)
 8001006:	220f      	movs	r2, #15
 8001008:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100a:	4b1a      	ldr	r3, [pc, #104]	@ (8001074 <MX_TIM3_Init+0x94>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <MX_TIM3_Init+0x94>)
 8001012:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001016:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <MX_TIM3_Init+0x94>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <MX_TIM3_Init+0x94>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001024:	4813      	ldr	r0, [pc, #76]	@ (8001074 <MX_TIM3_Init+0x94>)
 8001026:	f004 fd69 	bl	8005afc <HAL_TIM_Base_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001030:	f000 f964 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001034:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001038:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	@ (8001074 <MX_TIM3_Init+0x94>)
 8001042:	f004 ff6d 	bl	8005f20 <HAL_TIM_ConfigClockSource>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800104c:	f000 f956 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_TIM3_Init+0x94>)
 800105e:	f005 f9c3 	bl	80063e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001068:	f000 f948 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000274 	.word	0x20000274
 8001078:	40000400 	.word	0x40000400

0800107c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_DMA_Init+0x60>)
 8001084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001086:	4a15      	ldr	r2, [pc, #84]	@ (80010dc <MX_DMA_Init+0x60>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6493      	str	r3, [r2, #72]	@ 0x48
 800108e:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <MX_DMA_Init+0x60>)
 8001090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <MX_DMA_Init+0x60>)
 800109c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109e:	4a0f      	ldr	r2, [pc, #60]	@ (80010dc <MX_DMA_Init+0x60>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80010a6:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <MX_DMA_Init+0x60>)
 80010a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	200b      	movs	r0, #11
 80010b8:	f002 f88b 	bl	80031d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010bc:	200b      	movs	r0, #11
 80010be:	f002 f8a2 	bl	8003206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	200c      	movs	r0, #12
 80010c8:	f002 f883 	bl	80031d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010cc:	200c      	movs	r0, #12
 80010ce:	f002 f89a 	bl	8003206 <HAL_NVIC_EnableIRQ>

}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000

080010e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	@ 0x28
 80010e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f6:	4b2e      	ldr	r3, [pc, #184]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	4a2d      	ldr	r2, [pc, #180]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001102:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	f003 0320 	and.w	r3, r3, #32
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	4a27      	ldr	r2, [pc, #156]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111a:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	4a21      	ldr	r2, [pc, #132]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	4a1b      	ldr	r2, [pc, #108]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <MX_GPIO_Init+0xd0>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800115c:	4815      	ldr	r0, [pc, #84]	@ (80011b4 <MX_GPIO_Init+0xd4>)
 800115e:	f003 fd01 	bl	8004b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2140      	movs	r1, #64	@ 0x40
 8001166:	4814      	ldr	r0, [pc, #80]	@ (80011b8 <MX_GPIO_Init+0xd8>)
 8001168:	f003 fcfc 	bl	8004b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800116c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480b      	ldr	r0, [pc, #44]	@ (80011b4 <MX_GPIO_Init+0xd4>)
 8001186:	f003 fb6b 	bl	8004860 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800118a:	2340      	movs	r3, #64	@ 0x40
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_GPIO_Init+0xd8>)
 80011a2:	f003 fb5d 	bl	8004860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	@ 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000400 	.word	0x48000400
 80011b8:	48000800 	.word	0x48000800

080011bc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
    // Use a static flag to ensure both ADCs have finished a conversion cycle.
    // Bit 0 for ADC1, Bit 1 for ADC2.
    static uint8_t adc_done = 0;

    if (hadc->Instance == ADC1) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011cc:	d11f      	bne.n	800120e <HAL_ADC_ConvCpltCallback+0x52>
        // Store ADC1 conversion results into sensors[0..5]
        for (int j = 0; j < hadc->Init.NbrOfConversion; j++) {
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	e00f      	b.n	80011f4 <HAL_ADC_ConvCpltCallback+0x38>
            all_raw_data[j][AVE_POS] = ADC1Data[j];
 80011d4:	4b42      	ldr	r3, [pc, #264]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x124>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	4a42      	ldr	r2, [pc, #264]	@ (80012e4 <HAL_ADC_ConvCpltCallback+0x128>)
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80011e2:	4a41      	ldr	r2, [pc, #260]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x12c>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	015b      	lsls	r3, r3, #5
 80011e8:	4403      	add	r3, r0
 80011ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 0; j < hadc->Init.NbrOfConversion; j++) {
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1a      	ldr	r2, [r3, #32]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d8ea      	bhi.n	80011d4 <HAL_ADC_ConvCpltCallback+0x18>
        }
        adc_done |= 0x01; // Mark ADC1 as done for this cycle.
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x130>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b38      	ldr	r3, [pc, #224]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x130>)
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e024      	b.n	8001258 <HAL_ADC_ConvCpltCallback+0x9c>
    }
    else if (hadc->Instance == ADC2) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a37      	ldr	r2, [pc, #220]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x134>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d11f      	bne.n	8001258 <HAL_ADC_ConvCpltCallback+0x9c>
        // Store ADC2 conversion results into sensors[6..11]
        for (int j = 0; j < hadc->Init.NbrOfConversion; j++) {
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	e010      	b.n	8001240 <HAL_ADC_ConvCpltCallback+0x84>
            all_raw_data[j + 6][AVE_POS] = ADC2Data[j];
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	3306      	adds	r3, #6
 8001222:	4a2f      	ldr	r2, [pc, #188]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x124>)
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	4610      	mov	r0, r2
 8001228:	4932      	ldr	r1, [pc, #200]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x138>)
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001230:	4a2d      	ldr	r2, [pc, #180]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x12c>)
 8001232:	015b      	lsls	r3, r3, #5
 8001234:	4403      	add	r3, r0
 8001236:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int j = 0; j < hadc->Init.NbrOfConversion; j++) {
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	3301      	adds	r3, #1
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1a      	ldr	r2, [r3, #32]
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	429a      	cmp	r2, r3
 8001248:	d8e9      	bhi.n	800121e <HAL_ADC_ConvCpltCallback+0x62>
        }
        adc_done |= 0x02; // Mark ADC2 as done for this cycle.
 800124a:	4b28      	ldr	r3, [pc, #160]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x130>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x130>)
 8001256:	701a      	strb	r2, [r3, #0]
    }

    // Once both ADC1 and ADC2 have provided data:
    if (adc_done == 0x03) {
 8001258:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x130>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d139      	bne.n	80012d4 <HAL_ADC_ConvCpltCallback+0x118>
        adc_done = 0;  // Reset the flag for the next conversion cycle.
 8001260:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x130>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
        AVE_POS++;     // Advance the sample index.
 8001266:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x124>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x124>)
 8001270:	701a      	strb	r2, [r3, #0]

        // When we have collected enough samples for a rolling average...
        if (AVE_POS >= ROLLING_AVE) {
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x124>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b1f      	cmp	r3, #31
 8001278:	d92c      	bls.n	80012d4 <HAL_ADC_ConvCpltCallback+0x118>
            // For each sensor (total SENSOR_NUM = 12 sensors)
            for (int i = 0; i < SENSOR_NUM; i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e023      	b.n	80012c8 <HAL_ADC_ConvCpltCallback+0x10c>
                uint32_t sum = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
                for (int z = 0; z < ROLLING_AVE; z++) {
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e00d      	b.n	80012a6 <HAL_ADC_ConvCpltCallback+0xea>
                    sum += all_raw_data[i][z];
 800128a:	4917      	ldr	r1, [pc, #92]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x12c>)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	015a      	lsls	r2, r3, #5
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001298:	461a      	mov	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4413      	add	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
                for (int z = 0; z < ROLLING_AVE; z++) {
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b1f      	cmp	r3, #31
 80012aa:	ddee      	ble.n	800128a <HAL_ADC_ConvCpltCallback+0xce>
                }
                // Store the average in the sensor structure.
                sensors[i].averages = sum / ROLLING_AVE;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	0959      	lsrs	r1, r3, #5
 80012b0:	4811      	ldr	r0, [pc, #68]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x13c>)
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4403      	add	r3, r0
 80012be:	3308      	adds	r3, #8
 80012c0:	6019      	str	r1, [r3, #0]
            for (int i = 0; i < SENSOR_NUM; i++) {
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3301      	adds	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2b0b      	cmp	r3, #11
 80012cc:	ddd8      	ble.n	8001280 <HAL_ADC_ConvCpltCallback+0xc4>
            }
            AVE_POS = 0;  // Reset the sample index for the next averaging period.
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x124>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80012d4:	bf00      	nop
 80012d6:	3724      	adds	r7, #36	@ 0x24
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	200006c8 	.word	0x200006c8
 80012e4:	200003b0 	.word	0x200003b0
 80012e8:	200003c8 	.word	0x200003c8
 80012ec:	20000720 	.word	0x20000720
 80012f0:	50000100 	.word	0x50000100
 80012f4:	200003bc 	.word	0x200003bc
 80012f8:	200002c0 	.word	0x200002c0

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <Error_Handler+0x8>

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HAL_MspInit+0x44>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_MspInit+0x44>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6613      	str	r3, [r2, #96]	@ 0x60
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_MspInit+0x44>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_MspInit+0x44>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_MspInit+0x44>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	6593      	str	r3, [r2, #88]	@ 0x58
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_MspInit+0x44>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800133e:	f003 fce7 	bl	8004d10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b09e      	sub	sp, #120	@ 0x78
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	2244      	movs	r2, #68	@ 0x44
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f005 f901 	bl	8006578 <memset>
  if(hadc->Instance==ADC1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800137e:	f040 8082 	bne.w	8001486 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001386:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001388:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800138c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138e:	f107 0320 	add.w	r3, r7, #32
 8001392:	4618      	mov	r0, r3
 8001394:	f004 f9c2 	bl	800571c <HAL_RCCEx_PeriphCLKConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800139e:	f7ff ffad 	bl	80012fc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013a2:	4b7e      	ldr	r3, [pc, #504]	@ (800159c <HAL_ADC_MspInit+0x24c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	4a7c      	ldr	r2, [pc, #496]	@ (800159c <HAL_ADC_MspInit+0x24c>)
 80013aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ac:	4b7b      	ldr	r3, [pc, #492]	@ (800159c <HAL_ADC_MspInit+0x24c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d10b      	bne.n	80013cc <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013b4:	4b7a      	ldr	r3, [pc, #488]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b8:	4a79      	ldr	r2, [pc, #484]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80013ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c0:	4b77      	ldr	r3, [pc, #476]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b74      	ldr	r3, [pc, #464]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d0:	4a73      	ldr	r2, [pc, #460]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d8:	4b71      	ldr	r3, [pc, #452]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b6e      	ldr	r3, [pc, #440]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e8:	4a6d      	ldr	r2, [pc, #436]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f0:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697b      	ldr	r3, [r7, #20]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC1_in0_Pin|ADC2_in1_Pin|ADC1_in2_Pin|ADC1_in3_Pin;
 80013fc:	230f      	movs	r3, #15
 80013fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001400:	2303      	movs	r3, #3
 8001402:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001412:	f003 fa25 	bl	8004860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_in14_Pin|ADC1_in13_Pin;
 8001416:	2303      	movs	r3, #3
 8001418:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001422:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001426:	4619      	mov	r1, r3
 8001428:	485e      	ldr	r0, [pc, #376]	@ (80015a4 <HAL_ADC_MspInit+0x254>)
 800142a:	f003 fa19 	bl	8004860 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800142e:	4b5e      	ldr	r3, [pc, #376]	@ (80015a8 <HAL_ADC_MspInit+0x258>)
 8001430:	4a5e      	ldr	r2, [pc, #376]	@ (80015ac <HAL_ADC_MspInit+0x25c>)
 8001432:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001434:	4b5c      	ldr	r3, [pc, #368]	@ (80015a8 <HAL_ADC_MspInit+0x258>)
 8001436:	2205      	movs	r2, #5
 8001438:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143a:	4b5b      	ldr	r3, [pc, #364]	@ (80015a8 <HAL_ADC_MspInit+0x258>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001440:	4b59      	ldr	r3, [pc, #356]	@ (80015a8 <HAL_ADC_MspInit+0x258>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001446:	4b58      	ldr	r3, [pc, #352]	@ (80015a8 <HAL_ADC_MspInit+0x258>)
 8001448:	2280      	movs	r2, #128	@ 0x80
 800144a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800144c:	4b56      	ldr	r3, [pc, #344]	@ (80015a8 <HAL_ADC_MspInit+0x258>)
 800144e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001452:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001454:	4b54      	ldr	r3, [pc, #336]	@ (80015a8 <HAL_ADC_MspInit+0x258>)
 8001456:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800145a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800145c:	4b52      	ldr	r3, [pc, #328]	@ (80015a8 <HAL_ADC_MspInit+0x258>)
 800145e:	2220      	movs	r2, #32
 8001460:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001462:	4b51      	ldr	r3, [pc, #324]	@ (80015a8 <HAL_ADC_MspInit+0x258>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001468:	484f      	ldr	r0, [pc, #316]	@ (80015a8 <HAL_ADC_MspInit+0x258>)
 800146a:	f001 fee7 	bl	800323c <HAL_DMA_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8001474:	f7ff ff42 	bl	80012fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a4b      	ldr	r2, [pc, #300]	@ (80015a8 <HAL_ADC_MspInit+0x258>)
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54
 800147e:	4a4a      	ldr	r2, [pc, #296]	@ (80015a8 <HAL_ADC_MspInit+0x258>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001484:	e086      	b.n	8001594 <HAL_ADC_MspInit+0x244>
  else if(hadc->Instance==ADC2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a49      	ldr	r2, [pc, #292]	@ (80015b0 <HAL_ADC_MspInit+0x260>)
 800148c:	4293      	cmp	r3, r2
 800148e:	f040 8081 	bne.w	8001594 <HAL_ADC_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001496:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001498:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800149c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	4618      	mov	r0, r3
 80014a4:	f004 f93a 	bl	800571c <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_ADC_MspInit+0x162>
      Error_Handler();
 80014ae:	f7ff ff25 	bl	80012fc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014b2:	4b3a      	ldr	r3, [pc, #232]	@ (800159c <HAL_ADC_MspInit+0x24c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4a38      	ldr	r2, [pc, #224]	@ (800159c <HAL_ADC_MspInit+0x24c>)
 80014ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014bc:	4b37      	ldr	r3, [pc, #220]	@ (800159c <HAL_ADC_MspInit+0x24c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d10b      	bne.n	80014dc <HAL_ADC_MspInit+0x18c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014c4:	4b36      	ldr	r3, [pc, #216]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c8:	4a35      	ldr	r2, [pc, #212]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80014ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d0:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e0:	4a2f      	ldr	r2, [pc, #188]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e8:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f4:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f8:	4a29      	ldr	r2, [pc, #164]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001500:	4b27      	ldr	r3, [pc, #156]	@ (80015a0 <HAL_ADC_MspInit+0x250>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC1_in0_Pin|ADC2_in1_Pin|ADC2_in4_Pin|ADC2_in5_Pin
 800150c:	23f3      	movs	r3, #243	@ 0xf3
 800150e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001510:	2303      	movs	r3, #3
 8001512:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001522:	f003 f99d 	bl	8004860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_in8_Pin|ADC2_in15_Pin;
 8001526:	2330      	movs	r3, #48	@ 0x30
 8001528:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152a:	2303      	movs	r3, #3
 800152c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001532:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001536:	4619      	mov	r1, r3
 8001538:	481e      	ldr	r0, [pc, #120]	@ (80015b4 <HAL_ADC_MspInit+0x264>)
 800153a:	f003 f991 	bl	8004860 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <HAL_ADC_MspInit+0x268>)
 8001540:	4a1e      	ldr	r2, [pc, #120]	@ (80015bc <HAL_ADC_MspInit+0x26c>)
 8001542:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <HAL_ADC_MspInit+0x268>)
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <HAL_ADC_MspInit+0x268>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001550:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_ADC_MspInit+0x268>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001556:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <HAL_ADC_MspInit+0x268>)
 8001558:	2280      	movs	r2, #128	@ 0x80
 800155a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_ADC_MspInit+0x268>)
 800155e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001562:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_ADC_MspInit+0x268>)
 8001566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800156a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_ADC_MspInit+0x268>)
 800156e:	2220      	movs	r2, #32
 8001570:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_ADC_MspInit+0x268>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001578:	480f      	ldr	r0, [pc, #60]	@ (80015b8 <HAL_ADC_MspInit+0x268>)
 800157a:	f001 fe5f 	bl	800323c <HAL_DMA_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_ADC_MspInit+0x238>
      Error_Handler();
 8001584:	f7ff feba 	bl	80012fc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <HAL_ADC_MspInit+0x268>)
 800158c:	655a      	str	r2, [r3, #84]	@ 0x54
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <HAL_ADC_MspInit+0x268>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001594:	bf00      	nop
 8001596:	3778      	adds	r7, #120	@ 0x78
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000724 	.word	0x20000724
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000400 	.word	0x48000400
 80015a8:	20000150 	.word	0x20000150
 80015ac:	40020008 	.word	0x40020008
 80015b0:	50000100 	.word	0x50000100
 80015b4:	48000800 	.word	0x48000800
 80015b8:	200001b0 	.word	0x200001b0
 80015bc:	4002001c 	.word	0x4002001c

080015c0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b09a      	sub	sp, #104	@ 0x68
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2244      	movs	r2, #68	@ 0x44
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 ffc9 	bl	8006578 <memset>
  if(hfdcan->Instance==FDCAN1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a24      	ldr	r2, [pc, #144]	@ (800167c <HAL_FDCAN_MspInit+0xbc>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d141      	bne.n	8001674 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80015f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80015f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015fa:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4618      	mov	r0, r3
 8001602:	f004 f88b 	bl	800571c <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800160c:	f7ff fe76 	bl	80012fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <HAL_FDCAN_MspInit+0xc0>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001614:	4a1a      	ldr	r2, [pc, #104]	@ (8001680 <HAL_FDCAN_MspInit+0xc0>)
 8001616:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800161a:	6593      	str	r3, [r2, #88]	@ 0x58
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <HAL_FDCAN_MspInit+0xc0>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <HAL_FDCAN_MspInit+0xc0>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162c:	4a14      	ldr	r2, [pc, #80]	@ (8001680 <HAL_FDCAN_MspInit+0xc0>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_FDCAN_MspInit+0xc0>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001640:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001644:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001652:	2309      	movs	r3, #9
 8001654:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001660:	f003 f8fe 	bl	8004860 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2015      	movs	r0, #21
 800166a:	f001 fdb2 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800166e:	2015      	movs	r0, #21
 8001670:	f001 fdc9 	bl	8003206 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001674:	bf00      	nop
 8001676:	3768      	adds	r7, #104	@ 0x68
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40006400 	.word	0x40006400
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0d      	ldr	r2, [pc, #52]	@ (80016c8 <HAL_TIM_Base_MspInit+0x44>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d113      	bne.n	80016be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_TIM_Base_MspInit+0x48>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	4a0c      	ldr	r2, [pc, #48]	@ (80016cc <HAL_TIM_Base_MspInit+0x48>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_TIM_Base_MspInit+0x48>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	201d      	movs	r0, #29
 80016b4:	f001 fd8d 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016b8:	201d      	movs	r0, #29
 80016ba:	f001 fda4 	bl	8003206 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40000400 	.word	0x40000400
 80016cc:	40021000 	.word	0x40021000

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <NMI_Handler+0x4>

080016d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <MemManage_Handler+0x4>

080016e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001726:	f000 fa1d 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <DMA1_Channel1_IRQHandler+0x10>)
 8001736:	f001 fea4 	bl	8003482 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000150 	.word	0x20000150

08001744 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <DMA1_Channel2_IRQHandler+0x10>)
 800174a:	f001 fe9a 	bl	8003482 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001b0 	.word	0x200001b0

08001758 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <FDCAN1_IT0_IRQHandler+0x10>)
 800175e:	f002 fba5 	bl	8003eac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000210 	.word	0x20000210

0800176c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
		millis++;
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <TIM3_IRQHandler+0x28>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <TIM3_IRQHandler+0x28>)
 8001778:	6013      	str	r3, [r2, #0]
		if(millis == 1000){
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <TIM3_IRQHandler+0x28>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001782:	d102      	bne.n	800178a <TIM3_IRQHandler+0x1e>
			CAN_enable = 1;
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <TIM3_IRQHandler+0x2c>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800178a:	4804      	ldr	r0, [pc, #16]	@ (800179c <TIM3_IRQHandler+0x30>)
 800178c:	f004 fa78 	bl	8005c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200006cc 	.word	0x200006cc
 8001798:	200006d0 	.word	0x200006d0
 800179c:	20000274 	.word	0x20000274

080017a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <SystemInit+0x20>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017aa:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <SystemInit+0x20>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <TF_3V3>:
#include "transfer_functions.h"
#include "functions.h"
#include "main.h"
#include "config.h"

uint16_t TF_3V3(uint8_t bytes, uint32_t raw, Sensor *sensor){
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	73fb      	strb	r3, [r7, #15]


	uint16_t max_volt = 3300;
 80017d2:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80017d6:	82fb      	strh	r3, [r7, #22]

	uint16_t voltage = raw*max_volt / 4095;
 80017d8:	8afb      	ldrh	r3, [r7, #22]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	fb03 f202 	mul.w	r2, r3, r2
 80017e0:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <TF_3V3+0x3c>)
 80017e2:	fba3 1302 	umull	r1, r3, r3, r2
 80017e6:	1ad2      	subs	r2, r2, r3
 80017e8:	0852      	lsrs	r2, r2, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	0adb      	lsrs	r3, r3, #11
 80017ee:	82bb      	strh	r3, [r7, #20]
	return voltage;
 80017f0:	8abb      	ldrh	r3, [r7, #20]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	00100101 	.word	0x00100101

08001804 <TF_5V>:

uint16_t TF_5V(uint8_t bytes, uint32_t raw, Sensor *sensor){
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	73fb      	strb	r3, [r7, #15]
	uint16_t max_volt = 5000;
 8001812:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001816:	82fb      	strh	r3, [r7, #22]

	uint16_t voltage = raw*max_volt / 4095;
 8001818:	8afb      	ldrh	r3, [r7, #22]
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	fb03 f202 	mul.w	r2, r3, r2
 8001820:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <TF_5V+0x3c>)
 8001822:	fba3 1302 	umull	r1, r3, r3, r2
 8001826:	1ad2      	subs	r2, r2, r3
 8001828:	0852      	lsrs	r2, r2, #1
 800182a:	4413      	add	r3, r2
 800182c:	0adb      	lsrs	r3, r3, #11
 800182e:	82bb      	strh	r3, [r7, #20]
	return voltage;
 8001830:	8abb      	ldrh	r3, [r7, #20]

}
 8001832:	4618      	mov	r0, r3
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	00100101 	.word	0x00100101

08001844 <TF_24V>:

uint16_t TF_24V(uint8_t bytes, uint32_t raw, Sensor *sensor){
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	73fb      	strb	r3, [r7, #15]
	uint16_t max_volt = 24000;
 8001852:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8001856:	82fb      	strh	r3, [r7, #22]

	uint16_t voltage = raw*max_volt / 4095;
 8001858:	8afb      	ldrh	r3, [r7, #22]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	fb03 f202 	mul.w	r2, r3, r2
 8001860:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <TF_24V+0x3c>)
 8001862:	fba3 1302 	umull	r1, r3, r3, r2
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	0852      	lsrs	r2, r2, #1
 800186a:	4413      	add	r3, r2
 800186c:	0adb      	lsrs	r3, r3, #11
 800186e:	82bb      	strh	r3, [r7, #20]
	return voltage;
 8001870:	8abb      	ldrh	r3, [r7, #20]
}
 8001872:	4618      	mov	r0, r3
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	00100101 	.word	0x00100101

08001884 <TF_BPPS>:

uint16_t bpps_global;
uint16_t TF_BPPS(uint8_t bytes, uint32_t raw, Sensor *sensor){ //brake pedal position sensor
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	73fb      	strb	r3, [r7, #15]
	uint16_t max_pos = 100; //in percent
 8001892:	2364      	movs	r3, #100	@ 0x64
 8001894:	82bb      	strh	r3, [r7, #20]

	uint16_t min_raw = (sensor->calib_code % 2 == 1 && sensor->low_adc != 0) ? sensor->low_adc : 2615 ;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7b5b      	ldrb	r3, [r3, #13]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <TF_BPPS+0x2e>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	8a1b      	ldrh	r3, [r3, #16]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <TF_BPPS+0x2e>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	8a1b      	ldrh	r3, [r3, #16]
 80018b0:	e001      	b.n	80018b6 <TF_BPPS+0x32>
 80018b2:	f640 2337 	movw	r3, #2615	@ 0xa37
 80018b6:	827b      	strh	r3, [r7, #18]
	uint16_t max_raw = (sensor->calib_code > 2 && sensor->high_adc != 0) ? sensor->high_adc : 2925;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7b5b      	ldrb	r3, [r3, #13]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d906      	bls.n	80018ce <TF_BPPS+0x4a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	8a5b      	ldrh	r3, [r3, #18]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <TF_BPPS+0x4a>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	8a5b      	ldrh	r3, [r3, #18]
 80018cc:	e001      	b.n	80018d2 <TF_BPPS+0x4e>
 80018ce:	f640 336d 	movw	r3, #2925	@ 0xb6d
 80018d2:	823b      	strh	r3, [r7, #16]

	uint16_t bpps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 80018d4:	8a7b      	ldrh	r3, [r7, #18]
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	8aba      	ldrh	r2, [r7, #20]
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	8a39      	ldrh	r1, [r7, #16]
 80018e2:	8a7a      	ldrh	r2, [r7, #18]
 80018e4:	1a8a      	subs	r2, r1, r2
 80018e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80018ea:	82fb      	strh	r3, [r7, #22]

	if(min_raw > max_raw){
 80018ec:	8a7a      	ldrh	r2, [r7, #18]
 80018ee:	8a3b      	ldrh	r3, [r7, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d906      	bls.n	8001902 <TF_BPPS+0x7e>

		bpps = 100 - bpps;
 80018f4:	8afb      	ldrh	r3, [r7, #22]
 80018f6:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80018fa:	82fb      	strh	r3, [r7, #22]
		bpps_global = bpps;
 80018fc:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <TF_BPPS+0x8c>)
 80018fe:	8afb      	ldrh	r3, [r7, #22]
 8001900:	8013      	strh	r3, [r2, #0]

	}
	return bpps;
 8001902:	8afb      	ldrh	r3, [r7, #22]

}
 8001904:	4618      	mov	r0, r3
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	20000728 	.word	0x20000728

08001914 <TF_APPS1>:
uint16_t TF_APPS1(uint8_t bytes, uint32_t raw, Sensor *sensor){
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	73fb      	strb	r3, [r7, #15]
	uint16_t max_pos = 100; //in percent
 8001922:	2364      	movs	r3, #100	@ 0x64
 8001924:	82bb      	strh	r3, [r7, #20]

	uint16_t min_raw = (sensor->calib_code % 2 == 1 && sensor->low_adc != 0) ? sensor->low_adc : 650;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7b5b      	ldrb	r3, [r3, #13]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <TF_APPS1+0x2e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	8a1b      	ldrh	r3, [r3, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <TF_APPS1+0x2e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	8a1b      	ldrh	r3, [r3, #16]
 8001940:	e001      	b.n	8001946 <TF_APPS1+0x32>
 8001942:	f240 238a 	movw	r3, #650	@ 0x28a
 8001946:	827b      	strh	r3, [r7, #18]
	uint16_t max_raw = (sensor->calib_code > 2 &&  sensor->high_adc != 0) ? sensor->high_adc : 1990 ;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7b5b      	ldrb	r3, [r3, #13]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d906      	bls.n	800195e <TF_APPS1+0x4a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	8a5b      	ldrh	r3, [r3, #18]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <TF_APPS1+0x4a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	8a5b      	ldrh	r3, [r3, #18]
 800195c:	e001      	b.n	8001962 <TF_APPS1+0x4e>
 800195e:	f240 73c6 	movw	r3, #1990	@ 0x7c6
 8001962:	823b      	strh	r3, [r7, #16]

	uint16_t apps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 8001964:	8a7b      	ldrh	r3, [r7, #18]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	8aba      	ldrh	r2, [r7, #20]
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	8a39      	ldrh	r1, [r7, #16]
 8001972:	8a7a      	ldrh	r2, [r7, #18]
 8001974:	1a8a      	subs	r2, r1, r2
 8001976:	fbb3 f3f2 	udiv	r3, r3, r2
 800197a:	82fb      	strh	r3, [r7, #22]

	if(min_raw > max_raw){
 800197c:	8a7a      	ldrh	r2, [r7, #18]
 800197e:	8a3b      	ldrh	r3, [r7, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d903      	bls.n	800198c <TF_APPS1+0x78>

		apps = 100 - apps;
 8001984:	8afb      	ldrh	r3, [r7, #22]
 8001986:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800198a:	82fb      	strh	r3, [r7, #22]
	}
	return apps;
 800198c:	8afb      	ldrh	r3, [r7, #22]
}
 800198e:	4618      	mov	r0, r3
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <TF_APPS2>:

uint16_t TF_APPS2(uint8_t bytes, uint32_t raw, Sensor *sensor){
 800199a:	b480      	push	{r7}
 800199c:	b087      	sub	sp, #28
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	73fb      	strb	r3, [r7, #15]
	uint16_t max_pos = 100; //in percent
 80019a8:	2364      	movs	r3, #100	@ 0x64
 80019aa:	82bb      	strh	r3, [r7, #20]

	uint16_t min_raw = (sensor->calib_code % 2 == 1 && sensor->low_adc != 0) ? sensor->low_adc : 690 ;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7b5b      	ldrb	r3, [r3, #13]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <TF_APPS2+0x2e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	8a1b      	ldrh	r3, [r3, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <TF_APPS2+0x2e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	8a1b      	ldrh	r3, [r3, #16]
 80019c6:	e001      	b.n	80019cc <TF_APPS2+0x32>
 80019c8:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80019cc:	827b      	strh	r3, [r7, #18]
	uint16_t max_raw = (sensor->calib_code >= 2 && sensor->high_adc != 0) ? sensor->high_adc : 2830;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7b5b      	ldrb	r3, [r3, #13]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d906      	bls.n	80019e4 <TF_APPS2+0x4a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	8a5b      	ldrh	r3, [r3, #18]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <TF_APPS2+0x4a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	8a5b      	ldrh	r3, [r3, #18]
 80019e2:	e001      	b.n	80019e8 <TF_APPS2+0x4e>
 80019e4:	f640 330e 	movw	r3, #2830	@ 0xb0e
 80019e8:	823b      	strh	r3, [r7, #16]

	uint16_t apps = (raw-min_raw)*max_pos / (max_raw-min_raw);
 80019ea:	8a7b      	ldrh	r3, [r7, #18]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	8aba      	ldrh	r2, [r7, #20]
 80019f2:	fb02 f303 	mul.w	r3, r2, r3
 80019f6:	8a39      	ldrh	r1, [r7, #16]
 80019f8:	8a7a      	ldrh	r2, [r7, #18]
 80019fa:	1a8a      	subs	r2, r1, r2
 80019fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a00:	82fb      	strh	r3, [r7, #22]

	if(min_raw > max_raw){
 8001a02:	8a7a      	ldrh	r2, [r7, #18]
 8001a04:	8a3b      	ldrh	r3, [r7, #16]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d903      	bls.n	8001a12 <TF_APPS2+0x78>

		apps = 100 - apps;
 8001a0a:	8afb      	ldrh	r3, [r7, #22]
 8001a0c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001a10:	82fb      	strh	r3, [r7, #22]
	}
	return apps;
 8001a12:	8afb      	ldrh	r3, [r7, #22]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <TF_BTN>:

uint16_t TF_BTN(uint8_t bytes, uint32_t raw, Sensor *sensor){
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	73fb      	strb	r3, [r7, #15]
		uint16_t max_volt = 5000;
 8001a2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a32:	82fb      	strh	r3, [r7, #22]

		uint16_t voltage = raw*max_volt / 4095;
 8001a34:	8afb      	ldrh	r3, [r7, #22]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	fb03 f202 	mul.w	r2, r3, r2
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <TF_BTN+0x48>)
 8001a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a42:	1ad2      	subs	r2, r2, r3
 8001a44:	0852      	lsrs	r2, r2, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	0adb      	lsrs	r3, r3, #11
 8001a4a:	82bb      	strh	r3, [r7, #20]

		if(voltage < 2000)
 8001a4c:	8abb      	ldrh	r3, [r7, #20]
 8001a4e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001a52:	d201      	bcs.n	8001a58 <TF_BTN+0x38>
			return 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	e000      	b.n	8001a5a <TF_BTN+0x3a>
		else
			return 1;
 8001a58:	2301      	movs	r3, #1
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	00100101 	.word	0x00100101

08001a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a6c:	480d      	ldr	r0, [pc, #52]	@ (8001aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a6e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a70:	f7ff fe96 	bl	80017a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	@ (8001aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <LoopForever+0xe>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab8 <LoopForever+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f004 fd75 	bl	8006588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a9e:	f7fe fff1 	bl	8000a84 <main>

08001aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
  ldr   r0, =_estack
 8001aa4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001ab0:	08006610 	.word	0x08006610
  ldr r2, =_sbss
 8001ab4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001ab8:	20000730 	.word	0x20000730

08001abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_2_IRQHandler>

08001abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f001 fb77 	bl	80031bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ace:	200f      	movs	r0, #15
 8001ad0:	f000 f80e 	bl	8001af0 <HAL_InitTick>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	e001      	b.n	8001ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae0:	f7ff fc12 	bl	8001308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001afc:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <HAL_InitTick+0x68>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d022      	beq.n	8001b4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b04:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_InitTick+0x6c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <HAL_InitTick+0x68>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fb82 	bl	8003222 <HAL_SYSTICK_Config>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10f      	bne.n	8001b44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	d809      	bhi.n	8001b3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b32:	f001 fb4e 	bl	80031d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b36:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <HAL_InitTick+0x70>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e007      	b.n	8001b4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	e004      	b.n	8001b4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e001      	b.n	8001b4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	2000000c 	.word	0x2000000c
 8001b5c:	20000004 	.word	0x20000004
 8001b60:	20000008 	.word	0x20000008

08001b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_IncTick+0x1c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_IncTick+0x20>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4413      	add	r3, r2
 8001b72:	4a03      	ldr	r2, [pc, #12]	@ (8001b80 <HAL_IncTick+0x1c>)
 8001b74:	6013      	str	r3, [r2, #0]
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	2000072c 	.word	0x2000072c
 8001b84:	2000000c 	.word	0x2000000c

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	@ (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000072c 	.word	0x2000072c

08001ba0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	609a      	str	r2, [r3, #8]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3360      	adds	r3, #96	@ 0x60
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <LL_ADC_SetOffset+0x44>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	03fff000 	.word	0x03fff000

08001c50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3360      	adds	r3, #96	@ 0x60
 8001c5e:	461a      	mov	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3360      	adds	r3, #96	@ 0x60
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ca6:	bf00      	nop
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b087      	sub	sp, #28
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3360      	adds	r3, #96	@ 0x60
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3360      	adds	r3, #96	@ 0x60
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	615a      	str	r2, [r3, #20]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b087      	sub	sp, #28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3330      	adds	r3, #48	@ 0x30
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	4413      	add	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	211f      	movs	r1, #31
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0e9b      	lsrs	r3, r3, #26
 8001da2:	f003 011f 	and.w	r1, r3, #31
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	431a      	orrs	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001db6:	bf00      	nop
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b087      	sub	sp, #28
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3314      	adds	r3, #20
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	0e5b      	lsrs	r3, r3, #25
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	4413      	add	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	0d1b      	lsrs	r3, r3, #20
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2107      	movs	r1, #7
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	401a      	ands	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	0d1b      	lsrs	r3, r3, #20
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	431a      	orrs	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e0c:	bf00      	nop
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e30:	43db      	mvns	r3, r3
 8001e32:	401a      	ands	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0318 	and.w	r3, r3, #24
 8001e3a:	4908      	ldr	r1, [pc, #32]	@ (8001e5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e3c:	40d9      	lsrs	r1, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	400b      	ands	r3, r1
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e46:	431a      	orrs	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	0007ffff 	.word	0x0007ffff

08001e60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 031f 	and.w	r3, r3, #31
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6093      	str	r3, [r2, #8]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001eb4:	d101      	bne.n	8001eba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ed8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001edc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f04:	d101      	bne.n	8001f0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <LL_ADC_IsEnabled+0x18>
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <LL_ADC_IsEnabled+0x1a>
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f76:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f7a:	f043 0204 	orr.w	r2, r3, #4
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d101      	bne.n	8001fa6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d101      	bne.n	8001fcc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b089      	sub	sp, #36	@ 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e167      	b.n	80022c6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff f9a3 	bl	8001350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff3f 	bl	8001ea0 <LL_ADC_IsDeepPowerDownEnabled>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d004      	beq.n	8002032 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff25 	bl	8001e7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff5a 	bl	8001ef0 <LL_ADC_IsInternalRegulatorEnabled>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d115      	bne.n	800206e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff3e 	bl	8001ec8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800204c:	4ba0      	ldr	r3, [pc, #640]	@ (80022d0 <HAL_ADC_Init+0x2f4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	4aa0      	ldr	r2, [pc, #640]	@ (80022d4 <HAL_ADC_Init+0x2f8>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	099b      	lsrs	r3, r3, #6
 800205a:	3301      	adds	r3, #1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002060:	e002      	b.n	8002068 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3b01      	subs	r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff3c 	bl	8001ef0 <LL_ADC_IsInternalRegulatorEnabled>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff75 	bl	8001f8e <LL_ADC_REG_IsConversionOngoing>
 80020a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 8100 	bne.w	80022b4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 80fc 	bne.w	80022b4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020c4:	f043 0202 	orr.w	r2, r3, #2
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff35 	bl	8001f40 <LL_ADC_IsEnabled>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d111      	bne.n	8002100 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020e0:	f7ff ff2e 	bl	8001f40 <LL_ADC_IsEnabled>
 80020e4:	4604      	mov	r4, r0
 80020e6:	487c      	ldr	r0, [pc, #496]	@ (80022d8 <HAL_ADC_Init+0x2fc>)
 80020e8:	f7ff ff2a 	bl	8001f40 <LL_ADC_IsEnabled>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4323      	orrs	r3, r4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4619      	mov	r1, r3
 80020fa:	4878      	ldr	r0, [pc, #480]	@ (80022dc <HAL_ADC_Init+0x300>)
 80020fc:	f7ff fd50 	bl	8001ba0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7f5b      	ldrb	r3, [r3, #29]
 8002104:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800210a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002110:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002116:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800211e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800212a:	2b01      	cmp	r3, #1
 800212c:	d106      	bne.n	800213c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002132:	3b01      	subs	r3, #1
 8002134:	045b      	lsls	r3, r3, #17
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d009      	beq.n	8002158 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002148:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	4b60      	ldr	r3, [pc, #384]	@ (80022e0 <HAL_ADC_Init+0x304>)
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	69b9      	ldr	r1, [r7, #24]
 8002168:	430b      	orrs	r3, r1
 800216a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff14 	bl	8001fb4 <LL_ADC_INJ_IsConversionOngoing>
 800218c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d16d      	bne.n	8002270 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d16a      	bne.n	8002270 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800219e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021a6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021b6:	f023 0302 	bic.w	r3, r3, #2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	69b9      	ldr	r1, [r7, #24]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d017      	beq.n	80021fc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021e4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6911      	ldr	r1, [r2, #16]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80021fa:	e013      	b.n	8002224 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800220a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800221c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002220:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800222a:	2b01      	cmp	r3, #1
 800222c:	d118      	bne.n	8002260 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800224a:	4311      	orrs	r1, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002250:	430a      	orrs	r2, r1
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	611a      	str	r2, [r3, #16]
 800225e:	e007      	b.n	8002270 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691a      	ldr	r2, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10c      	bne.n	8002292 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f023 010f 	bic.w	r1, r3, #15
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	1e5a      	subs	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002290:	e007      	b.n	80022a2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 020f 	bic.w	r2, r2, #15
 80022a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a6:	f023 0303 	bic.w	r3, r3, #3
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022b2:	e007      	b.n	80022c4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd90      	pop	{r4, r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000004 	.word	0x20000004
 80022d4:	053e2d63 	.word	0x053e2d63
 80022d8:	50000100 	.word	0x50000100
 80022dc:	50000300 	.word	0x50000300
 80022e0:	fff04007 	.word	0xfff04007

080022e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f0:	4851      	ldr	r0, [pc, #324]	@ (8002438 <HAL_ADC_Start_DMA+0x154>)
 80022f2:	f7ff fdb5 	bl	8001e60 <LL_ADC_GetMultimode>
 80022f6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fe46 	bl	8001f8e <LL_ADC_REG_IsConversionOngoing>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 808f 	bne.w	8002428 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_ADC_Start_DMA+0x34>
 8002314:	2302      	movs	r3, #2
 8002316:	e08a      	b.n	800242e <HAL_ADC_Start_DMA+0x14a>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d002      	beq.n	8002332 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b09      	cmp	r3, #9
 8002330:	d173      	bne.n	800241a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fc8e 	bl	8002c54 <ADC_Enable>
 8002338:	4603      	mov	r3, r0
 800233a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d166      	bne.n	8002410 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002346:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a38      	ldr	r2, [pc, #224]	@ (800243c <HAL_ADC_Start_DMA+0x158>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d002      	beq.n	8002366 <HAL_ADC_Start_DMA+0x82>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	e001      	b.n	800236a <HAL_ADC_Start_DMA+0x86>
 8002366:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	4293      	cmp	r3, r2
 8002370:	d002      	beq.n	8002378 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002388:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002394:	f023 0206 	bic.w	r2, r3, #6
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	661a      	str	r2, [r3, #96]	@ 0x60
 800239c:	e002      	b.n	80023a4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a8:	4a25      	ldr	r2, [pc, #148]	@ (8002440 <HAL_ADC_Start_DMA+0x15c>)
 80023aa:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b0:	4a24      	ldr	r2, [pc, #144]	@ (8002444 <HAL_ADC_Start_DMA+0x160>)
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	4a23      	ldr	r2, [pc, #140]	@ (8002448 <HAL_ADC_Start_DMA+0x164>)
 80023ba:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	221c      	movs	r2, #28
 80023c2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0210 	orr.w	r2, r2, #16
 80023da:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3340      	adds	r3, #64	@ 0x40
 80023f6:	4619      	mov	r1, r3
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f000 ffc6 	bl	800338c <HAL_DMA_Start_IT>
 8002400:	4603      	mov	r3, r0
 8002402:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fdac 	bl	8001f66 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800240e:	e00d      	b.n	800242c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002418:	e008      	b.n	800242c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002426:	e001      	b.n	800242c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002428:	2302      	movs	r3, #2
 800242a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800242c:	7dfb      	ldrb	r3, [r7, #23]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	50000300 	.word	0x50000300
 800243c:	50000100 	.word	0x50000100
 8002440:	08002d61 	.word	0x08002d61
 8002444:	08002e39 	.word	0x08002e39
 8002448:	08002e55 	.word	0x08002e55

0800244c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b0b6      	sub	sp, #216	@ 0xd8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x22>
 8002492:	2302      	movs	r3, #2
 8002494:	e3c8      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x7b4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fd73 	bl	8001f8e <LL_ADC_REG_IsConversionOngoing>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 83ad 	bne.w	8002c0a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	f7ff fc54 	bl	8001d6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd61 	bl	8001f8e <LL_ADC_REG_IsConversionOngoing>
 80024cc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fd6d 	bl	8001fb4 <LL_ADC_INJ_IsConversionOngoing>
 80024da:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 81d9 	bne.w	800289a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f040 81d4 	bne.w	800289a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024fa:	d10f      	bne.n	800251c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	4619      	mov	r1, r3
 8002508:	f7ff fc5b 	bl	8001dc2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fc02 	bl	8001d1e <LL_ADC_SetSamplingTimeCommonConfig>
 800251a:	e00e      	b.n	800253a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	461a      	mov	r2, r3
 800252a:	f7ff fc4a 	bl	8001dc2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fbf2 	bl	8001d1e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d022      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6919      	ldr	r1, [r3, #16]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800256c:	f7ff fb4c 	bl	8001c08 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6919      	ldr	r1, [r3, #16]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	461a      	mov	r2, r3
 800257e:	f7ff fb98 	bl	8001cb2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800258e:	2b01      	cmp	r3, #1
 8002590:	d102      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x124>
 8002592:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002596:	e000      	b.n	800259a <HAL_ADC_ConfigChannel+0x126>
 8002598:	2300      	movs	r3, #0
 800259a:	461a      	mov	r2, r3
 800259c:	f7ff fba4 	bl	8001ce8 <LL_ADC_SetOffsetSaturation>
 80025a0:	e17b      	b.n	800289a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fb51 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x15a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fb46 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	e01e      	b.n	800260c <HAL_ADC_ConfigChannel+0x198>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fb3b 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80025fc:	2320      	movs	r3, #32
 80025fe:	e004      	b.n	800260a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1b0>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	e018      	b.n	8002656 <HAL_ADC_ConfigChannel+0x1e2>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800263c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002640:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002648:	2320      	movs	r3, #32
 800264a:	e004      	b.n	8002656 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800264c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002656:	429a      	cmp	r2, r3
 8002658:	d106      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fb0a 	bl	8001c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff faee 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10a      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x220>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2101      	movs	r1, #1
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fae3 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 800268a:	4603      	mov	r3, r0
 800268c:	0e9b      	lsrs	r3, r3, #26
 800268e:	f003 021f 	and.w	r2, r3, #31
 8002692:	e01e      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x25e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fad8 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80026b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80026ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80026c2:	2320      	movs	r3, #32
 80026c4:	e004      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80026c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d105      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x276>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	0e9b      	lsrs	r3, r3, #26
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	e018      	b.n	800271c <HAL_ADC_ConfigChannel+0x2a8>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80026fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002702:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002706:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e004      	b.n	800271c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002712:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800271c:	429a      	cmp	r2, r3
 800271e:	d106      	bne.n	800272e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2200      	movs	r2, #0
 8002726:	2101      	movs	r1, #1
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff faa7 	bl	8001c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2102      	movs	r1, #2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fa8b 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <HAL_ADC_ConfigChannel+0x2e6>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fa80 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	0e9b      	lsrs	r3, r3, #26
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	e01e      	b.n	8002798 <HAL_ADC_ConfigChannel+0x324>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2102      	movs	r1, #2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fa75 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002778:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800277c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002780:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e004      	b.n	8002796 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800278c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x33c>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	e016      	b.n	80027de <HAL_ADC_ConfigChannel+0x36a>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80027c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80027c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80027d0:	2320      	movs	r3, #32
 80027d2:	e004      	b.n	80027de <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80027d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027de:	429a      	cmp	r2, r3
 80027e0:	d106      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2102      	movs	r1, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fa46 	bl	8001c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2103      	movs	r1, #3
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fa2a 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10a      	bne.n	800281c <HAL_ADC_ConfigChannel+0x3a8>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2103      	movs	r1, #3
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fa1f 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	f003 021f 	and.w	r2, r3, #31
 800281a:	e017      	b.n	800284c <HAL_ADC_ConfigChannel+0x3d8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2103      	movs	r1, #3
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fa14 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002834:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002836:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800283e:	2320      	movs	r3, #32
 8002840:	e003      	b.n	800284a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002842:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x3f0>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0e9b      	lsrs	r3, r3, #26
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	e011      	b.n	8002888 <HAL_ADC_ConfigChannel+0x414>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002872:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002874:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e003      	b.n	8002888 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002888:	429a      	cmp	r2, r3
 800288a:	d106      	bne.n	800289a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	2103      	movs	r1, #3
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff f9f1 	bl	8001c7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fb4e 	bl	8001f40 <LL_ADC_IsEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 8140 	bne.w	8002b2c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6819      	ldr	r1, [r3, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	461a      	mov	r2, r3
 80028ba:	f7ff faad 	bl	8001e18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	4a8f      	ldr	r2, [pc, #572]	@ (8002b00 <HAL_ADC_ConfigChannel+0x68c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	f040 8131 	bne.w	8002b2c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10b      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x47e>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0e9b      	lsrs	r3, r3, #26
 80028e0:	3301      	adds	r3, #1
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2b09      	cmp	r3, #9
 80028e8:	bf94      	ite	ls
 80028ea:	2301      	movls	r3, #1
 80028ec:	2300      	movhi	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	e019      	b.n	8002926 <HAL_ADC_ConfigChannel+0x4b2>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002900:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002902:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002904:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800290a:	2320      	movs	r3, #32
 800290c:	e003      	b.n	8002916 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800290e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	2b09      	cmp	r3, #9
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002926:	2b00      	cmp	r3, #0
 8002928:	d079      	beq.n	8002a1e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002932:	2b00      	cmp	r3, #0
 8002934:	d107      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x4d2>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	3301      	adds	r3, #1
 800293e:	069b      	lsls	r3, r3, #26
 8002940:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002944:	e015      	b.n	8002972 <HAL_ADC_ConfigChannel+0x4fe>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002956:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800295e:	2320      	movs	r3, #32
 8002960:	e003      	b.n	800296a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	3301      	adds	r3, #1
 800296c:	069b      	lsls	r3, r3, #26
 800296e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x51e>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	3301      	adds	r3, #1
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	e017      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x54e>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80029a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80029a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e003      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80029ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	2101      	movs	r1, #1
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	ea42 0103 	orr.w	r1, r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x574>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	3301      	adds	r3, #1
 80029da:	f003 021f 	and.w	r2, r3, #31
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	051b      	lsls	r3, r3, #20
 80029e6:	e018      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x5a6>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80029f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80029fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f003 021f 	and.w	r2, r3, #31
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	e081      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x5c6>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	0e9b      	lsrs	r3, r3, #26
 8002a30:	3301      	adds	r3, #1
 8002a32:	069b      	lsls	r3, r3, #26
 8002a34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a38:	e015      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x5f2>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002a52:	2320      	movs	r3, #32
 8002a54:	e003      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	069b      	lsls	r3, r3, #26
 8002a62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x612>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0e9b      	lsrs	r3, r3, #26
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2101      	movs	r1, #1
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	e017      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x642>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	61fb      	str	r3, [r7, #28]
  return result;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	e003      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	ea42 0103 	orr.w	r1, r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10d      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x66e>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	0e9b      	lsrs	r3, r3, #26
 8002acc:	3301      	adds	r3, #1
 8002ace:	f003 021f 	and.w	r2, r3, #31
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b1e      	subs	r3, #30
 8002ada:	051b      	lsls	r3, r3, #20
 8002adc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ae0:	e01e      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x6ac>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	613b      	str	r3, [r7, #16]
  return result;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002afa:	2320      	movs	r3, #32
 8002afc:	e006      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x698>
 8002afe:	bf00      	nop
 8002b00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f003 021f 	and.w	r2, r3, #31
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	3b1e      	subs	r3, #30
 8002b1a:	051b      	lsls	r3, r3, #20
 8002b1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b20:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7ff f94b 	bl	8001dc2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b3f      	ldr	r3, [pc, #252]	@ (8002c30 <HAL_ADC_ConfigChannel+0x7bc>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d071      	beq.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b38:	483e      	ldr	r0, [pc, #248]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b3a:	f7ff f857 	bl	8001bec <LL_ADC_GetCommonPathInternalCh>
 8002b3e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a3c      	ldr	r2, [pc, #240]	@ (8002c38 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_ADC_ConfigChannel+0x6e2>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a3a      	ldr	r2, [pc, #232]	@ (8002c3c <HAL_ADC_ConfigChannel+0x7c8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d127      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d121      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b6a:	d157      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b74:	4619      	mov	r1, r3
 8002b76:	482f      	ldr	r0, [pc, #188]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b78:	f7ff f825 	bl	8001bc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b7c:	4b30      	ldr	r3, [pc, #192]	@ (8002c40 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	4a30      	ldr	r2, [pc, #192]	@ (8002c44 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b96:	e002      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f9      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ba4:	e03a      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a27      	ldr	r2, [pc, #156]	@ (8002c48 <HAL_ADC_ConfigChannel+0x7d4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d113      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10d      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	@ (8002c4c <HAL_ADC_ConfigChannel+0x7d8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d02a      	beq.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4818      	ldr	r0, [pc, #96]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bd2:	f7fe fff8 	bl	8001bc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd6:	e021      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c50 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d11c      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d116      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a16      	ldr	r2, [pc, #88]	@ (8002c4c <HAL_ADC_ConfigChannel+0x7d8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d011      	beq.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c00:	4619      	mov	r1, r3
 8002c02:	480c      	ldr	r0, [pc, #48]	@ (8002c34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c04:	f7fe ffdf 	bl	8001bc6 <LL_ADC_SetCommonPathInternalCh>
 8002c08:	e008      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0e:	f043 0220 	orr.w	r2, r3, #32
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c24:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	37d8      	adds	r7, #216	@ 0xd8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	80080000 	.word	0x80080000
 8002c34:	50000300 	.word	0x50000300
 8002c38:	c3210000 	.word	0xc3210000
 8002c3c:	90c00010 	.word	0x90c00010
 8002c40:	20000004 	.word	0x20000004
 8002c44:	053e2d63 	.word	0x053e2d63
 8002c48:	c7520000 	.word	0xc7520000
 8002c4c:	50000100 	.word	0x50000100
 8002c50:	cb840000 	.word	0xcb840000

08002c54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f96b 	bl	8001f40 <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d169      	bne.n	8002d44 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	4b36      	ldr	r3, [pc, #216]	@ (8002d50 <ADC_Enable+0xfc>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	f043 0210 	orr.w	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e055      	b.n	8002d46 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff f93a 	bl	8001f18 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ca4:	482b      	ldr	r0, [pc, #172]	@ (8002d54 <ADC_Enable+0x100>)
 8002ca6:	f7fe ffa1 	bl	8001bec <LL_ADC_GetCommonPathInternalCh>
 8002caa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb4:	4b28      	ldr	r3, [pc, #160]	@ (8002d58 <ADC_Enable+0x104>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	4a28      	ldr	r2, [pc, #160]	@ (8002d5c <ADC_Enable+0x108>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cce:	e002      	b.n	8002cd6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f9      	bne.n	8002cd0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cdc:	f7fe ff54 	bl	8001b88 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce2:	e028      	b.n	8002d36 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff f929 	bl	8001f40 <LL_ADC_IsEnabled>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d104      	bne.n	8002cfe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f90d 	bl	8001f18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cfe:	f7fe ff43 	bl	8001b88 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d914      	bls.n	8002d36 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d00d      	beq.n	8002d36 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1e:	f043 0210 	orr.w	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e007      	b.n	8002d46 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d1cf      	bne.n	8002ce4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	8000003f 	.word	0x8000003f
 8002d54:	50000300 	.word	0x50000300
 8002d58:	20000004 	.word	0x20000004
 8002d5c:	053e2d63 	.word	0x053e2d63

08002d60 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d72:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d14b      	bne.n	8002e12 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d021      	beq.n	8002dd8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe ffd3 	bl	8001d44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d032      	beq.n	8002e0a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d12b      	bne.n	8002e0a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d11f      	bne.n	8002e0a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dd6:	e018      	b.n	8002e0a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d111      	bne.n	8002e0a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d105      	bne.n	8002e0a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f7fe f9d6 	bl	80011bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e10:	e00e      	b.n	8002e30 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff fb1e 	bl	8002460 <HAL_ADC_ErrorCallback>
}
 8002e24:	e004      	b.n	8002e30 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4798      	blx	r3
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff fb00 	bl	800244c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e72:	f043 0204 	orr.w	r2, r3, #4
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff faf0 	bl	8002460 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <LL_ADC_IsEnabled>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <LL_ADC_IsEnabled+0x18>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <LL_ADC_IsEnabled+0x1a>
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_ADC_REG_IsConversionOngoing>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d101      	bne.n	8002ec6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ed4:	b590      	push	{r4, r7, lr}
 8002ed6:	b0a1      	sub	sp, #132	@ 0x84
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e08b      	b.n	800300a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002efa:	2300      	movs	r3, #0
 8002efc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002efe:	2300      	movs	r3, #0
 8002f00:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f0a:	d102      	bne.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f0c:	4b41      	ldr	r3, [pc, #260]	@ (8003014 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	e001      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10b      	bne.n	8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e06a      	b.n	800300a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff ffb9 	bl	8002eae <LL_ADC_REG_IsConversionOngoing>
 8002f3c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff ffb3 	bl	8002eae <LL_ADC_REG_IsConversionOngoing>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d14c      	bne.n	8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d149      	bne.n	8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f54:	4b30      	ldr	r3, [pc, #192]	@ (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002f56:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d028      	beq.n	8002fb2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f72:	035b      	lsls	r3, r3, #13
 8002f74:	430b      	orrs	r3, r1
 8002f76:	431a      	orrs	r2, r3
 8002f78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f7c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f80:	f7ff ff82 	bl	8002e88 <LL_ADC_IsEnabled>
 8002f84:	4604      	mov	r4, r0
 8002f86:	4823      	ldr	r0, [pc, #140]	@ (8003014 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f88:	f7ff ff7e 	bl	8002e88 <LL_ADC_IsEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4323      	orrs	r3, r4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d133      	bne.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f9c:	f023 030f 	bic.w	r3, r3, #15
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	6811      	ldr	r1, [r2, #0]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	6892      	ldr	r2, [r2, #8]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	431a      	orrs	r2, r3
 8002fac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fae:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb0:	e024      	b.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fbc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fbe:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002fc2:	f7ff ff61 	bl	8002e88 <LL_ADC_IsEnabled>
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	4812      	ldr	r0, [pc, #72]	@ (8003014 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002fca:	f7ff ff5d 	bl	8002e88 <LL_ADC_IsEnabled>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4323      	orrs	r3, r4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d112      	bne.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fde:	f023 030f 	bic.w	r3, r3, #15
 8002fe2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002fe4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe6:	e009      	b.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ffa:	e000      	b.n	8002ffe <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ffc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003006:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800300a:	4618      	mov	r0, r3
 800300c:	3784      	adds	r7, #132	@ 0x84
 800300e:	46bd      	mov	sp, r7
 8003010:	bd90      	pop	{r4, r7, pc}
 8003012:	bf00      	nop
 8003014:	50000100 	.word	0x50000100
 8003018:	50000300 	.word	0x50000300

0800301c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800302c:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <__NVIC_SetPriorityGrouping+0x44>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003038:	4013      	ands	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003044:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800304c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304e:	4a04      	ldr	r2, [pc, #16]	@ (8003060 <__NVIC_SetPriorityGrouping+0x44>)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	60d3      	str	r3, [r2, #12]
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003068:	4b04      	ldr	r3, [pc, #16]	@ (800307c <__NVIC_GetPriorityGrouping+0x18>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	f003 0307 	and.w	r3, r3, #7
}
 8003072:	4618      	mov	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	2b00      	cmp	r3, #0
 8003090:	db0b      	blt.n	80030aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	4907      	ldr	r1, [pc, #28]	@ (80030b8 <__NVIC_EnableIRQ+0x38>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2001      	movs	r0, #1
 80030a2:	fa00 f202 	lsl.w	r2, r0, r2
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000e100 	.word	0xe000e100

080030bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	db0a      	blt.n	80030e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	490c      	ldr	r1, [pc, #48]	@ (8003108 <__NVIC_SetPriority+0x4c>)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	440b      	add	r3, r1
 80030e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e4:	e00a      	b.n	80030fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4908      	ldr	r1, [pc, #32]	@ (800310c <__NVIC_SetPriority+0x50>)
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	3b04      	subs	r3, #4
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	440b      	add	r3, r1
 80030fa:	761a      	strb	r2, [r3, #24]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000e100 	.word	0xe000e100
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	@ 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f1c3 0307 	rsb	r3, r3, #7
 800312a:	2b04      	cmp	r3, #4
 800312c:	bf28      	it	cs
 800312e:	2304      	movcs	r3, #4
 8003130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3304      	adds	r3, #4
 8003136:	2b06      	cmp	r3, #6
 8003138:	d902      	bls.n	8003140 <NVIC_EncodePriority+0x30>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3b03      	subs	r3, #3
 800313e:	e000      	b.n	8003142 <NVIC_EncodePriority+0x32>
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003144:	f04f 32ff 	mov.w	r2, #4294967295
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43da      	mvns	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	401a      	ands	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003158:	f04f 31ff 	mov.w	r1, #4294967295
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	43d9      	mvns	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	4313      	orrs	r3, r2
         );
}
 800316a:	4618      	mov	r0, r3
 800316c:	3724      	adds	r7, #36	@ 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003188:	d301      	bcc.n	800318e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318a:	2301      	movs	r3, #1
 800318c:	e00f      	b.n	80031ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800318e:	4a0a      	ldr	r2, [pc, #40]	@ (80031b8 <SysTick_Config+0x40>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003196:	210f      	movs	r1, #15
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	f7ff ff8e 	bl	80030bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a0:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <SysTick_Config+0x40>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a6:	4b04      	ldr	r3, [pc, #16]	@ (80031b8 <SysTick_Config+0x40>)
 80031a8:	2207      	movs	r2, #7
 80031aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	e000e010 	.word	0xe000e010

080031bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff29 	bl	800301c <__NVIC_SetPriorityGrouping>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4603      	mov	r3, r0
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031e0:	f7ff ff40 	bl	8003064 <__NVIC_GetPriorityGrouping>
 80031e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	6978      	ldr	r0, [r7, #20]
 80031ec:	f7ff ff90 	bl	8003110 <NVIC_EncodePriority>
 80031f0:	4602      	mov	r2, r0
 80031f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff5f 	bl	80030bc <__NVIC_SetPriority>
}
 80031fe:	bf00      	nop
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff33 	bl	8003080 <__NVIC_EnableIRQ>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ffa4 	bl	8003178 <SysTick_Config>
 8003230:	4603      	mov	r3, r0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e08d      	b.n	800336a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	4b47      	ldr	r3, [pc, #284]	@ (8003374 <HAL_DMA_Init+0x138>)
 8003256:	429a      	cmp	r2, r3
 8003258:	d80f      	bhi.n	800327a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	4b45      	ldr	r3, [pc, #276]	@ (8003378 <HAL_DMA_Init+0x13c>)
 8003262:	4413      	add	r3, r2
 8003264:	4a45      	ldr	r2, [pc, #276]	@ (800337c <HAL_DMA_Init+0x140>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	009a      	lsls	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a42      	ldr	r2, [pc, #264]	@ (8003380 <HAL_DMA_Init+0x144>)
 8003276:	641a      	str	r2, [r3, #64]	@ 0x40
 8003278:	e00e      	b.n	8003298 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	4b40      	ldr	r3, [pc, #256]	@ (8003384 <HAL_DMA_Init+0x148>)
 8003282:	4413      	add	r3, r2
 8003284:	4a3d      	ldr	r2, [pc, #244]	@ (800337c <HAL_DMA_Init+0x140>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	009a      	lsls	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a3c      	ldr	r2, [pc, #240]	@ (8003388 <HAL_DMA_Init+0x14c>)
 8003296:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80032ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f9b6 	bl	800365c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032f8:	d102      	bne.n	8003300 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003314:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d010      	beq.n	8003340 <HAL_DMA_Init+0x104>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b04      	cmp	r3, #4
 8003324:	d80c      	bhi.n	8003340 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f9d6 	bl	80036d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	e008      	b.n	8003352 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40020407 	.word	0x40020407
 8003378:	bffdfff8 	.word	0xbffdfff8
 800337c:	cccccccd 	.word	0xcccccccd
 8003380:	40020000 	.word	0x40020000
 8003384:	bffdfbf8 	.word	0xbffdfbf8
 8003388:	40020400 	.word	0x40020400

0800338c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_DMA_Start_IT+0x20>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e066      	b.n	800347a <HAL_DMA_Start_IT+0xee>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d155      	bne.n	800346c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f8fb 	bl	80035e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 020e 	orr.w	r2, r2, #14
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	e00f      	b.n	8003424 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0204 	bic.w	r2, r2, #4
 8003412:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 020a 	orr.w	r2, r2, #10
 8003422:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003440:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003446:	2b00      	cmp	r3, #0
 8003448:	d007      	beq.n	800345a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003458:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0201 	orr.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e005      	b.n	8003478 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003474:	2302      	movs	r3, #2
 8003476:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003478:	7dfb      	ldrb	r3, [r7, #23]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2204      	movs	r2, #4
 80034a4:	409a      	lsls	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d026      	beq.n	80034fc <HAL_DMA_IRQHandler+0x7a>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d021      	beq.n	80034fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d107      	bne.n	80034d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0204 	bic.w	r2, r2, #4
 80034d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034da:	f003 021f 	and.w	r2, r3, #31
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	2104      	movs	r1, #4
 80034e4:	fa01 f202 	lsl.w	r2, r1, r2
 80034e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d071      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80034fa:	e06c      	b.n	80035d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2202      	movs	r2, #2
 8003506:	409a      	lsls	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d02e      	beq.n	800356e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d029      	beq.n	800356e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 020a 	bic.w	r2, r2, #10
 8003536:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003544:	f003 021f 	and.w	r2, r3, #31
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354c:	2102      	movs	r1, #2
 800354e:	fa01 f202 	lsl.w	r2, r1, r2
 8003552:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d038      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800356c:	e033      	b.n	80035d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2208      	movs	r2, #8
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d02a      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d025      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 020e 	bic.w	r2, r2, #14
 800359a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	2101      	movs	r1, #1
 80035aa:	fa01 f202 	lsl.w	r2, r1, r2
 80035ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80035d6:	bf00      	nop
 80035d8:	bf00      	nop
}
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d004      	beq.n	800360a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003608:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	f003 021f 	and.w	r2, r3, #31
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f202 	lsl.w	r2, r1, r2
 800361c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b10      	cmp	r3, #16
 800362c:	d108      	bne.n	8003640 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800363e:	e007      	b.n	8003650 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	4b16      	ldr	r3, [pc, #88]	@ (80036c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800366c:	429a      	cmp	r2, r3
 800366e:	d802      	bhi.n	8003676 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003670:	4b15      	ldr	r3, [pc, #84]	@ (80036c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e001      	b.n	800367a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003676:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003678:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	3b08      	subs	r3, #8
 8003686:	4a12      	ldr	r2, [pc, #72]	@ (80036d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003694:	089b      	lsrs	r3, r3, #2
 8003696:	009a      	lsls	r2, r3, #2
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	461a      	mov	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a0b      	ldr	r2, [pc, #44]	@ (80036d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80036a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	2201      	movs	r2, #1
 80036b0:	409a      	lsls	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40020407 	.word	0x40020407
 80036c8:	40020800 	.word	0x40020800
 80036cc:	40020820 	.word	0x40020820
 80036d0:	cccccccd 	.word	0xcccccccd
 80036d4:	40020880 	.word	0x40020880

080036d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	461a      	mov	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a08      	ldr	r2, [pc, #32]	@ (800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80036fa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3b01      	subs	r3, #1
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2201      	movs	r2, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	1000823f 	.word	0x1000823f
 800371c:	40020940 	.word	0x40020940

08003720 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e147      	b.n	80039c2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd ff3a 	bl	80015c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0210 	bic.w	r2, r2, #16
 800375a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800375c:	f7fe fa14 	bl	8001b88 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003762:	e012      	b.n	800378a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003764:	f7fe fa10 	bl	8001b88 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b0a      	cmp	r3, #10
 8003770:	d90b      	bls.n	800378a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2203      	movs	r2, #3
 8003782:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e11b      	b.n	80039c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b08      	cmp	r3, #8
 8003796:	d0e5      	beq.n	8003764 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037a8:	f7fe f9ee 	bl	8001b88 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80037ae:	e012      	b.n	80037d6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80037b0:	f7fe f9ea 	bl	8001b88 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b0a      	cmp	r3, #10
 80037bc:	d90b      	bls.n	80037d6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2203      	movs	r2, #3
 80037ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0f5      	b.n	80039c2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0e5      	beq.n	80037b0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0202 	orr.w	r2, r2, #2
 80037f2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a74      	ldr	r2, [pc, #464]	@ (80039cc <HAL_FDCAN_Init+0x2ac>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d103      	bne.n	8003806 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80037fe:	4a74      	ldr	r2, [pc, #464]	@ (80039d0 <HAL_FDCAN_Init+0x2b0>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7c1b      	ldrb	r3, [r3, #16]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d108      	bne.n	8003820 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800381c:	619a      	str	r2, [r3, #24]
 800381e:	e007      	b.n	8003830 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800382e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7c5b      	ldrb	r3, [r3, #17]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d108      	bne.n	800384a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003846:	619a      	str	r2, [r3, #24]
 8003848:	e007      	b.n	800385a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699a      	ldr	r2, [r3, #24]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003858:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	7c9b      	ldrb	r3, [r3, #18]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d108      	bne.n	8003874 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003870:	619a      	str	r2, [r3, #24]
 8003872:	e007      	b.n	8003884 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003882:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699a      	ldr	r2, [r3, #24]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80038a8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0210 	bic.w	r2, r2, #16
 80038b8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d108      	bne.n	80038d4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0204 	orr.w	r2, r2, #4
 80038d0:	619a      	str	r2, [r3, #24]
 80038d2:	e02c      	b.n	800392e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d028      	beq.n	800392e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d01c      	beq.n	800391e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038f2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0210 	orr.w	r2, r2, #16
 8003902:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d110      	bne.n	800392e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0220 	orr.w	r2, r2, #32
 800391a:	619a      	str	r2, [r3, #24]
 800391c:	e007      	b.n	800392e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0220 	orr.w	r2, r2, #32
 800392c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	3b01      	subs	r3, #1
 8003934:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	3b01      	subs	r3, #1
 800393c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800393e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003946:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	3b01      	subs	r3, #1
 8003950:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003956:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003958:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003962:	d115      	bne.n	8003990 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003968:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396e:	3b01      	subs	r3, #1
 8003970:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003972:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003978:	3b01      	subs	r3, #1
 800397a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800397c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	3b01      	subs	r3, #1
 8003986:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800398c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800398e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fc0e 	bl	80041c8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40006400 	.word	0x40006400
 80039d0:	40006500 	.word	0x40006500

080039d4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d110      	bne.n	8003a0a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e006      	b.n	8003a18 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d12c      	bne.n	8003a96 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e023      	b.n	8003aa4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fbfe 	bl	8004274 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	fa01 f202 	lsl.w	r2, r1, r2
 8003a84:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003a88:	2201      	movs	r2, #1
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e006      	b.n	8003aa4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9a:	f043 0208 	orr.w	r2, r3, #8
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
  }
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b08b      	sub	sp, #44	@ 0x2c
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ac4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003ac6:	7efb      	ldrb	r3, [r7, #27]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	f040 80e8 	bne.w	8003c9e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b40      	cmp	r3, #64	@ 0x40
 8003ad2:	d137      	bne.n	8003b44 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d107      	bne.n	8003af4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0db      	b.n	8003cac <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afc:	0e1b      	lsrs	r3, r3, #24
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d10a      	bne.n	8003b1c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b0e:	0a5b      	lsrs	r3, r3, #9
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	440b      	add	r3, r1
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b42:	e036      	b.n	8003bb2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d107      	bne.n	8003b64 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0a3      	b.n	8003cac <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b6c:	0e1b      	lsrs	r3, r3, #24
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d10a      	bne.n	8003b8c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	440b      	add	r3, r1
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d107      	bne.n	8003bd6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	0c9b      	lsrs	r3, r3, #18
 8003bcc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e005      	b.n	8003be2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	0c1b      	lsrs	r3, r3, #16
 8003c10:	f003 020f 	and.w	r2, r3, #15
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	0e1b      	lsrs	r3, r3, #24
 8003c36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	0fda      	lsrs	r2, r3, #31
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003c52:	2300      	movs	r3, #0
 8003c54:	623b      	str	r3, [r7, #32]
 8003c56:	e00a      	b.n	8003c6e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	441a      	add	r2, r3
 8003c5e:	6839      	ldr	r1, [r7, #0]
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	440b      	add	r3, r1
 8003c64:	7812      	ldrb	r2, [r2, #0]
 8003c66:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	4a11      	ldr	r2, [pc, #68]	@ (8003cb8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003c74:	5cd3      	ldrb	r3, [r2, r3]
 8003c76:	461a      	mov	r2, r3
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d3ec      	bcc.n	8003c58 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b40      	cmp	r3, #64	@ 0x40
 8003c82:	d105      	bne.n	8003c90 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003c8e:	e004      	b.n	8003c9a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e006      	b.n	8003cac <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca2:	f043 0208 	orr.w	r2, r3, #8
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
  }
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	372c      	adds	r7, #44	@ 0x2c
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	080065f8 	.word	0x080065f8

08003cbc <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cf2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d003      	beq.n	8003d02 <HAL_FDCAN_ActivateNotification+0x22>
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	f040 80c8 	bne.w	8003e92 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d08:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d004      	beq.n	8003d1e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d03b      	beq.n	8003d96 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d031      	beq.n	8003d96 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d027      	beq.n	8003d96 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01d      	beq.n	8003d96 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d004      	beq.n	8003d6e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f003 0310 	and.w	r3, r3, #16
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d013      	beq.n	8003d96 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00c      	beq.n	8003da6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d107      	bne.n	8003da6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d13b      	bne.n	8003e32 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d004      	beq.n	8003dce <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d131      	bne.n	8003e32 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d127      	bne.n	8003e32 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11d      	bne.n	8003e32 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d113      	bne.n	8003e32 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00c      	beq.n	8003e42 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0202 	orr.w	r2, r2, #2
 8003e40:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e006      	b.n	8003ea0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e96:	f043 0202 	orr.w	r2, r3, #2
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08c      	sub	sp, #48	@ 0x30
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ec8:	4013      	ands	r3, r2
 8003eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef8:	4013      	ands	r3, r2
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f02:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003f06:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0e:	6a3a      	ldr	r2, [r7, #32]
 8003f10:	4013      	ands	r3, r2
 8003f12:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003f1e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f32:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d006      	beq.n	8003f5e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2240      	movs	r2, #64	@ 0x40
 8003f56:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f916 	bl	800418a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d019      	beq.n	8003f9c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d014      	beq.n	8003f9c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f7a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f92:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003f94:	6939      	ldr	r1, [r7, #16]
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8d8 	bl	800414c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fa8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003faa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f8a2 	bl	80040f6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fbe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003fc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fc fbc2 	bl	800074c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003fd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f897 	bl	800410c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00c      	beq.n	8004002 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ffa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f890 	bl	8004122 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004008:	2b00      	cmp	r3, #0
 800400a:	d018      	beq.n	800403e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	d013      	beq.n	800403e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800401e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4013      	ands	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2280      	movs	r2, #128	@ 0x80
 8004034:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004036:	68f9      	ldr	r1, [r7, #12]
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f87c 	bl	8004136 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00c      	beq.n	8004062 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d007      	beq.n	8004062 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800405a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f880 	bl	8004162 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00c      	beq.n	8004086 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800407e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f878 	bl	8004176 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00f      	beq.n	80040b0 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80040a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80040be:	69f9      	ldr	r1, [r7, #28]
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f876 	bl	80041b2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6a3a      	ldr	r2, [r7, #32]
 80040d2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f858 	bl	800419e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80040ee:	bf00      	nop
 80040f0:	3730      	adds	r7, #48	@ 0x30
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80041d0:	4b27      	ldr	r3, [pc, #156]	@ (8004270 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80041d2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041e2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ea:	041a      	lsls	r2, r3, #16
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004208:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004210:	061a      	lsls	r2, r3, #24
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e005      	b.n	8004256 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3304      	adds	r3, #4
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	429a      	cmp	r2, r3
 8004260:	d3f3      	bcc.n	800424a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004262:	bf00      	nop
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	4000a400 	.word	0x4000a400

08004274 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	@ 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004292:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800429a:	4313      	orrs	r3, r2
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e00a      	b.n	80042b6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80042a8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80042ae:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80042b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042b4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80042c0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80042c6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80042cc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4413      	add	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	440b      	add	r3, r1
 80042e8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	3304      	adds	r3, #4
 80042f4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	3304      	adds	r3, #4
 8004300:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	e020      	b.n	800434a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3303      	adds	r3, #3
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4413      	add	r3, r2
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	3302      	adds	r3, #2
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	440b      	add	r3, r1
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004320:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	3301      	adds	r3, #1
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	440b      	add	r3, r1
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800432e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	440a      	add	r2, r1
 8004336:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004338:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	3304      	adds	r3, #4
 8004342:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	3304      	adds	r3, #4
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	4a06      	ldr	r2, [pc, #24]	@ (8004368 <FDCAN_CopyMessageToRAM+0xf4>)
 8004350:	5cd3      	ldrb	r3, [r2, r3]
 8004352:	461a      	mov	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	4293      	cmp	r3, r2
 8004358:	d3d6      	bcc.n	8004308 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800435a:	bf00      	nop
 800435c:	bf00      	nop
 800435e:	3724      	adds	r7, #36	@ 0x24
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	080065f8 	.word	0x080065f8

0800436c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800437e:	4b2f      	ldr	r3, [pc, #188]	@ (800443c <HAL_FLASH_Program+0xd0>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_FLASH_Program+0x1e>
 8004386:	2302      	movs	r3, #2
 8004388:	e053      	b.n	8004432 <HAL_FLASH_Program+0xc6>
 800438a:	4b2c      	ldr	r3, [pc, #176]	@ (800443c <HAL_FLASH_Program+0xd0>)
 800438c:	2201      	movs	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004390:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004394:	f000 f892 	bl	80044bc <FLASH_WaitForLastOperation>
 8004398:	4603      	mov	r3, r0
 800439a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d143      	bne.n	800442a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043a2:	4b26      	ldr	r3, [pc, #152]	@ (800443c <HAL_FLASH_Program+0xd0>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80043a8:	4b25      	ldr	r3, [pc, #148]	@ (8004440 <HAL_FLASH_Program+0xd4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80043b4:	4b22      	ldr	r3, [pc, #136]	@ (8004440 <HAL_FLASH_Program+0xd4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a21      	ldr	r2, [pc, #132]	@ (8004440 <HAL_FLASH_Program+0xd4>)
 80043ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043be:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80043c0:	4b1e      	ldr	r3, [pc, #120]	@ (800443c <HAL_FLASH_Program+0xd0>)
 80043c2:	2202      	movs	r2, #2
 80043c4:	771a      	strb	r2, [r3, #28]
 80043c6:	e002      	b.n	80043ce <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80043c8:	4b1c      	ldr	r3, [pc, #112]	@ (800443c <HAL_FLASH_Program+0xd0>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d107      	bne.n	80043e4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80043d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043d8:	68b8      	ldr	r0, [r7, #8]
 80043da:	f000 f8c1 	bl	8004560 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80043de:	2301      	movs	r3, #1
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	e010      	b.n	8004406 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d002      	beq.n	80043f0 <HAL_FLASH_Program+0x84>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d10a      	bne.n	8004406 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4619      	mov	r1, r3
 80043f4:	68b8      	ldr	r0, [r7, #8]
 80043f6:	f000 f8d9 	bl	80045ac <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d102      	bne.n	8004406 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8004400:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004404:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004406:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800440a:	f000 f857 	bl	80044bc <FLASH_WaitForLastOperation>
 800440e:	4603      	mov	r3, r0
 8004410:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d006      	beq.n	8004426 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004418:	4b09      	ldr	r3, [pc, #36]	@ (8004440 <HAL_FLASH_Program+0xd4>)
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	43db      	mvns	r3, r3
 8004420:	4907      	ldr	r1, [pc, #28]	@ (8004440 <HAL_FLASH_Program+0xd4>)
 8004422:	4013      	ands	r3, r2
 8004424:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004426:	f000 f9d1 	bl	80047cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800442a:	4b04      	ldr	r3, [pc, #16]	@ (800443c <HAL_FLASH_Program+0xd0>)
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000010 	.word	0x20000010
 8004440:	40022000 	.word	0x40022000

08004444 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800444e:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <HAL_FLASH_Unlock+0x38>)
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	da0b      	bge.n	800446e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004456:	4b09      	ldr	r3, [pc, #36]	@ (800447c <HAL_FLASH_Unlock+0x38>)
 8004458:	4a09      	ldr	r2, [pc, #36]	@ (8004480 <HAL_FLASH_Unlock+0x3c>)
 800445a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800445c:	4b07      	ldr	r3, [pc, #28]	@ (800447c <HAL_FLASH_Unlock+0x38>)
 800445e:	4a09      	ldr	r2, [pc, #36]	@ (8004484 <HAL_FLASH_Unlock+0x40>)
 8004460:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004462:	4b06      	ldr	r3, [pc, #24]	@ (800447c <HAL_FLASH_Unlock+0x38>)
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	da01      	bge.n	800446e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800446e:	79fb      	ldrb	r3, [r7, #7]
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	40022000 	.word	0x40022000
 8004480:	45670123 	.word	0x45670123
 8004484:	cdef89ab 	.word	0xcdef89ab

08004488 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004492:	4b09      	ldr	r3, [pc, #36]	@ (80044b8 <HAL_FLASH_Lock+0x30>)
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	4a08      	ldr	r2, [pc, #32]	@ (80044b8 <HAL_FLASH_Lock+0x30>)
 8004498:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800449c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800449e:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <HAL_FLASH_Lock+0x30>)
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	da01      	bge.n	80044aa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80044aa:	79fb      	ldrb	r3, [r7, #7]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40022000 	.word	0x40022000

080044bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80044c4:	f7fd fb60 	bl	8001b88 <HAL_GetTick>
 80044c8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80044ca:	e009      	b.n	80044e0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80044cc:	f7fd fb5c 	bl	8001b88 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d201      	bcs.n	80044e0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e037      	b.n	8004550 <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80044e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004558 <FLASH_WaitForLastOperation+0x9c>)
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ec:	d0ee      	beq.n	80044cc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80044ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004558 <FLASH_WaitForLastOperation+0x9c>)
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80044f6:	4013      	ands	r3, r2
 80044f8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01d      	beq.n	800453c <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8004500:	4b16      	ldr	r3, [pc, #88]	@ (800455c <FLASH_WaitForLastOperation+0xa0>)
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4313      	orrs	r3, r2
 8004508:	4a14      	ldr	r2, [pc, #80]	@ (800455c <FLASH_WaitForLastOperation+0xa0>)
 800450a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004512:	d307      	bcc.n	8004524 <FLASH_WaitForLastOperation+0x68>
 8004514:	4b10      	ldr	r3, [pc, #64]	@ (8004558 <FLASH_WaitForLastOperation+0x9c>)
 8004516:	699a      	ldr	r2, [r3, #24]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800451e:	490e      	ldr	r1, [pc, #56]	@ (8004558 <FLASH_WaitForLastOperation+0x9c>)
 8004520:	4313      	orrs	r3, r2
 8004522:	618b      	str	r3, [r1, #24]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d004      	beq.n	8004538 <FLASH_WaitForLastOperation+0x7c>
 800452e:	4a0a      	ldr	r2, [pc, #40]	@ (8004558 <FLASH_WaitForLastOperation+0x9c>)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004536:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e009      	b.n	8004550 <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800453c:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <FLASH_WaitForLastOperation+0x9c>)
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d102      	bne.n	800454e <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004548:	4b03      	ldr	r3, [pc, #12]	@ (8004558 <FLASH_WaitForLastOperation+0x9c>)
 800454a:	2201      	movs	r2, #1
 800454c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40022000 	.word	0x40022000
 800455c:	20000010 	.word	0x20000010

08004560 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800456c:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <FLASH_Program_DoubleWord+0x48>)
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	4a0d      	ldr	r2, [pc, #52]	@ (80045a8 <FLASH_Program_DoubleWord+0x48>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800457e:	f3bf 8f6f 	isb	sy
}
 8004582:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004584:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	000a      	movs	r2, r1
 8004592:	2300      	movs	r3, #0
 8004594:	68f9      	ldr	r1, [r7, #12]
 8004596:	3104      	adds	r1, #4
 8004598:	4613      	mov	r3, r2
 800459a:	600b      	str	r3, [r1, #0]
}
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40022000 	.word	0x40022000

080045ac <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b089      	sub	sp, #36	@ 0x24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80045b6:	2340      	movs	r3, #64	@ 0x40
 80045b8:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80045c2:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <FLASH_Program_Fast+0x68>)
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4a13      	ldr	r2, [pc, #76]	@ (8004614 <FLASH_Program_Fast+0x68>)
 80045c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ce:	f3ef 8310 	mrs	r3, PRIMASK
 80045d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80045d4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80045d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80045d8:	b672      	cpsid	i
}
 80045da:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	3304      	adds	r3, #4
 80045e8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	3304      	adds	r3, #4
 80045ee:	617b      	str	r3, [r7, #20]
    row_index--;
 80045f0:	7ffb      	ldrb	r3, [r7, #31]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80045f6:	7ffb      	ldrb	r3, [r7, #31]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1ef      	bne.n	80045dc <FLASH_Program_Fast+0x30>
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f383 8810 	msr	PRIMASK, r3
}
 8004606:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004608:	bf00      	nop
 800460a:	3724      	adds	r7, #36	@ 0x24
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40022000 	.word	0x40022000

08004618 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004622:	4b47      	ldr	r3, [pc, #284]	@ (8004740 <HAL_FLASHEx_Erase+0x128>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_FLASHEx_Erase+0x16>
 800462a:	2302      	movs	r3, #2
 800462c:	e083      	b.n	8004736 <HAL_FLASHEx_Erase+0x11e>
 800462e:	4b44      	ldr	r3, [pc, #272]	@ (8004740 <HAL_FLASHEx_Erase+0x128>)
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004634:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004638:	f7ff ff40 	bl	80044bc <FLASH_WaitForLastOperation>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d173      	bne.n	800472e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004646:	4b3e      	ldr	r3, [pc, #248]	@ (8004740 <HAL_FLASHEx_Erase+0x128>)
 8004648:	2200      	movs	r2, #0
 800464a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800464c:	4b3d      	ldr	r3, [pc, #244]	@ (8004744 <HAL_FLASHEx_Erase+0x12c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004654:	2b00      	cmp	r3, #0
 8004656:	d013      	beq.n	8004680 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004658:	4b3a      	ldr	r3, [pc, #232]	@ (8004744 <HAL_FLASHEx_Erase+0x12c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004660:	2b00      	cmp	r3, #0
 8004662:	d009      	beq.n	8004678 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004664:	4b37      	ldr	r3, [pc, #220]	@ (8004744 <HAL_FLASHEx_Erase+0x12c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a36      	ldr	r2, [pc, #216]	@ (8004744 <HAL_FLASHEx_Erase+0x12c>)
 800466a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800466e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004670:	4b33      	ldr	r3, [pc, #204]	@ (8004740 <HAL_FLASHEx_Erase+0x128>)
 8004672:	2203      	movs	r2, #3
 8004674:	771a      	strb	r2, [r3, #28]
 8004676:	e016      	b.n	80046a6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004678:	4b31      	ldr	r3, [pc, #196]	@ (8004740 <HAL_FLASHEx_Erase+0x128>)
 800467a:	2201      	movs	r2, #1
 800467c:	771a      	strb	r2, [r3, #28]
 800467e:	e012      	b.n	80046a6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004680:	4b30      	ldr	r3, [pc, #192]	@ (8004744 <HAL_FLASHEx_Erase+0x12c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800468c:	4b2d      	ldr	r3, [pc, #180]	@ (8004744 <HAL_FLASHEx_Erase+0x12c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2c      	ldr	r2, [pc, #176]	@ (8004744 <HAL_FLASHEx_Erase+0x12c>)
 8004692:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004696:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004698:	4b29      	ldr	r3, [pc, #164]	@ (8004740 <HAL_FLASHEx_Erase+0x128>)
 800469a:	2202      	movs	r2, #2
 800469c:	771a      	strb	r2, [r3, #28]
 800469e:	e002      	b.n	80046a6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80046a0:	4b27      	ldr	r3, [pc, #156]	@ (8004740 <HAL_FLASHEx_Erase+0x128>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d111      	bne.n	80046d2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 f848 	bl	8004748 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80046b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046bc:	f7ff fefe 	bl	80044bc <FLASH_WaitForLastOperation>
 80046c0:	4603      	mov	r3, r0
 80046c2:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80046c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004744 <HAL_FLASHEx_Erase+0x12c>)
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004744 <HAL_FLASHEx_Erase+0x12c>)
 80046ca:	f023 0304 	bic.w	r3, r3, #4
 80046ce:	6153      	str	r3, [r2, #20]
 80046d0:	e02b      	b.n	800472a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295
 80046d8:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	e01b      	b.n	800471a <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4619      	mov	r1, r3
 80046e8:	68b8      	ldr	r0, [r7, #8]
 80046ea:	f000 f84b 	bl	8004784 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80046ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80046f2:	f7ff fee3 	bl	80044bc <FLASH_WaitForLastOperation>
 80046f6:	4603      	mov	r3, r0
 80046f8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80046fa:	4b12      	ldr	r3, [pc, #72]	@ (8004744 <HAL_FLASHEx_Erase+0x12c>)
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	4a11      	ldr	r2, [pc, #68]	@ (8004744 <HAL_FLASHEx_Erase+0x12c>)
 8004700:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 8004704:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	601a      	str	r2, [r3, #0]
          break;
 8004712:	e00a      	b.n	800472a <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	3301      	adds	r3, #1
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	4413      	add	r3, r2
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	d3db      	bcc.n	80046e2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800472a:	f000 f84f 	bl	80047cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800472e:	4b04      	ldr	r3, [pc, #16]	@ (8004740 <HAL_FLASHEx_Erase+0x128>)
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]

  return status;
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000010 	.word	0x20000010
 8004744:	40022000 	.word	0x40022000

08004748 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800475a:	4b09      	ldr	r3, [pc, #36]	@ (8004780 <FLASH_MassErase+0x38>)
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	4a08      	ldr	r2, [pc, #32]	@ (8004780 <FLASH_MassErase+0x38>)
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004766:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <FLASH_MassErase+0x38>)
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	4a05      	ldr	r2, [pc, #20]	@ (8004780 <FLASH_MassErase+0x38>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004770:	6153      	str	r3, [r2, #20]
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40022000 	.word	0x40022000

08004784 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800478e:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <FLASH_PageErase+0x44>)
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f423 72fc 	bic.w	r2, r3, #504	@ 0x1f8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800479e:	490a      	ldr	r1, [pc, #40]	@ (80047c8 <FLASH_PageErase+0x44>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80047a4:	4b08      	ldr	r3, [pc, #32]	@ (80047c8 <FLASH_PageErase+0x44>)
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	4a07      	ldr	r2, [pc, #28]	@ (80047c8 <FLASH_PageErase+0x44>)
 80047aa:	f043 0302 	orr.w	r3, r3, #2
 80047ae:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <FLASH_PageErase+0x44>)
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	4a04      	ldr	r2, [pc, #16]	@ (80047c8 <FLASH_PageErase+0x44>)
 80047b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ba:	6153      	str	r3, [r2, #20]
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40022000 	.word	0x40022000

080047cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80047d2:	4b21      	ldr	r3, [pc, #132]	@ (8004858 <FLASH_FlushCaches+0x8c>)
 80047d4:	7f1b      	ldrb	r3, [r3, #28]
 80047d6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d002      	beq.n	80047e4 <FLASH_FlushCaches+0x18>
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d117      	bne.n	8004814 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80047e4:	4b1d      	ldr	r3, [pc, #116]	@ (800485c <FLASH_FlushCaches+0x90>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1c      	ldr	r2, [pc, #112]	@ (800485c <FLASH_FlushCaches+0x90>)
 80047ea:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047ee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80047f0:	4b1a      	ldr	r3, [pc, #104]	@ (800485c <FLASH_FlushCaches+0x90>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a19      	ldr	r2, [pc, #100]	@ (800485c <FLASH_FlushCaches+0x90>)
 80047f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	4b17      	ldr	r3, [pc, #92]	@ (800485c <FLASH_FlushCaches+0x90>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a16      	ldr	r2, [pc, #88]	@ (800485c <FLASH_FlushCaches+0x90>)
 8004802:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004806:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004808:	4b14      	ldr	r3, [pc, #80]	@ (800485c <FLASH_FlushCaches+0x90>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a13      	ldr	r2, [pc, #76]	@ (800485c <FLASH_FlushCaches+0x90>)
 800480e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004812:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d002      	beq.n	8004820 <FLASH_FlushCaches+0x54>
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d111      	bne.n	8004844 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004820:	4b0e      	ldr	r3, [pc, #56]	@ (800485c <FLASH_FlushCaches+0x90>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a0d      	ldr	r2, [pc, #52]	@ (800485c <FLASH_FlushCaches+0x90>)
 8004826:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b0b      	ldr	r3, [pc, #44]	@ (800485c <FLASH_FlushCaches+0x90>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a0a      	ldr	r2, [pc, #40]	@ (800485c <FLASH_FlushCaches+0x90>)
 8004832:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004836:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004838:	4b08      	ldr	r3, [pc, #32]	@ (800485c <FLASH_FlushCaches+0x90>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a07      	ldr	r2, [pc, #28]	@ (800485c <FLASH_FlushCaches+0x90>)
 800483e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004842:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004844:	4b04      	ldr	r3, [pc, #16]	@ (8004858 <FLASH_FlushCaches+0x8c>)
 8004846:	2200      	movs	r2, #0
 8004848:	771a      	strb	r2, [r3, #28]
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000010 	.word	0x20000010
 800485c:	40022000 	.word	0x40022000

08004860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800486e:	e15a      	b.n	8004b26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2101      	movs	r1, #1
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	fa01 f303 	lsl.w	r3, r1, r3
 800487c:	4013      	ands	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 814c 	beq.w	8004b20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d005      	beq.n	80048a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800489c:	2b02      	cmp	r3, #2
 800489e:	d130      	bne.n	8004902 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	2203      	movs	r2, #3
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048d6:	2201      	movs	r2, #1
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43db      	mvns	r3, r3
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4013      	ands	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	f003 0201 	and.w	r2, r3, #1
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b03      	cmp	r3, #3
 800490c:	d017      	beq.n	800493e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	2203      	movs	r2, #3
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4013      	ands	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d123      	bne.n	8004992 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	08da      	lsrs	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3208      	adds	r2, #8
 8004952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004956:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	220f      	movs	r2, #15
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	43db      	mvns	r3, r3
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4013      	ands	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	08da      	lsrs	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3208      	adds	r2, #8
 800498c:	6939      	ldr	r1, [r7, #16]
 800498e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	2203      	movs	r2, #3
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 0203 	and.w	r2, r3, #3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80a6 	beq.w	8004b20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b44 <HAL_GPIO_Init+0x2e4>)
 80049d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004b44 <HAL_GPIO_Init+0x2e4>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6613      	str	r3, [r2, #96]	@ 0x60
 80049e0:	4b58      	ldr	r3, [pc, #352]	@ (8004b44 <HAL_GPIO_Init+0x2e4>)
 80049e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ec:	4a56      	ldr	r2, [pc, #344]	@ (8004b48 <HAL_GPIO_Init+0x2e8>)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	089b      	lsrs	r3, r3, #2
 80049f2:	3302      	adds	r3, #2
 80049f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	220f      	movs	r2, #15
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a16:	d01f      	beq.n	8004a58 <HAL_GPIO_Init+0x1f8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a4c      	ldr	r2, [pc, #304]	@ (8004b4c <HAL_GPIO_Init+0x2ec>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d019      	beq.n	8004a54 <HAL_GPIO_Init+0x1f4>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a4b      	ldr	r2, [pc, #300]	@ (8004b50 <HAL_GPIO_Init+0x2f0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d013      	beq.n	8004a50 <HAL_GPIO_Init+0x1f0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a4a      	ldr	r2, [pc, #296]	@ (8004b54 <HAL_GPIO_Init+0x2f4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00d      	beq.n	8004a4c <HAL_GPIO_Init+0x1ec>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a49      	ldr	r2, [pc, #292]	@ (8004b58 <HAL_GPIO_Init+0x2f8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d007      	beq.n	8004a48 <HAL_GPIO_Init+0x1e8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a48      	ldr	r2, [pc, #288]	@ (8004b5c <HAL_GPIO_Init+0x2fc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d101      	bne.n	8004a44 <HAL_GPIO_Init+0x1e4>
 8004a40:	2305      	movs	r3, #5
 8004a42:	e00a      	b.n	8004a5a <HAL_GPIO_Init+0x1fa>
 8004a44:	2306      	movs	r3, #6
 8004a46:	e008      	b.n	8004a5a <HAL_GPIO_Init+0x1fa>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	e006      	b.n	8004a5a <HAL_GPIO_Init+0x1fa>
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e004      	b.n	8004a5a <HAL_GPIO_Init+0x1fa>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e002      	b.n	8004a5a <HAL_GPIO_Init+0x1fa>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <HAL_GPIO_Init+0x1fa>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	f002 0203 	and.w	r2, r2, #3
 8004a60:	0092      	lsls	r2, r2, #2
 8004a62:	4093      	lsls	r3, r2
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a6a:	4937      	ldr	r1, [pc, #220]	@ (8004b48 <HAL_GPIO_Init+0x2e8>)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	089b      	lsrs	r3, r3, #2
 8004a70:	3302      	adds	r3, #2
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a78:	4b39      	ldr	r3, [pc, #228]	@ (8004b60 <HAL_GPIO_Init+0x300>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4013      	ands	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a9c:	4a30      	ldr	r2, [pc, #192]	@ (8004b60 <HAL_GPIO_Init+0x300>)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8004b60 <HAL_GPIO_Init+0x300>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ac6:	4a26      	ldr	r2, [pc, #152]	@ (8004b60 <HAL_GPIO_Init+0x300>)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004acc:	4b24      	ldr	r3, [pc, #144]	@ (8004b60 <HAL_GPIO_Init+0x300>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004af0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b60 <HAL_GPIO_Init+0x300>)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004af6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b60 <HAL_GPIO_Init+0x300>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4013      	ands	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b1a:	4a11      	ldr	r2, [pc, #68]	@ (8004b60 <HAL_GPIO_Init+0x300>)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	3301      	adds	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f47f ae9d 	bne.w	8004870 <HAL_GPIO_Init+0x10>
  }
}
 8004b36:	bf00      	nop
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	48000400 	.word	0x48000400
 8004b50:	48000800 	.word	0x48000800
 8004b54:	48000c00 	.word	0x48000c00
 8004b58:	48001000 	.word	0x48001000
 8004b5c:	48001400 	.word	0x48001400
 8004b60:	40010400 	.word	0x40010400

08004b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	807b      	strh	r3, [r7, #2]
 8004b70:	4613      	mov	r3, r2
 8004b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b74:	787b      	ldrb	r3, [r7, #1]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b7a:	887a      	ldrh	r2, [r7, #2]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b80:	e002      	b.n	8004b88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b82:	887a      	ldrh	r2, [r7, #2]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	041a      	lsls	r2, r3, #16
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	43d9      	mvns	r1, r3
 8004bb2:	887b      	ldrh	r3, [r7, #2]
 8004bb4:	400b      	ands	r3, r1
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	619a      	str	r2, [r3, #24]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d141      	bne.n	8004c5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be2:	d131      	bne.n	8004c48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004be4:	4b47      	ldr	r3, [pc, #284]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bea:	4a46      	ldr	r2, [pc, #280]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bf4:	4b43      	ldr	r3, [pc, #268]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bfc:	4a41      	ldr	r2, [pc, #260]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c04:	4b40      	ldr	r3, [pc, #256]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2232      	movs	r2, #50	@ 0x32
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	0c9b      	lsrs	r3, r3, #18
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c1a:	e002      	b.n	8004c22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c22:	4b38      	ldr	r3, [pc, #224]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c2e:	d102      	bne.n	8004c36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f2      	bne.n	8004c1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c36:	4b33      	ldr	r3, [pc, #204]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c42:	d158      	bne.n	8004cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e057      	b.n	8004cf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c48:	4b2e      	ldr	r3, [pc, #184]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c58:	e04d      	b.n	8004cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c60:	d141      	bne.n	8004ce6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c62:	4b28      	ldr	r3, [pc, #160]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6e:	d131      	bne.n	8004cd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c70:	4b24      	ldr	r3, [pc, #144]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c76:	4a23      	ldr	r2, [pc, #140]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c80:	4b20      	ldr	r3, [pc, #128]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c88:	4a1e      	ldr	r2, [pc, #120]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c90:	4b1d      	ldr	r3, [pc, #116]	@ (8004d08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2232      	movs	r2, #50	@ 0x32
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004d0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	0c9b      	lsrs	r3, r3, #18
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ca6:	e002      	b.n	8004cae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cae:	4b15      	ldr	r3, [pc, #84]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cba:	d102      	bne.n	8004cc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f2      	bne.n	8004ca8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cc2:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cce:	d112      	bne.n	8004cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e011      	b.n	8004cf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cda:	4a0a      	ldr	r2, [pc, #40]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ce4:	e007      	b.n	8004cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ce6:	4b07      	ldr	r3, [pc, #28]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004cee:	4a05      	ldr	r2, [pc, #20]	@ (8004d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004cf4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40007000 	.word	0x40007000
 8004d08:	20000004 	.word	0x20000004
 8004d0c:	431bde83 	.word	0x431bde83

08004d10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	4a04      	ldr	r2, [pc, #16]	@ (8004d2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d1e:	6093      	str	r3, [r2, #8]
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40007000 	.word	0x40007000

08004d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e2fe      	b.n	8005340 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d075      	beq.n	8004e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4e:	4b97      	ldr	r3, [pc, #604]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d58:	4b94      	ldr	r3, [pc, #592]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b0c      	cmp	r3, #12
 8004d66:	d102      	bne.n	8004d6e <HAL_RCC_OscConfig+0x3e>
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d002      	beq.n	8004d74 <HAL_RCC_OscConfig+0x44>
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d10b      	bne.n	8004d8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d74:	4b8d      	ldr	r3, [pc, #564]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d05b      	beq.n	8004e38 <HAL_RCC_OscConfig+0x108>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d157      	bne.n	8004e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e2d9      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d94:	d106      	bne.n	8004da4 <HAL_RCC_OscConfig+0x74>
 8004d96:	4b85      	ldr	r3, [pc, #532]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a84      	ldr	r2, [pc, #528]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	e01d      	b.n	8004de0 <HAL_RCC_OscConfig+0xb0>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x98>
 8004dae:	4b7f      	ldr	r3, [pc, #508]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a7e      	ldr	r2, [pc, #504]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4b7c      	ldr	r3, [pc, #496]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a7b      	ldr	r2, [pc, #492]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e00b      	b.n	8004de0 <HAL_RCC_OscConfig+0xb0>
 8004dc8:	4b78      	ldr	r3, [pc, #480]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a77      	ldr	r2, [pc, #476]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	4b75      	ldr	r3, [pc, #468]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a74      	ldr	r2, [pc, #464]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d013      	beq.n	8004e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fc fece 	bl	8001b88 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df0:	f7fc feca 	bl	8001b88 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	@ 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e29e      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e02:	4b6a      	ldr	r3, [pc, #424]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0xc0>
 8004e0e:	e014      	b.n	8004e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e10:	f7fc feba 	bl	8001b88 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e18:	f7fc feb6 	bl	8001b88 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b64      	cmp	r3, #100	@ 0x64
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e28a      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e2a:	4b60      	ldr	r3, [pc, #384]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0xe8>
 8004e36:	e000      	b.n	8004e3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d075      	beq.n	8004f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e46:	4b59      	ldr	r3, [pc, #356]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 030c 	and.w	r3, r3, #12
 8004e4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e50:	4b56      	ldr	r3, [pc, #344]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b0c      	cmp	r3, #12
 8004e5e:	d102      	bne.n	8004e66 <HAL_RCC_OscConfig+0x136>
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d002      	beq.n	8004e6c <HAL_RCC_OscConfig+0x13c>
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d11f      	bne.n	8004eac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_RCC_OscConfig+0x154>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e25d      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e84:	4b49      	ldr	r3, [pc, #292]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	061b      	lsls	r3, r3, #24
 8004e92:	4946      	ldr	r1, [pc, #280]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e98:	4b45      	ldr	r3, [pc, #276]	@ (8004fb0 <HAL_RCC_OscConfig+0x280>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fc fe27 	bl	8001af0 <HAL_InitTick>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d043      	beq.n	8004f30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e249      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d023      	beq.n	8004efc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a3c      	ldr	r2, [pc, #240]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fc fe62 	bl	8001b88 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec8:	f7fc fe5e 	bl	8001b88 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e232      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eda:	4b34      	ldr	r3, [pc, #208]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee6:	4b31      	ldr	r3, [pc, #196]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	492d      	ldr	r1, [pc, #180]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]
 8004efa:	e01a      	b.n	8004f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004efc:	4b2b      	ldr	r3, [pc, #172]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2a      	ldr	r2, [pc, #168]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004f02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f08:	f7fc fe3e 	bl	8001b88 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f10:	f7fc fe3a 	bl	8001b88 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e20e      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f22:	4b22      	ldr	r3, [pc, #136]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x1e0>
 8004f2e:	e000      	b.n	8004f32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d041      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01c      	beq.n	8004f80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f46:	4b19      	ldr	r3, [pc, #100]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f4c:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f56:	f7fc fe17 	bl	8001b88 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f5e:	f7fc fe13 	bl	8001b88 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e1e7      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f70:	4b0e      	ldr	r3, [pc, #56]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0ef      	beq.n	8004f5e <HAL_RCC_OscConfig+0x22e>
 8004f7e:	e020      	b.n	8004fc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f80:	4b0a      	ldr	r3, [pc, #40]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f86:	4a09      	ldr	r2, [pc, #36]	@ (8004fac <HAL_RCC_OscConfig+0x27c>)
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7fc fdfa 	bl	8001b88 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f96:	e00d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f98:	f7fc fdf6 	bl	8001b88 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d906      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e1ca      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
 8004faa:	bf00      	nop
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fb4:	4b8c      	ldr	r3, [pc, #560]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8004fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1ea      	bne.n	8004f98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80a6 	beq.w	800511c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fd4:	4b84      	ldr	r3, [pc, #528]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x2b4>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCC_OscConfig+0x2b6>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00d      	beq.n	8005006 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fea:	4b7f      	ldr	r3, [pc, #508]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8004fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fee:	4a7e      	ldr	r2, [pc, #504]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8004ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005002:	2301      	movs	r3, #1
 8005004:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005006:	4b79      	ldr	r3, [pc, #484]	@ (80051ec <HAL_RCC_OscConfig+0x4bc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d118      	bne.n	8005044 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005012:	4b76      	ldr	r3, [pc, #472]	@ (80051ec <HAL_RCC_OscConfig+0x4bc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a75      	ldr	r2, [pc, #468]	@ (80051ec <HAL_RCC_OscConfig+0x4bc>)
 8005018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800501c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800501e:	f7fc fdb3 	bl	8001b88 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005026:	f7fc fdaf 	bl	8001b88 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e183      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005038:	4b6c      	ldr	r3, [pc, #432]	@ (80051ec <HAL_RCC_OscConfig+0x4bc>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d108      	bne.n	800505e <HAL_RCC_OscConfig+0x32e>
 800504c:	4b66      	ldr	r3, [pc, #408]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005052:	4a65      	ldr	r2, [pc, #404]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800505c:	e024      	b.n	80050a8 <HAL_RCC_OscConfig+0x378>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2b05      	cmp	r3, #5
 8005064:	d110      	bne.n	8005088 <HAL_RCC_OscConfig+0x358>
 8005066:	4b60      	ldr	r3, [pc, #384]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506c:	4a5e      	ldr	r2, [pc, #376]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 800506e:	f043 0304 	orr.w	r3, r3, #4
 8005072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005076:	4b5c      	ldr	r3, [pc, #368]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507c:	4a5a      	ldr	r2, [pc, #360]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005086:	e00f      	b.n	80050a8 <HAL_RCC_OscConfig+0x378>
 8005088:	4b57      	ldr	r3, [pc, #348]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508e:	4a56      	ldr	r2, [pc, #344]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005098:	4b53      	ldr	r3, [pc, #332]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 800509a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800509e:	4a52      	ldr	r2, [pc, #328]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 80050a0:	f023 0304 	bic.w	r3, r3, #4
 80050a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d016      	beq.n	80050de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b0:	f7fc fd6a 	bl	8001b88 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b6:	e00a      	b.n	80050ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b8:	f7fc fd66 	bl	8001b88 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e138      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ce:	4b46      	ldr	r3, [pc, #280]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0ed      	beq.n	80050b8 <HAL_RCC_OscConfig+0x388>
 80050dc:	e015      	b.n	800510a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050de:	f7fc fd53 	bl	8001b88 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050e4:	e00a      	b.n	80050fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e6:	f7fc fd4f 	bl	8001b88 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e121      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050fc:	4b3a      	ldr	r3, [pc, #232]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1ed      	bne.n	80050e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800510a:	7ffb      	ldrb	r3, [r7, #31]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d105      	bne.n	800511c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005110:	4b35      	ldr	r3, [pc, #212]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8005112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005114:	4a34      	ldr	r2, [pc, #208]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8005116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800511a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d03c      	beq.n	80051a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01c      	beq.n	800516a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005130:	4b2d      	ldr	r3, [pc, #180]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8005132:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005136:	4a2c      	ldr	r2, [pc, #176]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005140:	f7fc fd22 	bl	8001b88 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005148:	f7fc fd1e 	bl	8001b88 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e0f2      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800515a:	4b23      	ldr	r3, [pc, #140]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 800515c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0ef      	beq.n	8005148 <HAL_RCC_OscConfig+0x418>
 8005168:	e01b      	b.n	80051a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800516a:	4b1f      	ldr	r3, [pc, #124]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 800516c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005170:	4a1d      	ldr	r2, [pc, #116]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517a:	f7fc fd05 	bl	8001b88 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005182:	f7fc fd01 	bl	8001b88 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e0d5      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005194:	4b14      	ldr	r3, [pc, #80]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 8005196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ef      	bne.n	8005182 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80c9 	beq.w	800533e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ac:	4b0e      	ldr	r3, [pc, #56]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 030c 	and.w	r3, r3, #12
 80051b4:	2b0c      	cmp	r3, #12
 80051b6:	f000 8083 	beq.w	80052c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d15e      	bne.n	8005280 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c2:	4b09      	ldr	r3, [pc, #36]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a08      	ldr	r2, [pc, #32]	@ (80051e8 <HAL_RCC_OscConfig+0x4b8>)
 80051c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ce:	f7fc fcdb 	bl	8001b88 <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d4:	e00c      	b.n	80051f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d6:	f7fc fcd7 	bl	8001b88 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d905      	bls.n	80051f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e0ab      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
 80051e8:	40021000 	.word	0x40021000
 80051ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f0:	4b55      	ldr	r3, [pc, #340]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1ec      	bne.n	80051d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051fc:	4b52      	ldr	r3, [pc, #328]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	4b52      	ldr	r3, [pc, #328]	@ (800534c <HAL_RCC_OscConfig+0x61c>)
 8005202:	4013      	ands	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6a11      	ldr	r1, [r2, #32]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800520c:	3a01      	subs	r2, #1
 800520e:	0112      	lsls	r2, r2, #4
 8005210:	4311      	orrs	r1, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005216:	0212      	lsls	r2, r2, #8
 8005218:	4311      	orrs	r1, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800521e:	0852      	lsrs	r2, r2, #1
 8005220:	3a01      	subs	r2, #1
 8005222:	0552      	lsls	r2, r2, #21
 8005224:	4311      	orrs	r1, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800522a:	0852      	lsrs	r2, r2, #1
 800522c:	3a01      	subs	r2, #1
 800522e:	0652      	lsls	r2, r2, #25
 8005230:	4311      	orrs	r1, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005236:	06d2      	lsls	r2, r2, #27
 8005238:	430a      	orrs	r2, r1
 800523a:	4943      	ldr	r1, [pc, #268]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 800523c:	4313      	orrs	r3, r2
 800523e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005240:	4b41      	ldr	r3, [pc, #260]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a40      	ldr	r2, [pc, #256]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 8005246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800524a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800524c:	4b3e      	ldr	r3, [pc, #248]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4a3d      	ldr	r2, [pc, #244]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 8005252:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005256:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fc fc96 	bl	8001b88 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005260:	f7fc fc92 	bl	8001b88 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e066      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005272:	4b35      	ldr	r3, [pc, #212]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f0      	beq.n	8005260 <HAL_RCC_OscConfig+0x530>
 800527e:	e05e      	b.n	800533e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005280:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a30      	ldr	r2, [pc, #192]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 8005286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800528a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fc fc7c 	bl	8001b88 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005294:	f7fc fc78 	bl	8001b88 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e04c      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a6:	4b28      	ldr	r3, [pc, #160]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80052b2:	4b25      	ldr	r3, [pc, #148]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	4924      	ldr	r1, [pc, #144]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 80052b8:	4b25      	ldr	r3, [pc, #148]	@ (8005350 <HAL_RCC_OscConfig+0x620>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	60cb      	str	r3, [r1, #12]
 80052be:	e03e      	b.n	800533e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e039      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80052cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005348 <HAL_RCC_OscConfig+0x618>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f003 0203 	and.w	r2, r3, #3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d12c      	bne.n	800533a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ea:	3b01      	subs	r3, #1
 80052ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d123      	bne.n	800533a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052fe:	429a      	cmp	r2, r3
 8005300:	d11b      	bne.n	800533a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d113      	bne.n	800533a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	3b01      	subs	r3, #1
 8005320:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005322:	429a      	cmp	r2, r3
 8005324:	d109      	bne.n	800533a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	3b01      	subs	r3, #1
 8005334:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d001      	beq.n	800533e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40021000 	.word	0x40021000
 800534c:	019f800c 	.word	0x019f800c
 8005350:	feeefffc 	.word	0xfeeefffc

08005354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e11e      	b.n	80055aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800536c:	4b91      	ldr	r3, [pc, #580]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 030f 	and.w	r3, r3, #15
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d910      	bls.n	800539c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b8e      	ldr	r3, [pc, #568]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 020f 	bic.w	r2, r3, #15
 8005382:	498c      	ldr	r1, [pc, #560]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	4313      	orrs	r3, r2
 8005388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538a:	4b8a      	ldr	r3, [pc, #552]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e106      	b.n	80055aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d073      	beq.n	8005490 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d129      	bne.n	8005404 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053b0:	4b81      	ldr	r3, [pc, #516]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0f4      	b.n	80055aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80053c0:	f000 f966 	bl	8005690 <RCC_GetSysClockFreqFromPLLSource>
 80053c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4a7c      	ldr	r2, [pc, #496]	@ (80055bc <HAL_RCC_ClockConfig+0x268>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d93f      	bls.n	800544e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053ce:	4b7a      	ldr	r3, [pc, #488]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d033      	beq.n	800544e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d12f      	bne.n	800544e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053ee:	4b72      	ldr	r3, [pc, #456]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053f6:	4a70      	ldr	r2, [pc, #448]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 80053f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053fe:	2380      	movs	r3, #128	@ 0x80
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	e024      	b.n	800544e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d107      	bne.n	800541c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800540c:	4b6a      	ldr	r3, [pc, #424]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0c6      	b.n	80055aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800541c:	4b66      	ldr	r3, [pc, #408]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0be      	b.n	80055aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800542c:	f000 f8ce 	bl	80055cc <HAL_RCC_GetSysClockFreq>
 8005430:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	4a61      	ldr	r2, [pc, #388]	@ (80055bc <HAL_RCC_ClockConfig+0x268>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d909      	bls.n	800544e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800543a:	4b5f      	ldr	r3, [pc, #380]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005442:	4a5d      	ldr	r2, [pc, #372]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 8005444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005448:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800544a:	2380      	movs	r3, #128	@ 0x80
 800544c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800544e:	4b5a      	ldr	r3, [pc, #360]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f023 0203 	bic.w	r2, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4957      	ldr	r1, [pc, #348]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 800545c:	4313      	orrs	r3, r2
 800545e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005460:	f7fc fb92 	bl	8001b88 <HAL_GetTick>
 8005464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005466:	e00a      	b.n	800547e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005468:	f7fc fb8e 	bl	8001b88 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e095      	b.n	80055aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547e:	4b4e      	ldr	r3, [pc, #312]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 020c 	and.w	r2, r3, #12
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	429a      	cmp	r2, r3
 800548e:	d1eb      	bne.n	8005468 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d023      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a8:	4b43      	ldr	r3, [pc, #268]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4a42      	ldr	r2, [pc, #264]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 80054ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80054c0:	4b3d      	ldr	r3, [pc, #244]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054c8:	4a3b      	ldr	r2, [pc, #236]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 80054ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054d0:	4b39      	ldr	r3, [pc, #228]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	4936      	ldr	r1, [pc, #216]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b80      	cmp	r3, #128	@ 0x80
 80054e8:	d105      	bne.n	80054f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054ea:	4b33      	ldr	r3, [pc, #204]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	4a32      	ldr	r2, [pc, #200]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 80054f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054f6:	4b2f      	ldr	r3, [pc, #188]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d21d      	bcs.n	8005540 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005504:	4b2b      	ldr	r3, [pc, #172]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f023 020f 	bic.w	r2, r3, #15
 800550c:	4929      	ldr	r1, [pc, #164]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	4313      	orrs	r3, r2
 8005512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005514:	f7fc fb38 	bl	8001b88 <HAL_GetTick>
 8005518:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800551a:	e00a      	b.n	8005532 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800551c:	f7fc fb34 	bl	8001b88 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e03b      	b.n	80055aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005532:	4b20      	ldr	r3, [pc, #128]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d1ed      	bne.n	800551c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d008      	beq.n	800555e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800554c:	4b1a      	ldr	r3, [pc, #104]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	4917      	ldr	r1, [pc, #92]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d009      	beq.n	800557e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800556a:	4b13      	ldr	r3, [pc, #76]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	490f      	ldr	r1, [pc, #60]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 800557a:	4313      	orrs	r3, r2
 800557c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800557e:	f000 f825 	bl	80055cc <HAL_RCC_GetSysClockFreq>
 8005582:	4602      	mov	r2, r0
 8005584:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <HAL_RCC_ClockConfig+0x264>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	490c      	ldr	r1, [pc, #48]	@ (80055c0 <HAL_RCC_ClockConfig+0x26c>)
 8005590:	5ccb      	ldrb	r3, [r1, r3]
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	fa22 f303 	lsr.w	r3, r2, r3
 800559a:	4a0a      	ldr	r2, [pc, #40]	@ (80055c4 <HAL_RCC_ClockConfig+0x270>)
 800559c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800559e:	4b0a      	ldr	r3, [pc, #40]	@ (80055c8 <HAL_RCC_ClockConfig+0x274>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fc faa4 	bl	8001af0 <HAL_InitTick>
 80055a8:	4603      	mov	r3, r0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3718      	adds	r7, #24
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40022000 	.word	0x40022000
 80055b8:	40021000 	.word	0x40021000
 80055bc:	04c4b400 	.word	0x04c4b400
 80055c0:	080065e8 	.word	0x080065e8
 80055c4:	20000004 	.word	0x20000004
 80055c8:	20000008 	.word	0x20000008

080055cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80055d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 030c 	and.w	r3, r3, #12
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d102      	bne.n	80055e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055de:	4b2a      	ldr	r3, [pc, #168]	@ (8005688 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	e047      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055e4:	4b27      	ldr	r3, [pc, #156]	@ (8005684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 030c 	and.w	r3, r3, #12
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d102      	bne.n	80055f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055f0:	4b26      	ldr	r3, [pc, #152]	@ (800568c <HAL_RCC_GetSysClockFreq+0xc0>)
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	e03e      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80055f6:	4b23      	ldr	r3, [pc, #140]	@ (8005684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 030c 	and.w	r3, r3, #12
 80055fe:	2b0c      	cmp	r3, #12
 8005600:	d136      	bne.n	8005670 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005602:	4b20      	ldr	r3, [pc, #128]	@ (8005684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800560c:	4b1d      	ldr	r3, [pc, #116]	@ (8005684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	091b      	lsrs	r3, r3, #4
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	3301      	adds	r3, #1
 8005618:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b03      	cmp	r3, #3
 800561e:	d10c      	bne.n	800563a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005620:	4a1a      	ldr	r2, [pc, #104]	@ (800568c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	fbb2 f3f3 	udiv	r3, r2, r3
 8005628:	4a16      	ldr	r2, [pc, #88]	@ (8005684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800562a:	68d2      	ldr	r2, [r2, #12]
 800562c:	0a12      	lsrs	r2, r2, #8
 800562e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005632:	fb02 f303 	mul.w	r3, r2, r3
 8005636:	617b      	str	r3, [r7, #20]
      break;
 8005638:	e00c      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800563a:	4a13      	ldr	r2, [pc, #76]	@ (8005688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005642:	4a10      	ldr	r2, [pc, #64]	@ (8005684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005644:	68d2      	ldr	r2, [r2, #12]
 8005646:	0a12      	lsrs	r2, r2, #8
 8005648:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800564c:	fb02 f303 	mul.w	r3, r2, r3
 8005650:	617b      	str	r3, [r7, #20]
      break;
 8005652:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005654:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	0e5b      	lsrs	r3, r3, #25
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	3301      	adds	r3, #1
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	e001      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005674:	693b      	ldr	r3, [r7, #16]
}
 8005676:	4618      	mov	r0, r3
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40021000 	.word	0x40021000
 8005688:	00f42400 	.word	0x00f42400
 800568c:	007a1200 	.word	0x007a1200

08005690 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005696:	4b1e      	ldr	r3, [pc, #120]	@ (8005710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	091b      	lsrs	r3, r3, #4
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	3301      	adds	r3, #1
 80056ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d10c      	bne.n	80056ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056b4:	4a17      	ldr	r2, [pc, #92]	@ (8005714 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	4a14      	ldr	r2, [pc, #80]	@ (8005710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056be:	68d2      	ldr	r2, [r2, #12]
 80056c0:	0a12      	lsrs	r2, r2, #8
 80056c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056c6:	fb02 f303 	mul.w	r3, r2, r3
 80056ca:	617b      	str	r3, [r7, #20]
    break;
 80056cc:	e00c      	b.n	80056e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056ce:	4a12      	ldr	r2, [pc, #72]	@ (8005718 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056d8:	68d2      	ldr	r2, [r2, #12]
 80056da:	0a12      	lsrs	r2, r2, #8
 80056dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056e0:	fb02 f303 	mul.w	r3, r2, r3
 80056e4:	617b      	str	r3, [r7, #20]
    break;
 80056e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056e8:	4b09      	ldr	r3, [pc, #36]	@ (8005710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	0e5b      	lsrs	r3, r3, #25
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	3301      	adds	r3, #1
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005702:	687b      	ldr	r3, [r7, #4]
}
 8005704:	4618      	mov	r0, r3
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	40021000 	.word	0x40021000
 8005714:	007a1200 	.word	0x007a1200
 8005718:	00f42400 	.word	0x00f42400

0800571c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005724:	2300      	movs	r3, #0
 8005726:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005728:	2300      	movs	r3, #0
 800572a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 8098 	beq.w	800586a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800573a:	2300      	movs	r3, #0
 800573c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800573e:	4b43      	ldr	r3, [pc, #268]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10d      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800574a:	4b40      	ldr	r3, [pc, #256]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574e:	4a3f      	ldr	r2, [pc, #252]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005754:	6593      	str	r3, [r2, #88]	@ 0x58
 8005756:	4b3d      	ldr	r3, [pc, #244]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800575a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800575e:	60bb      	str	r3, [r7, #8]
 8005760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005762:	2301      	movs	r3, #1
 8005764:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005766:	4b3a      	ldr	r3, [pc, #232]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a39      	ldr	r2, [pc, #228]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800576c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005770:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005772:	f7fc fa09 	bl	8001b88 <HAL_GetTick>
 8005776:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005778:	e009      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800577a:	f7fc fa05 	bl	8001b88 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d902      	bls.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	74fb      	strb	r3, [r7, #19]
        break;
 800578c:	e005      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800578e:	4b30      	ldr	r3, [pc, #192]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0ef      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d159      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057a0:	4b2a      	ldr	r3, [pc, #168]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01e      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d019      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057bc:	4b23      	ldr	r3, [pc, #140]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057c8:	4b20      	ldr	r3, [pc, #128]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ce:	4a1f      	ldr	r2, [pc, #124]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057d8:	4b1c      	ldr	r3, [pc, #112]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057de:	4a1b      	ldr	r2, [pc, #108]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057e8:	4a18      	ldr	r2, [pc, #96]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fa:	f7fc f9c5 	bl	8001b88 <HAL_GetTick>
 80057fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005800:	e00b      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005802:	f7fc f9c1 	bl	8001b88 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005810:	4293      	cmp	r3, r2
 8005812:	d902      	bls.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	74fb      	strb	r3, [r7, #19]
            break;
 8005818:	e006      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800581a:	4b0c      	ldr	r3, [pc, #48]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800581c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0ec      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005828:	7cfb      	ldrb	r3, [r7, #19]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10b      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800582e:	4b07      	ldr	r3, [pc, #28]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583c:	4903      	ldr	r1, [pc, #12]	@ (800584c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005844:	e008      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005846:	7cfb      	ldrb	r3, [r7, #19]
 8005848:	74bb      	strb	r3, [r7, #18]
 800584a:	e005      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800584c:	40021000 	.word	0x40021000
 8005850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005854:	7cfb      	ldrb	r3, [r7, #19]
 8005856:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005858:	7c7b      	ldrb	r3, [r7, #17]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d105      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800585e:	4ba6      	ldr	r3, [pc, #664]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005862:	4aa5      	ldr	r2, [pc, #660]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005868:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005876:	4ba0      	ldr	r3, [pc, #640]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587c:	f023 0203 	bic.w	r2, r3, #3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	499c      	ldr	r1, [pc, #624]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005898:	4b97      	ldr	r3, [pc, #604]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589e:	f023 020c 	bic.w	r2, r3, #12
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	4994      	ldr	r1, [pc, #592]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ba:	4b8f      	ldr	r3, [pc, #572]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	498b      	ldr	r1, [pc, #556]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058dc:	4b86      	ldr	r3, [pc, #536]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	4983      	ldr	r1, [pc, #524]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058fe:	4b7e      	ldr	r3, [pc, #504]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005904:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	497a      	ldr	r1, [pc, #488]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005920:	4b75      	ldr	r3, [pc, #468]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005926:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	4972      	ldr	r1, [pc, #456]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005942:	4b6d      	ldr	r3, [pc, #436]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005948:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	4969      	ldr	r1, [pc, #420]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005964:	4b64      	ldr	r3, [pc, #400]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	4961      	ldr	r1, [pc, #388]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005986:	4b5c      	ldr	r3, [pc, #368]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	4958      	ldr	r1, [pc, #352]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d015      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059a8:	4b53      	ldr	r3, [pc, #332]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b6:	4950      	ldr	r1, [pc, #320]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059c6:	d105      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c8:	4b4b      	ldr	r3, [pc, #300]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4a4a      	ldr	r2, [pc, #296]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d015      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059e0:	4b45      	ldr	r3, [pc, #276]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	4942      	ldr	r1, [pc, #264]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059fe:	d105      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a00:	4b3d      	ldr	r3, [pc, #244]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	4a3c      	ldr	r2, [pc, #240]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a0a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d015      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a18:	4b37      	ldr	r3, [pc, #220]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a26:	4934      	ldr	r1, [pc, #208]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a36:	d105      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a38:	4b2f      	ldr	r3, [pc, #188]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d015      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a50:	4b29      	ldr	r3, [pc, #164]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a5e:	4926      	ldr	r1, [pc, #152]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a6e:	d105      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a70:	4b21      	ldr	r3, [pc, #132]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	4a20      	ldr	r2, [pc, #128]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d015      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a88:	4b1b      	ldr	r3, [pc, #108]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a96:	4918      	ldr	r1, [pc, #96]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aa6:	d105      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa8:	4b13      	ldr	r3, [pc, #76]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a12      	ldr	r2, [pc, #72]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ab2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d015      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ace:	490a      	ldr	r1, [pc, #40]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ada:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ade:	d105      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ae0:	4b05      	ldr	r3, [pc, #20]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a04      	ldr	r2, [pc, #16]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005aec:	7cbb      	ldrb	r3, [r7, #18]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40021000 	.word	0x40021000

08005afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e049      	b.n	8005ba2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fb fdae 	bl	8001684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	f000 fb1c 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d001      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e04a      	b.n	8005c5a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a21      	ldr	r2, [pc, #132]	@ (8005c68 <HAL_TIM_Base_Start_IT+0xbc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d018      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bee:	d013      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c6c <HAL_TIM_Base_Start_IT+0xc0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00e      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8005c70 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d009      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1a      	ldr	r2, [pc, #104]	@ (8005c74 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a19      	ldr	r2, [pc, #100]	@ (8005c78 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d115      	bne.n	8005c44 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	4b17      	ldr	r3, [pc, #92]	@ (8005c7c <HAL_TIM_Base_Start_IT+0xd0>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b06      	cmp	r3, #6
 8005c28:	d015      	beq.n	8005c56 <HAL_TIM_Base_Start_IT+0xaa>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c30:	d011      	beq.n	8005c56 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0201 	orr.w	r2, r2, #1
 8005c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c42:	e008      	b.n	8005c56 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	e000      	b.n	8005c58 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40012c00 	.word	0x40012c00
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	40000800 	.word	0x40000800
 8005c74:	40013400 	.word	0x40013400
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	00010007 	.word	0x00010007

08005c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d020      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01b      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0202 	mvn.w	r2, #2
 8005cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa36 	bl	800613c <HAL_TIM_IC_CaptureCallback>
 8005cd0:	e005      	b.n	8005cde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa28 	bl	8006128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fa39 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d020      	beq.n	8005d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01b      	beq.n	8005d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0204 	mvn.w	r2, #4
 8005d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa10 	bl	800613c <HAL_TIM_IC_CaptureCallback>
 8005d1c:	e005      	b.n	8005d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fa02 	bl	8006128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fa13 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d020      	beq.n	8005d7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01b      	beq.n	8005d7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0208 	mvn.w	r2, #8
 8005d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2204      	movs	r2, #4
 8005d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f9ea 	bl	800613c <HAL_TIM_IC_CaptureCallback>
 8005d68:	e005      	b.n	8005d76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f9dc 	bl	8006128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f9ed 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d020      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01b      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0210 	mvn.w	r2, #16
 8005d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f9c4 	bl	800613c <HAL_TIM_IC_CaptureCallback>
 8005db4:	e005      	b.n	8005dc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f9b6 	bl	8006128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f9c7 	bl	8006150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00c      	beq.n	8005dec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0201 	mvn.w	r2, #1
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f994 	bl	8006114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00c      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fb73 	bl	8006500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00c      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fb6b 	bl	8006514 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00c      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f981 	bl	8006164 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00c      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f06f 0220 	mvn.w	r2, #32
 8005e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fb33 	bl	80064ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00c      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fb3f 	bl	8006528 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00c      	beq.n	8005ece <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d007      	beq.n	8005ece <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fb37 	bl	800653c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00c      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fb2f 	bl	8006550 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00c      	beq.n	8005f16 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d007      	beq.n	8005f16 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fb27 	bl	8006564 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f16:	bf00      	nop
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_TIM_ConfigClockSource+0x1c>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e0de      	b.n	80060fa <HAL_TIM_ConfigClockSource+0x1da>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005f5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a63      	ldr	r2, [pc, #396]	@ (8006104 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	f000 80a9 	beq.w	80060ce <HAL_TIM_ConfigClockSource+0x1ae>
 8005f7c:	4a61      	ldr	r2, [pc, #388]	@ (8006104 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	f200 80ae 	bhi.w	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f84:	4a60      	ldr	r2, [pc, #384]	@ (8006108 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	f000 80a1 	beq.w	80060ce <HAL_TIM_ConfigClockSource+0x1ae>
 8005f8c:	4a5e      	ldr	r2, [pc, #376]	@ (8006108 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	f200 80a6 	bhi.w	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f94:	4a5d      	ldr	r2, [pc, #372]	@ (800610c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	f000 8099 	beq.w	80060ce <HAL_TIM_ConfigClockSource+0x1ae>
 8005f9c:	4a5b      	ldr	r2, [pc, #364]	@ (800610c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	f200 809e 	bhi.w	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fa4:	4a5a      	ldr	r2, [pc, #360]	@ (8006110 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	f000 8091 	beq.w	80060ce <HAL_TIM_ConfigClockSource+0x1ae>
 8005fac:	4a58      	ldr	r2, [pc, #352]	@ (8006110 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	f200 8096 	bhi.w	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005fb8:	f000 8089 	beq.w	80060ce <HAL_TIM_ConfigClockSource+0x1ae>
 8005fbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005fc0:	f200 808e 	bhi.w	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fc8:	d03e      	beq.n	8006048 <HAL_TIM_ConfigClockSource+0x128>
 8005fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fce:	f200 8087 	bhi.w	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd6:	f000 8086 	beq.w	80060e6 <HAL_TIM_ConfigClockSource+0x1c6>
 8005fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fde:	d87f      	bhi.n	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fe0:	2b70      	cmp	r3, #112	@ 0x70
 8005fe2:	d01a      	beq.n	800601a <HAL_TIM_ConfigClockSource+0xfa>
 8005fe4:	2b70      	cmp	r3, #112	@ 0x70
 8005fe6:	d87b      	bhi.n	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005fe8:	2b60      	cmp	r3, #96	@ 0x60
 8005fea:	d050      	beq.n	800608e <HAL_TIM_ConfigClockSource+0x16e>
 8005fec:	2b60      	cmp	r3, #96	@ 0x60
 8005fee:	d877      	bhi.n	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ff0:	2b50      	cmp	r3, #80	@ 0x50
 8005ff2:	d03c      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x14e>
 8005ff4:	2b50      	cmp	r3, #80	@ 0x50
 8005ff6:	d873      	bhi.n	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ff8:	2b40      	cmp	r3, #64	@ 0x40
 8005ffa:	d058      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x18e>
 8005ffc:	2b40      	cmp	r3, #64	@ 0x40
 8005ffe:	d86f      	bhi.n	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006000:	2b30      	cmp	r3, #48	@ 0x30
 8006002:	d064      	beq.n	80060ce <HAL_TIM_ConfigClockSource+0x1ae>
 8006004:	2b30      	cmp	r3, #48	@ 0x30
 8006006:	d86b      	bhi.n	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006008:	2b20      	cmp	r3, #32
 800600a:	d060      	beq.n	80060ce <HAL_TIM_ConfigClockSource+0x1ae>
 800600c:	2b20      	cmp	r3, #32
 800600e:	d867      	bhi.n	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d05c      	beq.n	80060ce <HAL_TIM_ConfigClockSource+0x1ae>
 8006014:	2b10      	cmp	r3, #16
 8006016:	d05a      	beq.n	80060ce <HAL_TIM_ConfigClockSource+0x1ae>
 8006018:	e062      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800602a:	f000 f9bd 	bl	80063a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800603c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	609a      	str	r2, [r3, #8]
      break;
 8006046:	e04f      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006058:	f000 f9a6 	bl	80063a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800606a:	609a      	str	r2, [r3, #8]
      break;
 800606c:	e03c      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800607a:	461a      	mov	r2, r3
 800607c:	f000 f918 	bl	80062b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2150      	movs	r1, #80	@ 0x50
 8006086:	4618      	mov	r0, r3
 8006088:	f000 f971 	bl	800636e <TIM_ITRx_SetConfig>
      break;
 800608c:	e02c      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800609a:	461a      	mov	r2, r3
 800609c:	f000 f937 	bl	800630e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2160      	movs	r1, #96	@ 0x60
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f961 	bl	800636e <TIM_ITRx_SetConfig>
      break;
 80060ac:	e01c      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ba:	461a      	mov	r2, r3
 80060bc:	f000 f8f8 	bl	80062b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2140      	movs	r1, #64	@ 0x40
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 f951 	bl	800636e <TIM_ITRx_SetConfig>
      break;
 80060cc:	e00c      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4619      	mov	r1, r3
 80060d8:	4610      	mov	r0, r2
 80060da:	f000 f948 	bl	800636e <TIM_ITRx_SetConfig>
      break;
 80060de:	e003      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	73fb      	strb	r3, [r7, #15]
      break;
 80060e4:	e000      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80060e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	00100070 	.word	0x00100070
 8006108:	00100040 	.word	0x00100040
 800610c:	00100030 	.word	0x00100030
 8006110:	00100020 	.word	0x00100020

08006114 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a42      	ldr	r2, [pc, #264]	@ (8006294 <TIM_Base_SetConfig+0x11c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00f      	beq.n	80061b0 <TIM_Base_SetConfig+0x38>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006196:	d00b      	beq.n	80061b0 <TIM_Base_SetConfig+0x38>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a3f      	ldr	r2, [pc, #252]	@ (8006298 <TIM_Base_SetConfig+0x120>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d007      	beq.n	80061b0 <TIM_Base_SetConfig+0x38>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a3e      	ldr	r2, [pc, #248]	@ (800629c <TIM_Base_SetConfig+0x124>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_Base_SetConfig+0x38>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a3d      	ldr	r2, [pc, #244]	@ (80062a0 <TIM_Base_SetConfig+0x128>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d108      	bne.n	80061c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a33      	ldr	r2, [pc, #204]	@ (8006294 <TIM_Base_SetConfig+0x11c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01b      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d0:	d017      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a30      	ldr	r2, [pc, #192]	@ (8006298 <TIM_Base_SetConfig+0x120>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a2f      	ldr	r2, [pc, #188]	@ (800629c <TIM_Base_SetConfig+0x124>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00f      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2e      	ldr	r2, [pc, #184]	@ (80062a0 <TIM_Base_SetConfig+0x128>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00b      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a2d      	ldr	r2, [pc, #180]	@ (80062a4 <TIM_Base_SetConfig+0x12c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2c      	ldr	r2, [pc, #176]	@ (80062a8 <TIM_Base_SetConfig+0x130>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_Base_SetConfig+0x8a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a2b      	ldr	r2, [pc, #172]	@ (80062ac <TIM_Base_SetConfig+0x134>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d108      	bne.n	8006214 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a16      	ldr	r2, [pc, #88]	@ (8006294 <TIM_Base_SetConfig+0x11c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00f      	beq.n	8006260 <TIM_Base_SetConfig+0xe8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a17      	ldr	r2, [pc, #92]	@ (80062a0 <TIM_Base_SetConfig+0x128>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00b      	beq.n	8006260 <TIM_Base_SetConfig+0xe8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a16      	ldr	r2, [pc, #88]	@ (80062a4 <TIM_Base_SetConfig+0x12c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d007      	beq.n	8006260 <TIM_Base_SetConfig+0xe8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a15      	ldr	r2, [pc, #84]	@ (80062a8 <TIM_Base_SetConfig+0x130>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_Base_SetConfig+0xe8>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a14      	ldr	r2, [pc, #80]	@ (80062ac <TIM_Base_SetConfig+0x134>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d103      	bne.n	8006268 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b01      	cmp	r3, #1
 8006278:	d105      	bne.n	8006286 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f023 0201 	bic.w	r2, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	611a      	str	r2, [r3, #16]
  }
}
 8006286:	bf00      	nop
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40012c00 	.word	0x40012c00
 8006298:	40000400 	.word	0x40000400
 800629c:	40000800 	.word	0x40000800
 80062a0:	40013400 	.word	0x40013400
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40014400 	.word	0x40014400
 80062ac:	40014800 	.word	0x40014800

080062b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	f023 0201 	bic.w	r2, r3, #1
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f023 030a 	bic.w	r3, r3, #10
 80062ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	621a      	str	r2, [r3, #32]
}
 8006302:	bf00      	nop
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800630e:	b480      	push	{r7}
 8006310:	b087      	sub	sp, #28
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f023 0210 	bic.w	r2, r3, #16
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	031b      	lsls	r3, r3, #12
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800634a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	621a      	str	r2, [r3, #32]
}
 8006362:	bf00      	nop
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	f043 0307 	orr.w	r3, r3, #7
 8006394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	609a      	str	r2, [r3, #8]
}
 800639c:	bf00      	nop
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	021a      	lsls	r2, r3, #8
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	609a      	str	r2, [r3, #8]
}
 80063dc:	bf00      	nop
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d101      	bne.n	8006400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063fc:	2302      	movs	r3, #2
 80063fe:	e065      	b.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2c      	ldr	r2, [pc, #176]	@ (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2b      	ldr	r2, [pc, #172]	@ (80064dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d108      	bne.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800643a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800644c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006450:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1b      	ldr	r2, [pc, #108]	@ (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d018      	beq.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006476:	d013      	beq.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a18      	ldr	r2, [pc, #96]	@ (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d00e      	beq.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a17      	ldr	r2, [pc, #92]	@ (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d009      	beq.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a12      	ldr	r2, [pc, #72]	@ (80064dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d004      	beq.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a13      	ldr	r2, [pc, #76]	@ (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10c      	bne.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	40012c00 	.word	0x40012c00
 80064dc:	40013400 	.word	0x40013400
 80064e0:	40000400 	.word	0x40000400
 80064e4:	40000800 	.word	0x40000800
 80064e8:	40014000 	.word	0x40014000

080064ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <memset>:
 8006578:	4402      	add	r2, r0
 800657a:	4603      	mov	r3, r0
 800657c:	4293      	cmp	r3, r2
 800657e:	d100      	bne.n	8006582 <memset+0xa>
 8006580:	4770      	bx	lr
 8006582:	f803 1b01 	strb.w	r1, [r3], #1
 8006586:	e7f9      	b.n	800657c <memset+0x4>

08006588 <__libc_init_array>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4d0d      	ldr	r5, [pc, #52]	@ (80065c0 <__libc_init_array+0x38>)
 800658c:	4c0d      	ldr	r4, [pc, #52]	@ (80065c4 <__libc_init_array+0x3c>)
 800658e:	1b64      	subs	r4, r4, r5
 8006590:	10a4      	asrs	r4, r4, #2
 8006592:	2600      	movs	r6, #0
 8006594:	42a6      	cmp	r6, r4
 8006596:	d109      	bne.n	80065ac <__libc_init_array+0x24>
 8006598:	4d0b      	ldr	r5, [pc, #44]	@ (80065c8 <__libc_init_array+0x40>)
 800659a:	4c0c      	ldr	r4, [pc, #48]	@ (80065cc <__libc_init_array+0x44>)
 800659c:	f000 f818 	bl	80065d0 <_init>
 80065a0:	1b64      	subs	r4, r4, r5
 80065a2:	10a4      	asrs	r4, r4, #2
 80065a4:	2600      	movs	r6, #0
 80065a6:	42a6      	cmp	r6, r4
 80065a8:	d105      	bne.n	80065b6 <__libc_init_array+0x2e>
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b0:	4798      	blx	r3
 80065b2:	3601      	adds	r6, #1
 80065b4:	e7ee      	b.n	8006594 <__libc_init_array+0xc>
 80065b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ba:	4798      	blx	r3
 80065bc:	3601      	adds	r6, #1
 80065be:	e7f2      	b.n	80065a6 <__libc_init_array+0x1e>
 80065c0:	08006608 	.word	0x08006608
 80065c4:	08006608 	.word	0x08006608
 80065c8:	08006608 	.word	0x08006608
 80065cc:	0800660c 	.word	0x0800660c

080065d0 <_init>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	bf00      	nop
 80065d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d6:	bc08      	pop	{r3}
 80065d8:	469e      	mov	lr, r3
 80065da:	4770      	bx	lr

080065dc <_fini>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	bf00      	nop
 80065e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e2:	bc08      	pop	{r3}
 80065e4:	469e      	mov	lr, r3
 80065e6:	4770      	bx	lr
